/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 15.11.2024 10:28:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 29125, -28115, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 7.529091089963913e-05, 7.8165896411519498e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 77,-38,-49,111,-88,14,-66,80,127,-43,-41,-18,-12,89,-59,37,125,-76,-47,-112,108,88,86,-65,-70,-98,-52,82,1,-109,-18,68, 
  /* [1][0][][] */ 66,86,84,-70,-83,86,-9,17,-42,-14,45,121,127,50,47,-2,-44,2,-67,-100,-86,44,40,124,97,86,-53,-5,121,-115,-120,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0031148898415267467, 0.0032338318414986134, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 504, 474, 485, -377, -331, 479, -416, 473, -427, -400, 500, 557, 485, 480, 511, -422, -510, -432, -350, -366, -426, 495, 472, 515, 540, 485, -407, -402, 553, -443, 45, -426, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.340199327794835e-05, 3.3089650969486684e-05, 3.2498846849193797e-05, 3.2555570214753971e-05, 3.1732968636788428e-05, 3.2698808354325593e-05, 3.219733844161965e-05, 3.283961268607527e-05, 3.2906322303460911e-05, 3.263485268689692e-05, 3.3345575502607971e-05, 3.3343414543196559e-05, 3.2810257835080847e-05, 3.3139345759991556e-05, 3.310973261250183e-05, 3.2629704946884885e-05, 3.054225817322731e-05, 3.3237221941817552e-05, 3.2346488296752796e-05, 3.1782881706021726e-05, 3.2008316338760778e-05, 3.3036340028047562e-05, 3.2089941669255495e-05, 3.2313135307049379e-05, 3.351058330736123e-05, 3.3022690331563354e-05, 3.2660831493558362e-05, 3.2165797165362164e-05, 3.1418403523275629e-05, 3.1897456210572273e-05, 3.1585776014253497e-05, 3.296320210210979e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-43,111,17,103,-6,-80,-92,67,-90,-100,7,63,17,-29,61,-48,-24,-57,-47,-62,-96,12,115,-108,17,84,-40,116,6,-12,-74,91,-54,-85,72,-103,-72,-82,36,83,-78,-88,108,58,-101,115,-11,23,-48,-25,102,-66,-42,-86,113,34,75,127,-102,-68,90,-43,55,0,23,78,101,61,105,93,-108,108,-92,49,92,-100,20,-52,39,61,28,101,2,-52,-37,-77,109,36,123,-2,-105,22,74,37,27, 
  /* [1][0][][] */ -49,41,-63,6,-31,89,46,17,88,-94,-97,114,73,-18,33,74,117,-33,45,127,-40,2,45,35,39,26,-34,115,18,13,108,-58,69,113,-1,38,60,70,-5,-58,-55,14,-14,-89,-27,44,-22,-47,-17,-78,124,65,19,92,-70,-42,36,108,70,91,-51,124,-59,-71,-50,43,85,50,113,36,26,18,-106,101,-41,56,90,-39,-34,82,-72,94,-44,-109,36,122,-61,-60,87,89,102,33,93,99,36,0, 
  /* [2][0][][] */ 55,45,-54,104,-13,-53,99,105,-95,97,-28,126,100,-7,92,-106,-52,-19,44,64,-91,-7,122,29,-20,90,114,17,-63,89,90,104,-62,-12,-87,-101,-81,105,116,-20,-111,-71,23,2,-78,127,-17,-71,108,47,100,-84,-39,72,31,26,-62,105,-56,12,-10,68,-28,80,101,55,58,97,-89,77,17,-66,43,-68,41,37,-48,-18,13,19,47,-88,-2,-34,8,-95,-12,-27,99,123,-17,14,-37,-79,-39,-63, 
  /* [3][0][][] */ 72,-4,35,-28,-76,47,-119,36,48,18,63,0,91,95,71,2,103,97,-62,10,113,-93,-71,-121,-27,-119,-88,105,42,-106,84,4,-61,-40,-21,-20,-99,-30,37,46,-30,-98,-104,-4,71,26,-53,-90,67,-90,39,-4,93,26,87,-106,-124,-124,-125,-65,-103,33,-43,71,53,-39,-67,-36,-38,-77,-1,99,17,-113,52,-55,29,98,94,-68,-96,-127,33,91,27,42,-49,-125,-89,41,-5,-115,92,-101,-98,37, 
  /* [4][0][][] */ 50,102,-5,51,-32,-30,28,13,60,89,-13,50,25,-42,-17,-72,-30,-9,-71,11,108,-99,85,23,-19,-8,62,-66,-55,33,-74,-59,67,115,11,-111,-56,-9,-122,46,-56,-67,-81,-98,31,106,32,55,20,-49,-22,-82,-97,43,-94,17,32,-102,23,10,3,-81,-44,-74,-53,53,-2,-42,24,-109,-105,-91,-61,22,101,51,59,-26,-12,-64,1,-51,-106,-25,-4,69,90,-1,-127,-80,43,42,26,100,-107,-16, 
  /* [5][0][][] */ 106,-86,86,92,48,-109,35,64,113,-109,5,-62,30,108,43,44,69,68,-66,107,39,60,25,-20,-102,-56,-9,-86,56,38,24,-93,-31,10,-63,26,-109,-29,55,29,-82,-46,49,105,-27,30,43,-45,-103,114,33,37,47,23,43,-15,117,57,-47,-34,39,-61,45,-65,-24,109,-19,36,82,9,112,-64,-41,86,-21,-65,16,-43,19,92,115,51,36,116,-76,86,2,44,76,-94,127,98,-10,32,81,-79, 
  /* [6][0][][] */ 14,-49,112,74,-91,-69,-7,63,-17,-89,3,-94,85,53,114,-126,39,-1,-4,101,-84,-126,108,57,-64,-88,-12,-63,-32,-120,44,-83,-97,-127,-50,-112,-13,36,-116,80,85,54,20,-19,-119,105,-94,-51,-88,14,-31,-70,57,-59,93,-31,4,-11,-73,112,-102,-2,65,-78,-57,64,99,-54,77,-10,-112,-9,54,-75,-97,-46,-85,-108,-62,-33,30,-32,40,-31,-77,-92,-44,-100,83,93,94,13,-58,-71,74,-33, 
  /* [7][0][][] */ 127,77,-30,-35,-64,124,-11,8,126,13,-90,23,64,-80,55,83,61,25,7,124,63,44,3,95,-62,112,49,65,-71,116,-11,44,33,33,75,111,-99,97,-1,-21,105,-69,95,78,59,5,112,-105,61,-48,-102,-62,-17,95,26,38,126,-83,13,-50,15,2,89,-105,-62,-48,77,32,-102,30,75,94,94,35,69,69,-58,62,-93,55,101,-27,-10,-66,96,41,-103,101,91,14,97,74,-47,-35,6,-57, 
  /* [8][0][][] */ 5,27,-52,-99,52,19,-84,-29,1,29,37,89,-5,-52,-93,-80,-77,88,-71,9,24,-33,75,103,-117,86,38,69,-76,12,-99,110,86,-41,40,-11,110,-4,-27,63,74,97,-119,-127,-18,-35,-31,103,14,-101,-72,-8,-72,-15,-40,-117,41,101,-103,98,105,35,36,101,-40,-54,-29,93,-93,44,25,-10,69,63,2,15,-55,100,77,68,28,74,-121,-93,19,39,67,-48,30,-43,-92,94,-89,-107,-55,63, 
  /* [9][0][][] */ -5,2,110,41,77,-116,-56,-126,37,44,-16,48,-34,-87,-110,-33,2,-6,-107,-76,-2,95,-116,-113,110,-15,-19,21,-18,-68,-98,96,56,-6,21,-26,-83,10,-42,-51,42,-74,49,-101,76,15,-113,49,48,-20,-90,-55,69,-82,-79,99,81,-67,-21,-10,-96,101,79,-84,-95,-2,100,42,-47,97,105,-99,1,77,-113,-104,-85,-127,-46,101,27,20,97,24,-51,-101,31,-21,96,27,-37,104,106,-6,55,-42, 
  /* [10][0][][] */ -53,89,101,-57,-7,113,116,36,45,40,32,-60,108,90,-25,20,-26,89,-90,-53,-11,37,65,-61,34,63,-108,-105,-40,87,-85,-73,94,109,127,83,-33,15,-25,43,-27,123,-102,-29,-88,-51,6,-52,5,10,46,16,70,29,-55,-26,-92,-7,38,-37,5,88,118,51,126,-67,-88,-14,30,-12,-85,-59,95,73,-74,117,-8,71,74,31,86,9,65,111,-93,72,109,-19,43,16,4,-60,-43,-42,-37,-63, 
  /* [11][0][][] */ 120,20,-4,113,127,54,63,41,120,101,-67,121,3,-74,38,-55,-47,-92,73,50,41,84,34,-100,-101,-85,-11,79,88,2,36,-10,-78,-62,62,56,-53,84,-19,-49,-17,112,-65,15,-32,-50,-81,-80,85,113,121,58,-83,-82,27,35,-58,-46,-20,-78,-70,97,93,19,38,96,-46,39,97,67,-74,-62,50,112,-89,61,-58,42,-35,97,-96,-15,-61,-35,55,-75,24,-17,-85,1,20,-91,-76,-24,-60,-33, 
  /* [12][0][][] */ 22,76,-47,10,97,16,-27,44,-70,69,-6,23,-37,22,57,-71,-92,-25,-40,-73,35,-2,26,107,-66,-41,110,-92,102,22,-27,125,-79,-62,-38,25,5,-67,-9,51,125,48,-103,-32,-13,-76,-31,127,-38,-108,-69,113,46,8,-74,95,-11,-51,63,76,67,123,4,64,122,42,-37,127,66,111,50,81,93,124,-8,3,-29,43,-110,-86,-50,114,57,23,-29,38,63,123,-86,-101,102,52,112,-8,38,82, 
  /* [13][0][][] */ 119,-52,112,106,103,123,90,73,80,-94,20,-20,99,81,76,-39,-110,-62,-62,38,76,-19,127,-39,-59,49,14,27,-79,-81,92,46,49,113,-12,46,-76,-20,34,77,-55,86,-44,20,-35,36,7,-21,42,111,-26,-99,-90,37,110,-73,-38,37,-12,-67,-19,126,-68,23,-44,-55,-84,96,-29,-4,105,7,-83,47,-68,-33,-98,75,90,-53,61,-87,105,29,-74,-95,102,125,-2,-44,-66,63,123,-45,76,2, 
  /* [14][0][][] */ -47,-90,98,80,88,-19,-6,-105,-71,-27,79,92,-21,-72,-81,-77,-43,-51,23,35,-35,43,8,71,-112,-62,-24,40,-105,-109,-69,48,115,-13,-24,16,105,127,44,-103,4,-103,45,99,77,-105,76,-76,124,50,87,60,107,-7,-6,23,-40,18,59,107,-9,-73,-19,83,-83,-3,88,-99,-80,-82,-79,104,13,92,59,-64,64,-99,64,44,55,-11,-108,-30,-107,-85,-103,114,119,17,100,-44,95,112,-7,69, 
  /* [15][0][][] */ 12,-30,-34,69,89,-94,56,-103,58,-8,-77,5,103,-3,-97,-118,86,6,-99,19,45,14,69,105,86,64,35,90,16,52,61,-108,0,2,-69,-10,-72,111,107,-74,11,110,-55,-29,20,-83,-49,-85,-11,-87,-9,28,-106,-107,-57,-13,64,48,-53,107,-50,-72,-3,99,-41,94,-77,-1,-66,0,59,-80,13,-14,55,-114,-6,52,103,76,-88,54,-115,-67,-127,-35,-98,36,82,69,-118,-46,50,108,-114,123, 
  /* [16][0][][] */ -83,-5,104,-74,38,115,-67,36,48,44,-124,70,-22,-60,-64,-72,110,79,69,63,113,79,-50,50,-37,52,-81,62,-117,8,36,6,-122,76,54,56,-45,51,-62,-82,16,-56,71,91,61,105,103,-21,-67,-127,-1,114,-52,119,64,42,21,90,67,7,119,111,30,59,52,8,-48,93,41,100,-41,-18,25,93,61,87,-18,101,-125,-22,7,-98,55,6,6,106,103,6,77,8,-22,115,68,-40,-98,25, 
  /* [17][0][][] */ 37,-120,27,79,-47,-115,-74,-101,34,-89,80,53,102,58,-113,41,31,47,96,110,-100,-14,10,-47,15,64,-77,22,105,-60,-35,75,-31,-23,33,3,-54,92,-96,-27,-104,-50,-17,-15,3,4,89,-119,78,102,-21,16,-23,69,92,-73,-127,89,-91,-111,26,-94,66,94,-89,-74,38,-110,-111,-2,106,26,16,-127,-72,58,108,-56,37,-67,8,-21,-81,-102,-117,63,77,-43,12,68,-106,-115,-15,87,7,6, 
  /* [18][0][][] */ -102,97,105,-76,-14,-118,-111,1,-11,70,-115,-53,-43,30,56,-64,17,-29,55,-29,98,-52,17,-86,27,-104,-23,108,24,30,-5,38,41,-34,-115,-114,-38,30,-41,60,-47,-6,-57,-15,-122,11,21,-7,14,-31,66,26,-117,-14,-4,83,-50,30,-25,-125,81,106,7,31,-76,-127,-37,86,64,-85,-79,106,-104,-39,-95,-112,50,51,-6,-81,-63,-14,-32,-74,100,-39,67,65,-115,-81,-69,103,84,-60,44,-22, 
  /* [19][0][][] */ 17,29,76,37,58,-90,97,92,95,-68,27,-15,-101,32,-60,61,74,-110,110,57,-25,80,-60,11,79,-85,28,-71,-97,-124,-70,45,81,-88,31,-4,7,-75,-61,-107,43,-121,-89,9,-91,29,77,-99,-30,36,-44,45,-39,13,3,-13,22,100,-6,-30,55,-60,102,61,-75,-4,-30,-3,-11,53,75,-55,-67,-127,-60,-85,-25,-119,13,108,58,-122,-34,78,-91,-8,6,-5,91,29,-6,64,-37,116,70,-52, 
  /* [20][0][][] */ -15,68,67,92,-93,90,15,56,12,8,-93,-1,-11,85,37,-79,-57,-41,-72,-37,19,-51,-83,-77,79,-79,-111,44,19,9,-46,112,99,41,-20,52,39,-37,-22,-116,-91,-39,-96,-110,-32,-69,-76,104,62,-127,-110,37,44,110,48,-5,90,71,96,87,111,-60,-74,-39,-33,-72,-57,11,-91,-83,-74,77,-70,-89,27,15,109,77,109,107,84,0,81,-29,57,118,-20,74,16,94,23,63,18,22,-9,4, 
  /* [21][0][][] */ 102,82,80,-94,105,-69,81,25,3,-57,-65,50,12,46,-44,-83,-96,-23,35,-6,114,-41,79,-76,62,-78,-25,81,23,11,0,-14,14,28,-85,-106,118,105,-109,-26,0,13,36,-7,-91,-77,-73,100,-17,-61,1,92,44,76,-87,34,-44,60,-43,127,61,-68,20,-5,89,38,-28,-62,-98,6,67,85,40,-14,79,75,-107,-24,70,113,21,108,42,-66,32,-92,72,-79,-98,85,117,-107,-37,-61,74,-25, 
  /* [22][0][][] */ 43,-49,-67,-91,101,-49,122,68,-91,100,-69,-103,127,-107,-110,-80,48,96,-109,-54,100,-68,42,41,102,5,-111,113,-52,-72,-59,-106,59,72,28,22,11,-7,-52,-112,11,-5,11,107,66,-114,104,-15,-58,-75,15,-12,-58,-87,-40,44,-5,-23,-15,-23,122,-71,-71,-109,-60,28,-109,-39,125,118,-16,6,-61,15,76,-86,54,-46,75,107,120,-93,-69,-113,90,94,111,-28,-50,42,-59,72,30,28,-22,109, 
  /* [23][0][][] */ 73,-85,13,67,107,-110,13,-97,63,-75,95,84,26,-103,27,-34,98,-28,-102,111,102,-76,114,-28,-13,-7,92,29,80,56,81,-32,-32,52,27,43,107,0,-107,13,-100,7,17,-105,-64,-87,123,35,85,-105,-83,-49,91,-56,-46,99,-78,-14,109,54,-108,-87,-48,-3,42,45,-112,-105,72,-8,122,-66,1,-29,-32,-89,52,-16,104,127,-47,-45,30,-100,103,11,124,-17,-86,50,116,0,116,-48,-25,91, 
  /* [24][0][][] */ -67,-41,-93,-59,-75,-102,-58,-81,74,127,92,55,124,72,-29,-106,-72,52,37,-42,105,-70,-45,-28,55,-19,83,67,116,64,15,-53,8,19,59,39,-44,-77,72,-12,-63,-91,113,14,31,-27,54,81,-79,-35,-12,23,81,67,79,-63,7,87,36,10,99,4,45,106,-88,106,-36,-79,-92,64,-47,-16,-28,43,104,111,70,-67,-94,-72,-68,-83,-52,-105,12,67,-3,-93,36,-98,16,-69,-7,38,-83,31, 
  /* [25][0][][] */ -79,-51,-72,-2,101,-66,-95,62,52,-103,-31,30,80,7,-103,-15,-66,68,42,-102,76,93,-4,-51,15,-44,-96,46,85,-83,48,123,101,-103,52,82,106,-54,-15,-11,-76,104,-97,11,107,48,74,43,-99,102,-63,9,52,-13,-54,18,-13,60,-101,83,127,51,59,54,8,84,-9,1,-83,3,-17,-106,43,-110,80,30,79,80,22,28,58,59,-39,90,-69,-45,-96,-87,-15,-33,113,30,-108,-7,-12,-82, 
  /* [26][0][][] */ 51,-122,-26,-18,-104,-9,-15,-18,-112,-127,104,84,-84,-53,7,-19,111,27,-86,-72,10,69,97,10,51,60,9,44,9,2,-98,-5,-34,-66,-104,-108,-70,82,-56,108,-104,101,53,29,-77,70,-46,100,-25,26,-10,98,7,-51,-8,-111,94,61,51,22,-2,-100,61,-26,112,-23,-61,54,-92,76,84,94,78,-102,-92,4,44,-113,-102,6,-33,72,79,-80,77,-1,-50,12,-87,112,6,14,-61,113,48,87, 
  /* [27][0][][] */ 7,5,-70,-111,-127,-78,-77,-22,41,97,34,-115,-33,53,79,-35,63,-21,58,-90,-100,6,-34,-29,-111,42,-116,-8,61,24,-39,-15,59,66,-98,-94,-95,-71,-121,86,-102,14,23,13,97,21,65,101,90,64,55,-81,-97,-92,-12,-40,99,-30,-121,-85,-63,-67,-40,50,36,-53,-120,103,45,5,-125,3,58,-57,-13,-95,45,-71,86,100,82,-33,113,-60,-81,-88,-37,29,-54,-9,-41,-57,52,13,85,54, 
  /* [28][0][][] */ 104,4,101,58,-110,-58,-93,-70,-34,-103,72,83,-75,-81,14,115,108,127,-66,88,-19,34,-104,-70,-117,96,-79,-54,-67,-70,9,-11,-100,27,94,86,27,-104,-34,42,119,54,-89,63,-103,-1,25,60,33,-57,-73,-30,-81,33,65,51,70,-3,93,64,1,-36,-92,15,71,87,-13,95,-74,37,-101,-34,84,46,4,-95,-114,-59,-82,57,-69,-88,124,-24,74,-115,77,-81,-100,-67,-28,-61,-33,64,-97,-69, 
  /* [29][0][][] */ 49,51,53,-59,-96,9,-127,2,99,-20,-97,-102,106,-113,-55,-52,-107,101,23,-72,-82,-40,51,1,-37,3,-50,-34,-111,-12,102,-8,48,-3,-87,-62,-16,101,-15,93,45,106,-52,81,-5,105,-61,-31,15,-12,56,-100,69,-107,111,43,-101,54,-56,108,-125,95,-102,-58,-68,-70,49,87,94,-94,30,-79,110,74,58,21,115,-68,-36,29,-10,-91,-14,-84,61,118,41,78,-43,96,68,79,-111,14,-7,59, 
  /* [30][0][][] */ 30,-67,-62,40,-104,31,-66,-14,127,-16,6,-37,-105,20,64,16,-3,43,98,-105,44,-102,-112,15,-115,27,-71,126,-12,-113,-97,7,-85,-72,-122,-55,16,-15,2,29,99,-74,-12,109,112,-39,110,71,-73,79,17,-107,104,-50,-9,111,-84,-58,-82,-54,-106,4,-70,-29,-114,-85,-98,97,-62,118,52,-37,-93,114,45,-87,-58,-70,-73,-54,32,29,-110,-18,-103,38,-107,116,-33,-115,84,57,-35,-2,14,-72, 
  /* [31][0][][] */ 78,-97,33,97,46,59,-65,-104,-34,-25,-84,-92,97,-127,-52,109,-65,-94,33,46,61,33,-35,103,43,-119,33,37,-77,-78,43,106,15,17,-96,-12,94,-34,-72,-116,56,-73,-35,29,1,-58,-43,22,69,20,90,-33,-121,-62,-86,20,-123,65,1,111,-43,-7,83,-81,67,109,-49,-82,70,-126,-124,7,-102,-44,0,2,-63,-51,48,89,-80,-47,53,69,54,95,-100,15,15,-55,-90,-60,8,102,-9,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018362397095188498, 0.0018190689152106643, 0.0017865902045741677, 0.001789708505384624, 0.0017444867407903075, 0.0017975828377529979, 0.0017700149910524487, 0.0018053234089165926, 0.0018089906079694629, 0.0017940669786185026, 0.0018331380560994148, 0.0018330193124711514, 0.0018037095433101058, 0.001821800833567977, 0.0018201728817075491, 0.0017937838565558195, 0.0016790286172181368, 0.0018271815497428179, 0.0017782143549993634, 0.0017472307663410902, 0.0017596236430108547, 0.001816138275898993, 0.0017641109880059958, 0.0017763808136805892, 0.0018422092543914914, 0.0018153878627344966, 0.0017954950453713536, 0.0017682809848338366, 0.0017271939432248473, 0.0017535293009132147, 0.0017363949446007609, 0.0018121176399290562, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1990, -161, 5035, 8115, 7433, -3227, 6030, -1501, -3145, -1049, 6306, -4029, 6401, 7403, 3010, 2980, -1094, -792, -2532, 6361, 2719, -904, 3250, -877, -1850, 4475, 1993, 2553, 6538, 2463, 6606, 1869, 1761, 7022, 8411, 4406, -589, 4415, 3433, -7272, -604, 1771, -115, 1829, -1672, 495, -1780, 1146, -11651, 2110, 1370, -4651, 9460, -1235, 2838, 2440, 1215, 4633, -876, -2632, 224, 2864, 668, 5718, 7084, 4232, 3698, 7505, 5742, -993, 3274, 7947, 4232, -1994, 6451, 7786, 1167, -4457, 803, 2201, 17340, 2618, -582, -3516, 1451, 1213, 1778, -3341, 5596, -905, 6034, 2319, 164, -4523, -184, 1931, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010488408588571474, 0.00015394287765957415, 0.00011088176688645035, 9.5329123723786324e-05, 8.6146385001484305e-05, 0.00012769676686730236, 0.00010016078158514574, 0.00016010650142561644, 0.00012932841491419822, 0.00014633472892455757, 0.00010448528337292373, 0.00010676593956304714, 8.9221546659246087e-05, 8.2512720837257802e-05, 0.00010619514068821445, 0.00013110136205796152, 0.00014942220877856016, 0.00013081249198876321, 0.0001198805111926049, 9.9361146567389369e-05, 0.00015799673565197736, 0.00013370202213991433, 0.00011423000250943005, 0.0001180029139504768, 0.00013100188516546041, 0.00013356027193367481, 0.00014959106920287013, 0.00013141850649844855, 0.00011141366121592, 0.0001764597836881876, 8.1221289292443544e-05, 0.00012372815399430692, 0.00016041121853049845, 8.7939428340177983e-05, 7.4810370279010385e-05, 0.00011437344801379368, 0.00016474432777613401, 0.0001012176217045635, 0.00011819408973678946, 7.2777678724378347e-05, 0.00012796209193766117, 0.00011891729809576645, 0.00013780138397123665, 0.00014037343498785049, 0.00014623868628405035, 0.00012043587048538029, 0.00013324765313882381, 0.00011301068298052996, 6.1162900237832218e-05, 0.0001283138117287308, 0.00019338888523634523, 0.00010227149323327467, 8.0251185863744467e-05, 0.00012611616693902761, 0.00011561331484699622, 0.00010576860950095579, 0.00013852732081431895, 8.4626568423118442e-05, 0.00015901219740044326, 0.00011878105578944087, 0.00017990201013162732, 9.6494703029748052e-05, 0.00014231399109121412, 0.00011715182336047292, 9.775362559594214e-05, 0.00011401218216633424, 0.0001064860844053328, 9.7612552053760737e-05, 0.00011861723760375753, 0.00012939776934217662, 0.00014966086018830538, 8.5457577370107174e-05, 0.00010926109825959429, 0.00011479173554107547, 0.000108698608528357, 0.00010199438111158088, 8.933369826991111e-05, 0.0001392606645822525, 0.00011588478810153902, 9.8931224783882499e-05, 4.8443929699715227e-05, 0.00011441387323429808, 0.00014087418094277382, 0.00012086375500075519, 0.00013564078835770488, 8.4173268987797201e-05, 0.00014989744522608817, 0.00012028624041704461, 0.00011412893218221143, 0.00010874067811528221, 0.00010154024494113401, 9.1519417765084654e-05, 0.00011944850848522037, 9.6955038316082209e-05, 0.000164106982992962, 0.0001238508993992582, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -9,92,-86,34,44,-33,100,64,-56,1,38,-95,76,127,-67,24, 
  /* [1][0][][] */ -17,3,-55,-28,-7,42,20,-127,32,-43,-24,-54,-10,-44,-50,2, 
  /* [2][0][][] */ -20,-25,35,77,26,46,-108,127,-20,5,72,-59,-18,-65,-41,65, 
  /* [3][0][][] */ 84,-93,71,-8,-7,-36,-28,127,-32,53,71,47,-8,62,8,13, 
  /* [4][0][][] */ -47,-27,-17,50,-101,16,-28,-127,-6,-14,41,-22,35,53,117,125, 
  /* [5][0][][] */ 127,27,-22,-25,-77,25,25,71,18,-8,60,92,124,30,-84,2, 
  /* [6][0][][] */ 13,-40,-66,-56,-80,1,3,-43,-59,-59,-25,23,86,54,127,-4, 
  /* [7][0][][] */ -53,35,-33,-80,-1,-58,-78,11,-100,51,-68,-66,-127,-34,19,87, 
  /* [8][0][][] */ 54,46,75,8,56,24,71,9,68,-27,40,7,-127,-26,-79,11, 
  /* [9][0][][] */ -35,65,32,-48,-26,-16,28,-17,-29,52,-43,16,47,127,27,26, 
  /* [10][0][][] */ 75,50,-43,62,-37,-19,60,-49,-86,-42,-57,-107,-127,-84,6,107, 
  /* [11][0][][] */ 47,3,59,7,-15,-32,13,106,-91,21,-27,5,-15,-6,64,127, 
  /* [12][0][][] */ -51,-24,0,2,18,-3,127,39,-58,20,10,-13,-12,80,-49,110, 
  /* [13][0][][] */ 12,30,24,50,112,36,118,117,-52,96,-83,-76,29,102,-127,-20, 
  /* [14][0][][] */ -117,122,-1,-18,-9,1,71,-3,-48,28,127,-13,-95,29,-51,54, 
  /* [15][0][][] */ -10,-15,-127,-49,83,-41,-90,-38,-23,-18,-19,-65,-5,-82,-54,46, 
  /* [16][0][][] */ 116,-16,12,-17,34,-28,45,-26,-36,14,127,53,52,4,-35,17, 
  /* [17][0][][] */ 16,19,-22,-100,-7,-59,110,-127,5,-18,-48,36,41,68,9,45, 
  /* [18][0][][] */ 31,126,-9,-53,63,-72,-26,-59,-37,127,-28,1,-27,52,-11,-32, 
  /* [19][0][][] */ -73,-123,116,-87,39,-127,34,-31,42,38,93,96,22,-8,66,-28, 
  /* [20][0][][] */ -20,87,58,8,11,-2,23,-25,61,-7,96,-25,-127,-25,-75,-8, 
  /* [21][0][][] */ -61,41,19,14,65,39,62,54,-127,54,-40,15,-21,22,-56,-29, 
  /* [22][0][][] */ 13,-91,41,16,16,-127,116,11,14,-56,-39,-79,41,-78,-58,-49, 
  /* [23][0][][] */ -59,-93,46,63,26,-15,22,-42,20,-38,81,6,6,67,75,127, 
  /* [24][0][][] */ 1,0,27,78,48,17,-53,-127,67,13,-44,19,3,-1,-21,-28, 
  /* [25][0][][] */ -9,36,24,-55,-24,-1,8,-35,-26,58,-48,-12,38,127,24,5, 
  /* [26][0][][] */ -68,76,2,22,28,-86,0,-29,14,20,15,70,6,4,-84,127, 
  /* [27][0][][] */ -22,-127,-45,8,-58,93,-1,-62,20,-35,55,-27,30,-49,-105,-21, 
  /* [28][0][][] */ -38,0,37,85,25,8,-38,-127,-125,48,109,-13,72,11,-47,-25, 
  /* [29][0][][] */ -127,106,-26,-29,-31,21,-120,-70,-47,-37,1,-7,6,-55,-113,63, 
  /* [30][0][][] */ 54,77,-59,87,-117,-99,-74,-16,-45,-9,9,-117,127,38,-10,99, 
  /* [31][0][][] */ 127,31,-63,-38,-61,18,96,33,-59,-13,63,52,43,24,-22,5, 
  /* [32][0][][] */ -28,-17,127,3,-18,72,69,18,-15,-9,-12,22,9,65,65,37, 
  /* [33][0][][] */ -3,28,-60,-57,-28,23,125,28,-6,-10,24,-70,96,127,-50,51, 
  /* [34][0][][] */ -97,-26,100,19,33,-51,109,-5,-127,36,35,-41,57,58,-60,-38, 
  /* [35][0][][] */ -7,16,-59,12,-83,127,-31,-13,-24,122,7,93,-68,80,19,40, 
  /* [36][0][][] */ -8,-71,127,-47,-50,16,-43,-12,17,24,-51,77,1,-85,-35,43, 
  /* [37][0][][] */ 95,-3,81,-29,116,-74,-57,36,-59,127,-75,2,-95,-49,121,-27, 
  /* [38][0][][] */ 55,55,13,-115,-15,-65,-110,61,-99,58,-107,-60,-82,-127,-119,73, 
  /* [39][0][][] */ -74,23,-55,-29,-80,-76,68,16,-127,-33,21,84,34,1,-1,49, 
  /* [40][0][][] */ 127,39,11,-94,-65,27,10,-44,-32,-18,-49,-73,19,45,43,30, 
  /* [41][0][][] */ 95,-75,-59,-49,-5,0,-62,-19,61,-22,5,-59,127,-68,58,-35, 
  /* [42][0][][] */ -16,-85,-37,127,8,-95,-106,18,11,8,2,48,-80,67,-59,-6, 
  /* [43][0][][] */ -87,-45,-43,-124,-54,5,-5,77,45,-127,-41,39,-17,-54,-27,92, 
  /* [44][0][][] */ -35,46,43,-49,-19,-22,28,115,120,-76,73,111,127,44,-21,-1, 
  /* [45][0][][] */ 34,78,-73,88,127,-84,-41,-68,110,-64,64,-60,-25,4,-69,57, 
  /* [46][0][][] */ -27,-45,6,-5,99,-26,37,22,-14,127,-26,-124,34,65,-55,81, 
  /* [47][0][][] */ 81,-41,-30,-15,82,-18,-43,-63,0,127,-30,38,-4,-108,-80,11, 
  /* [48][0][][] */ 13,29,-11,-127,-3,-49,113,-122,10,5,-40,46,52,62,6,36, 
  /* [49][0][][] */ -24,127,-72,34,41,-47,71,61,-33,18,46,-87,-31,77,111,-86, 
  /* [50][0][][] */ 13,42,-23,2,-127,2,-67,-53,50,67,31,27,-38,-36,-1,33, 
  /* [51][0][][] */ 127,-42,-52,-10,-49,89,-92,-39,43,-20,-38,66,-30,-62,0,42, 
  /* [52][0][][] */ -28,-59,45,74,-56,-111,-127,-14,-56,-66,-30,-67,12,-72,5,91, 
  /* [53][0][][] */ 24,99,55,-127,3,109,99,-16,-16,-30,-4,-43,84,-121,2,62, 
  /* [54][0][][] */ 36,127,12,-23,0,-89,-110,48,8,-20,-46,126,85,86,23,59, 
  /* [55][0][][] */ -48,-19,50,26,47,-40,117,90,-90,-12,25,9,127,51,-11,3, 
  /* [56][0][][] */ 127,25,17,19,-42,105,-55,-77,-20,49,-83,8,-55,96,-5,33, 
  /* [57][0][][] */ -50,-34,-48,-33,-71,-101,61,-22,-127,-27,53,52,20,40,-6,48, 
  /* [58][0][][] */ 45,-58,59,25,3,-68,-14,10,24,-11,-127,-31,22,-33,-40,49, 
  /* [59][0][][] */ 81,17,-127,98,12,32,86,-33,-71,-46,28,-108,-122,-65,33,111, 
  /* [60][0][][] */ -1,29,-13,17,-13,-27,-24,0,-30,-78,56,119,-45,-127,-32,-8, 
  /* [61][0][][] */ -31,12,77,-101,-82,55,6,121,-23,-109,64,65,90,3,10,127, 
  /* [62][0][][] */ 75,44,-11,-127,-19,5,7,-37,-8,31,-35,42,26,-21,-89,-73, 
  /* [63][0][][] */ -3,-30,-2,-1,-66,-68,-53,13,-74,-15,-30,-18,127,5,49,-10, 
  /* [64][0][][] */ 25,-2,-23,56,-120,-42,-19,-84,59,127,44,-7,38,-52,-48,122, 
  /* [65][0][][] */ -32,5,-23,-14,-83,73,27,-24,49,-115,100,-65,70,63,-127,63, 
  /* [66][0][][] */ -121,104,-91,-96,44,-29,-119,-76,-98,122,88,9,-127,-66,49,52, 
  /* [67][0][][] */ 5,-29,-127,-106,61,76,7,-24,-31,-3,50,-22,25,41,19,46, 
  /* [68][0][][] */ 58,20,-17,-43,-69,35,19,33,-57,63,127,-18,-10,-38,-114,1, 
  /* [69][0][][] */ 72,-109,52,-49,16,-113,-27,127,-4,62,87,84,-20,79,-31,0, 
  /* [70][0][][] */ 42,2,111,46,92,-23,127,20,25,17,-59,33,-74,68,-79,40, 
  /* [71][0][][] */ 11,33,101,-77,-127,-83,12,5,-21,-9,19,-107,-78,2,14,30, 
  /* [72][0][][] */ -61,-98,26,-126,79,-10,7,50,-72,18,-127,-16,63,126,-58,120, 
  /* [73][0][][] */ 20,20,49,-1,127,-99,-49,11,-40,106,-88,30,-93,-53,127,-15, 
  /* [74][0][][] */ -102,4,-120,-72,69,-47,-43,19,-79,9,-127,-31,-39,-64,-37,77, 
  /* [75][0][][] */ 90,-21,50,-40,16,8,-127,-21,-5,-93,66,5,1,-14,-5,-11, 
  /* [76][0][][] */ 7,-53,-34,118,45,98,103,-70,93,-127,67,126,42,-98,-68,39, 
  /* [77][0][][] */ -36,-33,127,-28,37,-28,-32,-117,20,22,34,87,46,47,20,-1, 
  /* [78][0][][] */ -47,0,17,-35,1,-60,32,-15,27,-13,14,-92,-103,-75,-127,-54, 
  /* [79][0][][] */ -111,-84,-27,31,127,30,-12,27,22,38,-12,47,-40,-68,-74,-15, 
  /* [80][0][][] */ 4,-125,56,127,-40,-35,-114,87,-6,25,70,-2,-81,-14,-17,70, 
  /* [81][0][][] */ 107,59,-22,84,-6,38,26,127,16,7,114,52,106,27,56,-17, 
  /* [82][0][][] */ -53,-1,13,-33,33,-127,-111,-85,0,74,-40,-34,-24,102,-67,-21, 
  /* [83][0][][] */ 108,-24,81,-35,-41,-8,-127,-6,23,-124,13,-49,-15,-13,13,-22, 
  /* [84][0][][] */ 18,-64,-89,29,127,41,34,28,-106,24,-107,-21,47,-34,-67,10, 
  /* [85][0][][] */ 15,89,45,-46,100,6,41,-115,127,-33,34,-10,93,-77,12,-2, 
  /* [86][0][][] */ 121,-34,127,51,3,-59,75,38,-61,-52,-99,-50,36,22,-65,8, 
  /* [87][0][][] */ -3,10,20,-79,73,-27,-46,12,37,-36,71,-38,-82,-127,-1,20, 
  /* [88][0][][] */ -56,-29,37,-6,20,25,-64,-50,-1,9,-71,-127,-49,-42,-18,-15, 
  /* [89][0][][] */ -70,13,24,-68,28,8,-127,18,87,25,-70,-7,-11,-78,-39,-24, 
  /* [90][0][][] */ -15,-19,-36,-81,127,21,-57,45,40,56,34,-18,31,23,-73,-17, 
  /* [91][0][][] */ -40,-60,26,55,-48,-14,-13,78,-45,-52,24,-51,0,66,26,127, 
  /* [92][0][][] */ -27,73,-3,-13,-24,56,-91,46,-42,-13,67,-1,-35,127,46,26, 
  /* [93][0][][] */ -6,78,-49,-74,73,86,-84,4,68,67,73,60,-127,23,-39,75, 
  /* [94][0][][] */ 22,61,92,8,-127,-38,14,-8,17,-22,30,-21,-57,-23,13,-21, 
  /* [95][0][][] */ 3,25,51,1,127,-15,-87,66,28,10,-79,98,0,5,107,-34, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.001559838536195457, 0.0022894418798387051, 0.0016490361886098981, 0.00141773687209934, 0.0012811709893867373, 0.001899109105579555, 0.0014895934145897627, 0.0023811075370758772, 0.0019233751809224486, 0.0021762934047728777, 0.0015539075247943401, 0.0015878254780545831, 0.0013269048649817705, 0.0012271309969946742, 0.001579336472786963, 0.0019497423199936748, 0.0022222104016691446, 0.0019454463617876172, 0.0017828656127676368, 0.0014777012402191758, 0.0023497310467064381, 0.0019884195644408464, 0.0016988312127068639, 0.0017549420008435845, 0.0019482629140838981, 0.0019863112829625607, 0.0022247217129915953, 0.001954458886757493, 0.0016569464933127165, 0.0026243138127028942, 0.0012079247971996665, 0.001840087934397161, 0.0023856393527239561, 0.0013078371994197369, 0.0011125814635306597, 0.0017009645234793425, 0.0024500812869518995, 0.001505310763604939, 0.0017577852122485638, 0.0010823513148352504, 0.0019030551193282008, 0.0017685407074168324, 0.0020493853371590376, 0.0020876368507742882, 0.0021748649887740612, 0.0017911249306052923, 0.0019816621206700802, 0.0016806974308565259, 0.00090961606474593282, 0.0019082858925685287, 0.0028760838322341442, 0.0015209839912131429, 0.0011934974463656545, 0.0018756025237962604, 0.0017194037791341543, 0.0015729931183159351, 0.0020601814612746239, 0.001258568256162107, 0.0023648329079151154, 0.0017665144987404346, 0.0026755067519843578, 0.0014350713463500142, 0.0021164969075471163, 0.0017422845121473074, 0.0014537940733134747, 0.0016955917235463858, 0.0015836633974686265, 0.0014516960363835096, 0.0017640782753005624, 0.0019244065042585135, 0.0022257596720010042, 0.0012709270231425762, 0.0016249335603788495, 0.0017071852926164865, 0.0016165681881830096, 0.0015168627724051476, 0.001328572747297585, 0.0020710877142846584, 0.0017234411789104342, 0.0014713073614984751, 0.00072045921115204692, 0.0017015656922012568, 0.0020950839389115572, 0.0017974885413423181, 0.0020172528456896544, 0.001251826761290431, 0.0022292782086879015, 0.0017888996517285705, 0.0016973280580714345, 0.0016171938041225076, 0.0015101088210940361, 0.0013610788155347109, 0.0017764408839866519, 0.0014419174985960126, 0.0024406027514487505, 0.0018419134430587292, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 11749, 18647, -4373, 3731, 160, 9822, 954, 3960, 19382, -5371, -11627, 10281, -17635, 12774, 4999, 8006, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.6643512177979574e-05, 6.0443646361818537e-05, 4.8255908041028306e-05, 6.0447364376159385e-05, 5.3787243814440444e-05, 6.1993494455236942e-05, 4.1954033804358914e-05, 5.1678052841452882e-05, 8.2181664765812457e-05, 6.1237646150402725e-05, 4.4660206185653806e-05, 4.4969405280426145e-05, 5.5273823818424717e-05, 5.1234575948910788e-05, 7.0714311732444912e-05, 5.9351812524255365e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,36,58,-31,-77,-6,-73,1,-53,10,-8,-29,30,46,35,-37,12,-5,99,16,5,-57,127,72,50,31,8,28,-69,-120,-99,3,-42,-52,27,24,11,26,1,27,-5,-8,-80,8,-73,-21,1,94,-18,18,-43,-23,-11,0,22,-52,-109,0,-16,78,60,29,-2,2,-36,-55,-49,22,-56,-71,6,-16,13,-2,-75,-51,-50,13,-36,9,-58,69,82,-79,14,57,13,46,35,-21,-6,-22,-38,-36,-57,14, 
  /* [1][0][][] */ 33,21,22,-54,-63,-21,-9,10,-19,22,58,-52,8,-7,-69,-34,-13,-5,-71,27,-12,-77,13,46,-9,-66,-6,-46,65,-107,108,-81,60,20,-21,55,35,75,-8,-47,35,15,1,-16,4,65,-127,-46,-58,-51,-18,-26,36,-48,-38,51,13,-4,-35,20,24,51,-7,-101,-18,-12,-64,-10,3,-20,-88,-12,-40,-20,16,-79,6,18,30,-75,-26,-25,-94,-35,39,-35,-27,22,-80,-8,-57,41,22,60,-57,51, 
  /* [2][0][][] */ 82,-34,24,22,23,-77,66,6,-12,-10,-15,-9,-79,-33,14,-32,-93,-47,-36,42,10,-49,-44,31,3,-73,6,-24,-28,48,-52,121,-57,127,-25,20,-14,-18,-20,-14,-103,83,69,14,-64,4,-16,-13,38,1,-29,-48,51,-16,-20,62,44,-2,51,-7,6,40,-34,14,77,10,-1,-5,31,56,-44,-5,47,46,63,35,35,-68,73,56,88,-10,-38,30,-60,29,20,74,19,8,-25,28,-45,50,-16,35, 
  /* [3][0][][] */ 4,-9,-18,10,14,-13,7,-59,-25,53,34,53,25,-14,-48,37,8,-31,28,8,16,127,29,-44,6,19,-22,6,67,-38,63,-17,-23,34,-26,-29,18,45,31,11,-76,-29,-40,28,-27,29,21,-6,-18,-50,-5,-22,49,-77,-29,-49,10,81,-25,-4,-11,-8,-41,6,28,43,-38,2,-21,2,13,-69,-33,-47,29,-8,15,-3,-31,-29,-25,-8,-49,13,-15,-40,34,-22,2,18,25,-21,48,24,-34,59, 
  /* [4][0][][] */ 29,9,-44,15,23,25,-49,8,-27,76,99,-15,-16,3,3,-51,12,-17,-29,50,15,-51,55,86,-70,4,-127,11,-46,-66,6,19,-58,-52,14,59,15,34,25,31,-33,-46,49,-21,-7,13,-30,50,-39,59,11,14,42,-16,-86,18,45,-15,7,-11,52,-1,28,6,-50,16,-39,4,-52,26,-49,50,41,-66,-35,-45,24,-62,-8,12,-44,84,-82,-1,-24,26,36,-62,54,6,33,12,-56,-30,39,32, 
  /* [5][0][][] */ -83,37,43,-10,45,-19,58,-41,-13,30,-4,-29,39,-19,-25,-44,-6,-39,51,31,-127,-25,-77,47,-46,-6,46,9,40,-77,-20,49,60,117,-17,43,-4,25,50,-17,-26,96,82,-27,-4,72,42,-2,-4,18,-27,26,13,-42,27,-94,38,-52,-69,-62,66,99,-50,-23,76,-42,-83,-70,-62,-24,-67,-7,-22,16,-28,-45,19,-46,-39,-21,125,-29,21,-95,-83,42,30,-17,-54,42,27,-2,-19,34,7,93, 
  /* [6][0][][] */ 51,-15,-89,27,-40,-120,109,100,-68,77,-15,82,-127,-87,62,58,-4,-62,-8,6,-4,-18,-67,-67,-56,48,85,28,38,36,103,-58,24,14,16,-76,17,8,33,75,4,16,-62,-30,-3,-66,-78,18,40,-126,-27,80,34,8,-24,-76,79,45,12,-6,-120,51,-100,2,27,10,-2,58,45,34,-3,-57,-35,19,104,38,65,-26,43,-74,-4,-53,-74,72,8,-63,52,20,-46,67,41,43,-27,17,-39,119, 
  /* [7][0][][] */ 34,86,-39,-58,-24,-10,39,14,-55,36,-52,-53,-35,12,13,-7,-50,-43,-31,62,-8,127,13,35,-5,4,23,30,48,48,78,-25,66,32,-22,8,5,-10,-1,34,-62,-1,9,-56,14,-49,76,-24,41,-78,-81,-25,-50,11,-1,-10,29,18,-100,9,-9,110,15,-20,-19,3,-47,15,-41,-13,-104,37,12,68,-33,41,-57,58,11,-72,-18,-49,64,-79,39,-19,-5,2,-7,71,-87,49,51,-31,-43,14, 
  /* [8][0][][] */ -11,77,-48,40,-39,-27,-81,24,-94,-34,9,0,-45,41,28,82,4,-50,4,11,28,-7,4,-12,-36,77,0,21,-18,-21,-47,-29,-17,-57,-32,-66,-41,26,52,7,-2,-42,32,13,-35,-30,5,-16,-21,-12,45,64,-1,-23,-74,96,-41,30,-6,-42,-34,12,22,48,-37,-64,-40,-14,-43,3,-1,5,-20,-45,-114,-12,-49,21,-63,-41,-34,-2,-46,-37,3,-1,23,26,8,65,-52,-7,-88,-127,26,-47, 
  /* [9][0][][] */ -12,21,-66,44,-29,-32,65,51,-6,45,-25,89,-29,-23,26,127,11,14,73,14,21,17,36,-85,-35,-6,22,-6,15,-17,42,46,-30,2,3,-113,23,-19,-25,-21,-16,23,37,-26,-10,0,19,19,36,79,27,-6,-52,-72,1,-2,3,-8,69,-17,-64,51,-61,-23,84,-9,-21,9,-63,29,38,37,-8,81,-19,-26,-26,22,-37,-6,52,-26,63,1,23,-16,-15,-30,-49,17,-1,-3,64,34,-41,0, 
  /* [10][0][][] */ 75,2,-41,-5,-31,-38,77,-3,7,-28,-26,-5,-93,-23,8,-5,-71,-28,27,20,44,41,19,6,-51,80,39,-2,-48,-73,-26,-15,74,-33,53,9,72,-91,82,127,14,-57,1,2,-20,-98,-7,69,31,83,-70,-40,-22,32,21,59,20,-66,84,53,-16,45,-71,-16,-3,-63,25,63,23,-21,-7,43,120,34,22,-92,34,-45,59,-10,-50,37,41,29,-43,-12,2,48,-43,-17,24,51,57,68,-34,10, 
  /* [11][0][][] */ -61,-43,39,-71,18,-11,-34,-42,49,-46,3,-4,-23,-2,1,9,-68,0,68,8,-62,18,-77,-85,17,21,-51,45,37,-61,41,-38,21,-4,21,-23,-78,8,-124,14,-73,68,-46,55,16,12,-5,-37,24,-38,-63,-56,17,32,84,-60,-33,-70,15,-55,-22,-58,-28,-126,9,-69,64,76,127,16,77,-16,-36,-17,71,-40,100,43,29,55,33,-13,-23,91,87,9,-7,-26,-81,-66,-17,31,57,45,64,79, 
  /* [12][0][][] */ 41,-21,1,-41,39,106,-6,32,43,56,-3,58,20,43,17,4,-63,52,18,51,127,2,66,-66,29,19,-71,-63,-16,82,6,5,26,-5,11,-37,42,-6,-36,-38,18,-16,38,48,-21,33,4,-5,-63,23,3,26,-26,-23,16,16,-32,57,13,47,22,-94,8,-91,-4,90,-11,-29,-3,-37,64,9,-10,12,-8,43,-8,52,-72,-11,-17,34,123,19,-12,75,-31,-64,74,6,-83,49,72,10,-19,-90, 
  /* [13][0][][] */ -7,38,-12,-48,-29,-7,4,-38,20,-28,-37,-71,66,-113,-39,-71,-19,-32,-87,-19,-92,-28,22,107,-27,3,118,11,26,-36,61,44,8,4,-120,127,-32,-55,23,-61,120,17,-7,22,-5,-98,64,-29,83,-14,-40,32,25,-1,-1,70,74,-57,-40,-4,48,42,-6,-82,1,40,-36,40,-74,-34,-79,-1,-64,16,-46,-92,-105,26,38,87,-13,65,42,-89,50,48,31,-11,-15,-19,-14,16,-61,22,-27,-9, 
  /* [14][0][][] */ -4,23,-76,-25,82,90,-87,-9,32,-43,73,-5,18,-25,-36,-64,-69,18,30,127,10,-23,-3,8,-1,36,-28,68,10,-4,-27,9,59,-1,-39,2,-19,57,69,9,60,1,30,0,-12,-42,52,-34,26,-10,-11,-22,44,17,-36,28,12,56,-88,-8,-19,-67,-43,-96,10,-38,-46,-5,-73,52,-16,33,1,-26,-21,-36,38,-12,-53,-31,29,7,-1,-15,-11,42,-16,-16,-31,65,62,15,2,-38,-45,-67, 
  /* [15][0][][] */ -66,-40,42,-59,23,-28,-31,-86,-10,13,-7,67,-3,-27,35,88,-105,-17,15,-70,34,-24,-14,-86,47,-12,47,-47,-58,-101,-60,34,-40,62,86,-95,-11,-39,18,-20,-26,3,27,-14,5,-5,62,100,-48,-13,20,-35,-42,54,19,-56,-93,-17,104,14,-33,16,-93,34,-61,-8,11,29,54,-68,91,-23,55,-41,-36,-42,18,23,44,0,-17,76,59,37,-4,-18,-127,14,-9,-52,-78,25,49,-34,-27,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022314460948109627, 0.0028916506562381983, 0.0023085838183760643, 0.0028918285388499498, 0.0025732053909450769, 0.0029657960403710604, 0.0020070993341505527, 0.0024723007809370756, 0.0039316071197390556, 0.0029296360444277525, 0.0021365638822317123, 0.00215135607868433, 0.0026443239767104387, 0.0024510845541954041, 0.0033830036409199238, 0.0028394167311489582, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 355, 862, -3134, -6176, -1092, 4010, -603, -763, -893, -1349, 13901, -2430, -978, 13972, 9079, -5932, 17803, 3140, -5509, 154, -1355, -3985, 662, -2302, 1321, -4849, 665, -5585, 540, -10116, -582, 27, 13730, -830, -869, -126, -589, -1722, -1323, 9079, -33, 185, 1397, -7092, 17076, 18776, -1009, 20446, 357, 16706, 19839, -4914, -908, 381, -397, 14296, -553, -613, 19821, 8715, 10077, 13797, 10641, -10136, 94, 948, -2672, 3325, -4236, -2513, 2864, 2959, 15735, -62, -1535, 11890, -334, -73, 11128, -1258, 17, 22960, 582, 2918, 25137, 2137, -5215, -3555, 457, -6962, 15622, 492, -1227, -603, -6670, -3968, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00026038277428597212, 0.00016009964747354388, 0.00010095327161252499, 0.0001283133024116978, 0.00018200854538008571, 0.00017272307013627142, 0.00026680307928472757, 0.00016878971655387431, 0.0001712152297841385, 0.00014151424693409353, 8.2554157415870577e-05, 0.00029338366584852338, 0.00020588991174008697, 9.7446260042488575e-05, 0.00011670584353851154, 0.00011270416871411726, 9.3132402980700135e-05, 0.00013389158993959427, 0.00015466910554096103, 9.6607138402760029e-05, 0.00012623026850633323, 0.00025784058379940689, 0.00011553169315448031, 0.00015302539395634085, 0.00032902741804718971, 0.00016967243573162705, 0.00025227601872757077, 0.00011819271458080038, 0.00016482986393384635, 6.861550355097279e-05, 0.00028800647123716772, 0.00017279891471844167, 0.00013344379840418696, 0.00015704188263043761, 0.00021592753182630986, 0.00031502757337875664, 0.00012289479491300881, 0.00028616897179745138, 0.00030644144862890244, 0.0001194567812490277, 0.00016189175948966295, 0.00021677883341908455, 0.00017988048784900457, 9.4823568360880017e-05, 6.9294583227019757e-05, 7.9799829109106213e-05, 0.00016978682833723724, 7.3630515544209629e-05, 0.0001927273697219789, 7.1333306550513953e-05, 8.8328495621681213e-05, 0.00010082167864311486, 0.00011006127169821411, 0.00010879561887122691, 0.00016422021144535393, 0.00012627945397980511, 0.00017251692770514637, 0.00016870610124897212, 0.00011389030987629667, 0.00010688553447835147, 0.00013063379446975887, 0.00015667636762373149, 0.00010845107317436486, 9.4269329565577209e-05, 0.00017452132306061685, 0.00017759202455636114, 0.00023068787413649261, 0.00017977396782953292, 0.00017253959958907217, 0.00014818427735008299, 0.00018069853831548244, 0.0001148627998190932, 7.6992822869215161e-05, 0.00023091275943443179, 0.00022998874192126095, 0.00010777403076644987, 0.00012416811659932137, 0.00015035572869237512, 0.00012486739433370531, 0.00017972079513128847, 0.00027709896676242352, 7.5226766057312489e-05, 0.00017934681090991944, 0.0001300886069657281, 5.9291585785103962e-05, 0.00015117407019715756, 0.00013047696847934276, 0.0001748172944644466, 0.00019359533325769007, 0.00020123024296481162, 8.061131666181609e-05, 0.00032018398633226752, 0.00017631697119213641, 0.00023712997790426016, 0.00011052506306441501, 0.00027968751965090632, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 24,117,-9,24,-27,2,36,48,54,-64,-76,41,-8,-15,36,-55,-102,14,12,26,36,73,78,92,12,-3,-50,0,-13,11,19,-15,-44,7,-35,80,-10,35,7,-5,26,-40,-7,33,-99,-44,12,-38,-27,-94,-37,-8,19,53,-19,-9,-74,-59,-52,-127,-127,3,-96,3,-29,42,27,-16,-17,39,32,-13,-27,12,45,3,-3,-36,-73,25,5,-100,50,-31,-78,-52,-6,6,-113,16,-81,32,72,-4,62,6, -40,-39,-8,92,-5,89,-25,1,65,29,-127,72,-23,-69,-78,127,-121,63,49,83,127,19,112,127,24,21,14,53,6,127,-9,-127,77,87,2,32,69,86,-19,-127,127,-12,85,127,-52,-86,127,-85,-17,-127,-123,-34,16,127,-23,-127,7,31,-119,-82,-52,-127,-50,98,-31,87,101,-27,6,127,127,-11,-64,30,-31,-91,21,-55,-10,127,-5,-77,127,-60,-117,-50,91,46,98,104,-80,-2,127,-24,127,38, 21,-109,-5,13,-13,-16,-12,52,25,69,-59,21,-7,36,15,-84,-40,10,4,20,34,56,52,96,13,-33,24,42,8,15,-8,-56,-38,-78,-36,48,-8,-11,15,7,-5,28,-18,51,-35,-31,2,-1,20,-72,18,5,7,-16,13,-7,54,-73,-11,-79,-89,30,-74,-13,35,12,-42,-9,-20,-7,5,3,-8,-41,-5,11,0,-9,-71,3,4,-114,28,-16,-13,-40,2,-26,-92,2,-23,28,23,39,18,-7, 
  /* [0][1][][] */ 87,-14,53,107,5,-47,127,49,-27,-127,-110,127,3,-127,-52,27,-65,-48,69,22,-112,6,-127,-85,-20,49,-127,127,-91,89,127,81,29,66,9,127,-127,65,-18,-58,59,-127,17,76,-127,-70,7,-127,-122,-110,-127,12,127,-69,86,-20,-127,2,-73,-7,-49,-66,-42,54,-91,-18,86,-90,-39,30,-47,-127,-127,59,127,-74,89,72,-98,-42,127,-127,-35,108,-54,-14,9,75,-6,23,-71,23,-4,-79,86,-11, -127,-4,-53,127,-84,-127,-110,-127,70,0,-76,35,-85,-120,-49,113,-127,-127,127,127,32,-127,-111,97,-127,127,6,68,-94,-40,-101,83,-127,94,127,-24,36,127,127,-91,-42,25,18,29,-54,-127,-70,-121,-11,-117,-110,127,47,81,69,-77,24,24,89,-35,-33,-35,-127,127,-7,-127,127,127,27,68,-102,-80,-26,49,-101,-127,127,127,100,-43,-86,10,-103,61,-118,-104,127,127,127,127,-127,-127,-87,-50,99,127, 48,-16,87,60,4,-25,9,37,-42,102,-89,66,10,-18,-127,67,28,-38,17,-7,-114,11,-84,-87,-10,12,115,-14,127,122,17,-109,-25,-127,-17,118,-119,7,-30,-45,-12,93,17,117,-24,-22,-4,-81,127,-94,-86,-5,55,-98,-127,30,102,0,-127,59,-12,-41,-5,54,127,-40,-28,-10,-49,-7,-41,-47,-126,-127,-3,-40,-11,-23,-127,-38,-74,-122,-24,127,-127,12,0,1,-35,-15,-11,37,-13,127,27,-14, 
  /* [0][2][][] */ 29,-127,38,-8,10,17,32,58,-36,-48,0,-28,16,-13,8,38,-9,20,-11,40,-1,51,12,-38,12,47,-11,-4,-28,15,5,27,-23,-12,-28,0,51,-9,0,-27,-5,14,-18,-44,-10,-44,-10,-8,-20,33,-44,36,-8,-8,-34,-21,-11,0,-7,25,-35,-6,29,-12,-26,47,-51,-24,25,6,8,77,-10,18,22,11,-35,-35,-20,0,12,-29,-21,-33,-79,30,-25,-15,-77,44,-1,19,-8,0,12,-18, -54,6,127,-3,127,69,-26,16,-127,9,-87,-38,127,-28,-49,34,22,54,-5,-49,23,19,60,1,57,-54,-13,28,-19,112,-12,23,-88,33,9,-26,76,41,20,-99,-28,-4,-127,0,-5,-19,-34,-63,-12,-56,-70,97,111,-75,-32,-85,-16,127,-47,4,56,-105,70,69,-20,19,-39,12,127,-12,6,94,-81,21,-17,-50,-15,-80,-32,-36,-9,-84,-34,-62,-76,127,27,2,99,43,39,21,-25,-9,-1,-4, 9,83,30,-21,3,-7,-13,47,9,55,15,8,5,-5,1,43,-16,5,-7,35,-12,42,-5,-34,4,37,7,23,7,22,-19,-69,-49,-16,-20,-11,42,-26,-2,-13,-7,-8,1,-3,-25,-28,-11,0,14,39,-35,16,-7,-21,12,2,7,7,-2,55,-31,10,17,-21,36,14,-66,15,18,-1,5,74,26,-12,-2,11,-18,-12,-14,5,-8,-70,-17,-7,-53,21,-28,-24,-78,41,13,15,-14,10,-3,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.014372574165463448, 0.0088371587917208672, 0.0055724051780998707, 0.0070826206356287003, 0.01004648394882679, 0.0095339454710483551, 0.014726961031556129, 0.0093168327584862709, 0.0094507159665226936, 0.0078112846240401268, 0.0045568132773041725, 0.01619415357708931, 0.01136468444019556, 0.0053788255900144577, 0.0064419135451316833, 0.0062210299074649811, 0.0051407101564109325, 0.007390530314296484, 0.0085374051705002785, 0.0053325081244111061, 0.0069676414132118225, 0.014232250861823559, 0.0063771032728254795, 0.0084466757252812386, 0.018161611631512642, 0.0093655567616224289, 0.01392509788274765, 0.0065239858813583851, 0.0090982569381594658, 0.0037874293047934771, 0.015897342935204506, 0.0095381317660212517, 0.0073658134788274765, 0.0086683770641684532, 0.011918739415705204, 0.017388850450515747, 0.0067835305817425251, 0.015795916318893433, 0.016914915293455124, 0.0065937596373260021, 0.0089360801503062248, 0.011965729296207428, 0.0099290190264582634, 0.0052340589463710785, 0.0038249134086072445, 0.0044047804549336433, 0.0093718711286783218, 0.004064247477799654, 0.010638140141963959, 0.0039374465122818947, 0.0048755444586277008, 0.0055651417933404446, 0.0060751475393772125, 0.0060052862390875816, 0.0090646054595708847, 0.0069703566841781139, 0.0095225665718317032, 0.0093122171238064766, 0.0062865023501217365, 0.0058998535387217999, 0.0072107068262994289, 0.0086482018232345581, 0.0059862681664526463, 0.0052034659311175346, 0.0096332048997282982, 0.0098027009516954422, 0.012733479030430317, 0.0099231395870447159, 0.0095238182693719864, 0.0081794559955596924, 0.0099741742014884949, 0.0063401814550161362, 0.0042498395778238773, 0.012745891697704792, 0.012694887816905975, 0.0059488965198397636, 0.0068538151681423187, 0.0082993153482675552, 0.0068924142979085445, 0.0099202049896121025, 0.015295271761715412, 0.0041523571126163006, 0.0098995612934231758, 0.0071806134656071663, 0.0032727690413594246, 0.0083444863557815552, 0.0072020501829683781, 0.0096495421603322029, 0.010686049237847328, 0.011107480153441429, 0.0044495728798210621, 0.017673473805189133, 0.0097323209047317505, 0.013089069165289402, 0.0061007477343082428, 0.015438154339790344, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 9095, 6647, 1594, -1626, 7300, 18391, 11847, 2519, -461, 12867, 1658, -6816, 5041, 5184, 607, -730, 5400, 13488, -963, -10, 6456, 22365, 14412, -2294, -5770, -1272, 16890, -122, 2249, 1756, 11996, -2651, 14225, 4605, 5318, -6259, 1174, -6944, 215, 3317, 3575, 2339, 2897, -636, 1024, 3259, 6696, 6010, 6084, 4168, 6785, 4804, -4043, 2067, 1644, 2889, 2422, 3385, 12461, 2169, -1484, 8564, 7760, 5612, 5425, 8887, -6148, 3396, 8575, -953, 7891, 2762, 4669, 5259, 5754, 3568, -602, 3499, 4157, 5438, 4982, 5923, 13325, 1050, 4193, 6690, 989, -1297, 20458, -662, 1435, -2177, 17799, 4338, 42, -1596, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.2861130067612976e-05, 5.7196109992219135e-05, 9.2711175966542214e-05, 0.0001204431100632064, 9.5918454462662339e-05, 4.4047552364645526e-05, 6.8762492446694523e-05, 0.00010306629701517522, 0.00010487732652109116, 6.096648212405853e-05, 0.00012261455412954092, 7.2736511356197298e-05, 0.00010126910638064146, 9.3822513008490205e-05, 0.00011139077832922339, 9.9382632470224053e-05, 0.00011452948820078745, 5.6349330407101661e-05, 7.6577125582844019e-05, 0.00012020659778499976, 9.5409784989897162e-05, 4.0656188502907753e-05, 5.9668702306225896e-05, 0.00011374851601431146, 9.682757081463933e-05, 9.7778058261610568e-05, 5.372390296543017e-05, 9.3215610831975937e-05, 0.00011834948236355558, 0.00010556384222581983, 6.8370449298527092e-05, 0.00010809841478476301, 5.596744449576363e-05, 9.9852106359321624e-05, 0.00013326552289072424, 9.5405237516388297e-05, 0.0001070006619556807, 8.4498664364218712e-05, 9.2533962742891163e-05, 9.1027279268018901e-05, 0.00012277922360226512, 0.00010918054613284767, 0.0001227565371664241, 0.00013491872232407331, 0.00021733230096288025, 0.00012043365859426558, 8.174912363756448e-05, 0.00010095287143485621, 9.7694908617995679e-05, 0.0001189496906590648, 0.00010303939779987559, 9.1470508778002113e-05, 9.3705944891553372e-05, 0.00017681847384665161, 0.00014619846479035914, 0.00013849657261744142, 0.00013449328253045678, 0.00010725681204348803, 6.5185238781850785e-05, 9.7717515018302947e-05, 0.00013062878861092031, 8.2707359979394823e-05, 7.5531759648583829e-05, 0.0001067666380549781, 0.0001019844930851832, 8.4969942690804601e-05, 9.3687223852612078e-05, 0.00012492726091295481, 7.139989611459896e-05, 0.00014780029596295208, 8.8828208390623331e-05, 7.952657324494794e-05, 8.9171095169149339e-05, 8.1521306128706783e-05, 9.1329959104768932e-05, 7.9211393313016742e-05, 0.00012768043961841613, 0.00010299006680725142, 9.1354333562776446e-05, 9.3967071734368801e-05, 8.6164174717850983e-05, 7.285633182618767e-05, 5.8612935390556231e-05, 0.00011005920532625169, 8.7917331256903708e-05, 0.00010245545854559168, 0.0001370102254441008, 0.00016236609371844679, 4.6252025640569627e-05, 0.00011357664334354922, 0.00012729766604024917, 9.5368581241928041e-05, 4.7605204599676654e-05, 9.1689296823460609e-05, 0.00014054935309104621, 8.4435981989372522e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -55,54,-6,-33,-22,-53,-67,-28,60,-43,35,-60,87,-108,7,-127, 
  /* [1][0][][] */ -104,75,-106,-122,-86,26,-21,67,-51,3,98,-57,44,127,27,42, 
  /* [2][0][][] */ -47,-13,-72,11,-7,-48,26,-42,-87,127,71,12,51,54,-42,115, 
  /* [3][0][][] */ -56,-76,12,-40,-81,6,-58,-127,-1,20,37,-72,-66,-44,-127,-50, 
  /* [4][0][][] */ 81,6,-21,38,-61,-9,-127,35,16,75,19,58,10,8,-47,-93, 
  /* [5][0][][] */ -97,61,-86,-30,53,-67,-23,-87,103,-26,9,-44,25,-127,-125,-106, 
  /* [6][0][][] */ -13,-31,-33,20,-79,76,38,-36,-25,-49,127,-30,-3,3,-120,4, 
  /* [7][0][][] */ -26,109,127,-94,71,85,1,-69,48,63,-86,-11,61,9,24,73, 
  /* [8][0][][] */ -53,0,34,-5,48,14,97,127,-69,-21,-61,-86,46,86,-70,-54, 
  /* [9][0][][] */ 35,42,103,29,-120,-45,-100,-110,71,19,127,23,-46,-101,53,-17, 
  /* [10][0][][] */ -17,-119,3,-73,-127,66,33,35,-35,-51,-1,33,-22,62,-119,31, 
  /* [11][0][][] */ 117,-64,-18,99,-127,-36,64,-2,125,122,-47,41,23,-86,-23,122, 
  /* [12][0][][] */ -67,-68,127,-8,60,-19,25,50,64,-26,99,75,-30,17,-94,28, 
  /* [13][0][][] */ -9,-26,15,26,8,5,127,38,-105,7,14,7,-25,117,90,-65, 
  /* [14][0][][] */ 122,-83,127,2,66,52,102,64,80,65,50,36,60,-51,39,-51, 
  /* [15][0][][] */ -8,122,5,-44,39,127,-74,73,-49,-28,-36,-17,-47,127,-29,-45, 
  /* [16][0][][] */ -43,66,103,-40,18,76,4,-4,-12,11,-10,40,86,6,91,127, 
  /* [17][0][][] */ 8,108,87,-127,30,-50,4,-79,-53,91,-33,59,-60,-32,110,-62, 
  /* [18][0][][] */ -87,-2,-76,-84,115,86,-42,-61,42,78,127,70,-4,110,-46,-3, 
  /* [19][0][][] */ 45,127,89,67,49,-28,-6,2,-29,115,46,112,65,69,-55,40, 
  /* [20][0][][] */ 103,-6,7,62,-64,-12,-35,49,-25,-47,-127,-36,85,-50,37,-13, 
  /* [21][0][][] */ -82,-69,-17,105,-26,-1,-127,67,8,2,25,24,-40,28,-56,4, 
  /* [22][0][][] */ -1,-1,-63,-49,127,-4,-38,58,62,77,37,68,-16,22,-10,27, 
  /* [23][0][][] */ -67,25,-22,10,19,61,108,83,-23,127,-23,-32,-3,30,-64,-33, 
  /* [24][0][][] */ 25,-83,36,5,127,34,73,-34,56,31,48,30,-63,33,-11,-17, 
  /* [25][0][][] */ 123,-66,81,17,15,-6,-29,88,127,-26,-53,14,118,-62,92,47, 
  /* [26][0][][] */ 62,43,111,91,69,-15,-72,-10,1,74,15,127,29,-66,32,-53, 
  /* [27][0][][] */ -51,38,-67,23,-24,111,14,-96,36,-75,110,26,48,-47,127,95, 
  /* [28][0][][] */ -45,34,-82,-127,29,-79,4,-49,-103,92,-54,28,-16,33,-30,68, 
  /* [29][0][][] */ 87,104,-82,47,29,88,-46,-18,46,51,12,61,-127,20,-24,84, 
  /* [30][0][][] */ -32,86,-118,-62,80,-45,15,18,-63,57,-75,-15,9,64,-9,127, 
  /* [31][0][][] */ 18,-114,79,43,55,-63,-71,37,-22,-5,25,-40,-71,57,32,127, 
  /* [32][0][][] */ -61,60,2,43,-97,58,20,56,25,-127,23,-88,34,37,35,46, 
  /* [33][0][][] */ -68,-9,56,89,-8,15,-47,11,-39,-54,9,-19,-13,-6,10,127, 
  /* [34][0][][] */ -12,7,-87,-97,58,-15,-8,59,20,-8,0,-13,-58,-23,-33,127, 
  /* [35][0][][] */ 75,-7,26,-10,-1,20,-75,-25,-17,-127,-57,12,-3,-29,50,-24, 
  /* [36][0][][] */ -2,26,-124,-19,30,127,-8,40,-27,8,61,34,19,29,-71,49, 
  /* [37][0][][] */ 62,38,72,-59,67,-127,42,-25,-110,60,-95,-26,15,19,100,31, 
  /* [38][0][][] */ -41,127,35,-39,40,19,69,-89,11,5,-116,35,-59,-100,-91,15, 
  /* [39][0][][] */ 94,49,-122,-127,-21,-31,8,-68,5,-4,-2,-44,61,6,-121,-72, 
  /* [40][0][][] */ -34,23,-73,-85,-50,-13,23,-127,-6,-14,3,-38,36,69,36,67, 
  /* [41][0][][] */ -37,-90,-13,127,-6,-17,-67,-10,-4,-53,72,-67,-70,-5,6,23, 
  /* [42][0][][] */ -16,64,-18,-127,16,16,10,-25,49,-5,-40,13,71,-19,-14,15, 
  /* [43][0][][] */ 0,48,0,14,127,23,27,25,6,44,1,-87,-115,-43,-14,-12, 
  /* [44][0][][] */ 75,-15,23,41,-30,-11,7,37,24,-35,30,4,127,9,-52,-27, 
  /* [45][0][][] */ 13,-80,-65,35,-43,-87,10,49,26,-23,15,28,-79,127,38,-32, 
  /* [46][0][][] */ -22,-94,55,73,3,-8,-113,61,39,-52,49,-21,31,77,87,127, 
  /* [47][0][][] */ -32,-52,20,73,1,1,55,17,6,-68,-127,-34,48,-33,-60,15, 
  /* [48][0][][] */ -86,98,-18,-32,0,66,-4,-127,25,-30,45,-60,58,-126,-62,7, 
  /* [49][0][][] */ -56,9,47,-38,1,3,127,121,-32,-36,-9,22,-42,33,-48,33, 
  /* [50][0][][] */ 46,22,-76,36,29,-127,-46,5,-79,51,-36,-4,12,-74,-112,-42, 
  /* [51][0][][] */ -47,63,-30,121,-36,49,-52,-85,-48,-83,-3,-51,4,31,-9,127, 
  /* [52][0][][] */ -127,7,25,-1,26,47,59,8,17,-84,-48,-38,-109,-63,-123,-13, 
  /* [53][0][][] */ -43,-67,-58,-127,-34,-2,14,73,34,-67,-45,28,-29,27,66,100, 
  /* [54][0][][] */ 14,-48,-4,-11,-58,56,48,-24,-16,-90,52,26,-25,-13,-127,35, 
  /* [55][0][][] */ -15,-31,-37,33,63,-26,60,85,-55,-56,-127,-32,62,-32,-22,37, 
  /* [56][0][][] */ 66,-39,-52,-24,-127,22,-117,-2,-7,-16,-34,9,100,-40,46,14, 
  /* [57][0][][] */ -48,15,22,-26,127,44,54,40,-38,44,-3,-10,-50,69,-99,-20, 
  /* [58][0][][] */ 26,1,0,-20,38,-9,-41,-60,46,-127,-58,4,-67,-44,-29,49, 
  /* [59][0][][] */ -73,-31,-6,8,21,57,-104,-46,84,127,-86,8,-23,3,-24,-4, 
  /* [60][0][][] */ 17,-55,-3,15,-127,-51,30,10,-6,51,-15,45,-2,-37,37,46, 
  /* [61][0][][] */ 26,35,-84,-15,-47,-17,-127,-88,-18,4,38,112,75,-67,106,61, 
  /* [62][0][][] */ 55,-12,44,-17,-21,32,48,127,-69,117,24,84,26,45,84,115, 
  /* [63][0][][] */ 20,-125,-10,-13,-67,11,45,-28,-10,-18,-3,-12,-36,127,107,33, 
  /* [64][0][][] */ -9,-2,-127,-33,16,54,34,-15,-11,-96,49,-5,63,-33,-68,100, 
  /* [65][0][][] */ -4,-9,68,56,79,-19,71,81,-33,3,-127,-67,34,101,-65,-22, 
  /* [66][0][][] */ -48,-127,-12,-107,-68,-127,47,-33,-10,-42,19,83,-68,-37,-71,83, 
  /* [67][0][][] */ -27,-86,-85,-24,-86,110,-1,-127,-78,-34,-36,-93,14,-16,-67,44, 
  /* [68][0][][] */ 127,49,22,-8,-88,18,-67,-52,-81,-121,-22,-16,36,-29,77,-62, 
  /* [69][0][][] */ 33,7,47,-21,-3,-45,-48,29,-10,127,-25,6,1,32,64,-27, 
  /* [70][0][][] */ 44,-10,-19,72,-112,27,-21,-92,90,127,23,65,44,-56,2,15, 
  /* [71][0][][] */ 123,-87,81,104,-85,-46,36,-21,127,12,-59,47,66,-75,21,11, 
  /* [72][0][][] */ -2,-46,50,112,63,7,-127,84,92,-15,37,10,-45,-80,-73,83, 
  /* [73][0][][] */ 66,22,58,-127,61,-93,-79,57,-20,117,-29,11,13,-76,35,-34, 
  /* [74][0][][] */ 92,15,33,44,-127,-31,43,1,-75,-39,11,-48,28,-71,8,21, 
  /* [75][0][][] */ 86,127,-106,15,60,59,-17,-38,-13,-30,46,75,-109,51,60,82, 
  /* [76][0][][] */ -69,-40,2,-41,-57,-8,88,-7,-60,20,95,48,-55,-127,-20,89, 
  /* [77][0][][] */ -49,127,-29,12,-60,-69,41,78,38,-66,-8,70,-21,60,-3,79, 
  /* [78][0][][] */ 127,44,-59,29,-78,38,-124,-29,-5,-19,-80,16,35,-113,24,61, 
  /* [79][0][][] */ -66,-41,127,49,-19,-92,-57,-44,-15,24,7,19,-64,111,-48,60, 
  /* [80][0][][] */ 67,110,25,-127,-17,33,96,-30,10,20,-35,23,83,-54,9,0, 
  /* [81][0][][] */ 40,-64,18,-120,104,50,-12,127,112,26,-20,-50,-15,22,-97,-78, 
  /* [82][0][][] */ 90,49,84,6,127,-107,24,52,-7,113,-39,31,-14,-42,45,-104, 
  /* [83][0][][] */ -44,78,15,5,84,57,127,109,-9,45,-23,-74,-87,96,-63,-91, 
  /* [84][0][][] */ -3,-96,-4,101,5,-84,-84,38,-85,69,-66,-10,-127,65,-14,-60, 
  /* [85][0][][] */ -94,47,-33,-9,-14,-47,-50,-37,-10,41,12,-65,-127,-85,-68,38, 
  /* [86][0][][] */ -16,59,99,117,35,-40,53,17,10,27,-49,-66,34,74,-127,-64, 
  /* [87][0][][] */ -16,50,127,-28,-96,-33,18,10,36,-21,8,43,-54,16,-6,-8, 
  /* [88][0][][] */ -32,-77,-109,28,44,35,-8,28,-15,-75,-116,-104,127,-17,5,36, 
  /* [89][0][][] */ 32,24,22,-121,10,-61,-55,53,127,-12,27,-101,9,-36,56,-82, 
  /* [90][0][][] */ 5,71,20,13,-40,37,35,115,2,-56,-12,127,48,16,-38,80, 
  /* [91][0][][] */ -53,6,-22,68,88,50,-48,-115,-44,41,-11,12,-114,-127,-68,-16, 
  /* [92][0][][] */ -29,67,7,-26,-127,-2,-95,60,-37,65,91,84,-12,-27,74,5, 
  /* [93][0][][] */ 105,44,99,42,-127,-75,19,31,-17,-57,-21,-73,28,-52,-12,0, 
  /* [94][0][][] */ -31,-127,28,-105,17,34,-24,1,84,-18,-1,58,11,55,-50,39, 
  /* [95][0][][] */ -47,-68,-26,-55,126,112,-37,41,96,46,-83,61,-39,127,-86,37, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016673080390319228, 0.0011508838506415486, 0.0018655079184100032, 0.002423522062599659, 0.0019300437998026609, 0.00088631233666092157, 0.0013836193829774857, 0.0020738707389682531, 0.0021103117614984512, 0.0012267502024769783, 0.0024672150611877441, 0.0014635833213105798, 0.0020377081818878651, 0.0018878699047490954, 0.0022413735277950764, 0.0019997491035610437, 0.0023045297712087631, 0.0011338451877236366, 0.0015408631879836321, 0.0024187630042433739, 0.0019198085647076368, 0.00081807223614305258, 0.0012006366159766912, 0.0022888153325766325, 0.0019483368378132582, 0.001967462245374918, 0.0010810170788317919, 0.00187565793748945, 0.0023813946172595024, 0.0021241256035864353, 0.0013757307315245271, 0.0021751255262643099, 0.0011261609615758061, 0.0020091957412660122, 0.0026815310120582581, 0.0019197170622646809, 0.0021530368831008673, 0.0017002581153064966, 0.0018619421171024442, 0.0018316250061616302, 0.0024705284740775824, 0.0021968998480588198, 0.0024700721260160208, 0.0027147962246090174, 0.004373098723590374, 0.0024233318399637938, 0.0016449325485154986, 0.0020313449203968048, 0.0019657891243696213, 0.0023934717755764723, 0.0020733294077217579, 0.0018405435839667916, 0.0018855243688449264, 0.0035578911192715168, 0.0029417639598250389, 0.0027867886237800121, 0.0027062355075031519, 0.002158191055059433, 0.0013116388581693172, 0.0019662440754473209, 0.0026284754276275635, 0.0016642139526084065, 0.0015198285691440105, 0.0021483278833329678, 0.0020521029364317656, 0.0017097410745918751, 0.0018851476488634944, 0.0025137506891041994, 0.0014366883551701903, 0.002973995404317975, 0.0017873760079964995, 0.0016002111369743943, 0.0017942754784598947, 0.0016403484623879194, 0.0018377155065536499, 0.0015938691794872284, 0.0025691494811326265, 0.0020723368506878614, 0.0018382059643045068, 0.0018907786579802632, 0.0017337709432467818, 0.0014659943990409374, 0.0011793927988037467, 0.00221458007581532, 0.0017690475797280669, 0.0020615796092897654, 0.0027568808291107416, 0.0032670842483639717, 0.00093067012494429946, 0.0022853568661957979, 0.0025614474434405565, 0.0019189794547855854, 0.00095789838815107942, 0.001844945945776999, 0.0028280941769480705, 0.0016989968717098236, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -34669, -6786, 4375, -16678, 17042, -17343, 31950, -12305, 15932, -12356, 16145, 14293, -5358, -38622, 629, 5787, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.8826666392851621e-05, 4.8885132855502889e-05, 5.1454284403007478e-05, 4.6231831220211461e-05, 7.1847141953185201e-05, 0.00012540466559585184, 3.961196489399299e-05, 4.8594425607006997e-05, 8.5275052697397768e-05, 7.7030679676681757e-05, 7.0790520112495869e-05, 6.2062179495114833e-05, 6.5157240896951407e-05, 6.6682361648418009e-05, 5.1779861678369343e-05, 6.3770821725483984e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 19,29,15,19,-20,-75,-11,-3,-21,-77,14,-9,59,-65,56,29,-91,-27,40,2,82,23,-65,11,-4,67,127,67,11,77,55,-41,9,1,9,-27,29,25,-12,-10,120,15,23,-17,-7,-10,7,-39,23,-35,95,-2,-68,-1,42,36,-11,-37,3,17,-14,39,-61,-13,16,-3,67,28,0,-25,26,29,8,36,11,31,61,-36,48,23,-14,50,33,34,-53,14,-8,65,15,9,-89,-23,23,12,102,71, 
  /* [1][0][][] */ 18,38,-52,-15,-4,-48,92,-75,-68,-41,-62,-47,-1,-48,-10,-51,-35,-22,-29,-14,-17,-88,120,-35,2,15,4,64,-50,12,-34,15,-28,26,18,5,-26,59,-60,83,34,14,-1,-44,53,-56,-4,32,-88,0,55,-104,-45,47,61,64,34,29,-65,18,-41,4,-18,-20,36,25,108,10,-40,-127,11,7,21,68,-18,36,-57,-33,107,-27,43,-10,53,-59,-31,-60,-15,16,-16,-49,29,-3,68,-61,-39,53, 
  /* [2][0][][] */ 5,-21,14,-6,60,46,-49,21,-52,40,18,-23,31,-6,23,26,31,-23,-127,-6,-14,-44,-15,19,2,-13,-45,18,-33,-21,-21,70,-19,-33,0,16,-40,27,-20,-22,66,15,7,37,9,55,7,-8,-86,6,-16,13,-21,45,10,-62,31,19,44,29,-26,-13,-18,51,35,-1,-33,-6,-5,-2,-10,-34,18,47,29,66,-56,-13,-26,-36,37,30,49,-13,-9,-44,-15,-48,-18,-31,-16,67,-2,-5,85,-41, 
  /* [3][0][][] */ 43,-45,-21,-114,-11,-28,119,-35,29,122,-76,-16,5,-20,-18,61,64,47,-30,21,-48,18,17,3,-50,84,49,-2,-42,-17,-75,70,-5,-19,27,-31,5,-53,-24,59,3,14,-23,21,62,-52,-6,30,44,-31,24,-44,110,39,27,-8,-3,-27,-11,-47,-42,35,73,-1,-37,-25,123,-36,-43,-15,-56,25,11,-79,1,-83,14,-47,127,-7,-6,-61,-36,-46,-32,-48,74,77,-47,50,-61,2,4,-81,-18,34, 
  /* [4][0][][] */ -29,75,35,10,-12,7,-39,-18,16,-29,-1,-16,23,40,-24,25,-8,-44,-14,-73,25,-30,-58,19,-24,-37,-21,14,-36,127,-48,-19,8,-43,1,-32,66,39,-34,4,17,7,16,-41,-50,-9,50,-19,24,-19,-61,-8,-66,29,44,22,2,58,-19,16,-29,-67,-26,7,55,25,-64,-10,-4,-1,10,-65,-10,60,55,60,-30,16,-61,41,14,61,25,-61,42,-62,-27,-66,-36,-49,-46,-16,1,10,29,-32, 
  /* [5][0][][] */ -6,-7,39,-21,-9,-23,-17,0,35,10,-19,-6,-19,-29,20,-17,-14,1,-48,-35,-23,18,-19,13,21,-45,68,-20,-6,41,13,73,-6,-83,18,8,-37,-31,-32,3,-47,-4,-22,14,2,17,-72,23,-16,14,47,-7,21,-71,4,20,-21,-53,5,-35,39,25,21,46,-36,7,107,-23,-5,-25,10,14,0,27,34,9,-3,-12,127,40,-26,-10,-27,26,39,63,7,91,4,-36,-5,9,9,-15,-32,20, 
  /* [6][0][][] */ 21,-67,70,14,-48,127,-52,-104,-28,-89,-88,63,3,9,-35,95,7,47,18,-42,-94,-29,-91,-71,9,-55,-8,78,-124,56,-26,-32,46,102,-16,-6,3,-43,17,-22,-66,40,38,-39,22,50,-101,-12,51,11,-85,-126,91,8,-43,-21,26,-33,30,-21,-16,-44,47,-2,57,-84,-71,-71,-108,22,-12,-83,-35,-112,26,-117,91,7,-86,46,-37,92,19,-108,68,-47,-15,-3,-77,86,-91,96,52,-49,75,-112, 
  /* [7][0][][] */ -12,-12,-65,59,-33,-4,41,-4,-99,3,89,60,-5,-58,2,-39,-15,2,-3,1,-49,-22,-43,-43,75,49,-2,77,0,30,21,33,-58,-127,33,109,-7,16,-45,4,-12,-12,7,-76,34,60,69,89,-17,51,-46,6,32,-48,44,-55,-16,32,-78,-25,61,9,11,-38,70,-48,112,-21,-58,-23,70,5,-14,-26,-78,-23,27,-44,102,-37,1,-8,-79,-38,49,18,-79,47,-12,19,1,34,70,-5,92,-5, 
  /* [8][0][][] */ -7,-53,12,3,-8,-8,15,-5,-15,-2,43,39,17,29,-43,-1,66,-5,18,-3,-15,-70,-30,-17,-24,-37,70,0,-22,49,8,-33,-11,-5,-3,2,-46,-20,14,-22,-2,39,25,-37,10,-20,22,-13,38,-4,44,5,-7,14,-39,3,-13,108,-61,-1,-15,-57,-61,-3,-81,-37,-18,20,-8,8,35,-22,-25,-127,41,-104,14,17,-56,22,-30,-9,3,55,61,-57,-37,48,-33,85,15,-23,-49,0,-6,-59, 
  /* [9][0][][] */ -25,-28,-30,24,2,20,6,35,-40,0,63,56,-27,51,27,-48,-15,35,-22,-40,3,36,-6,7,-24,26,5,17,35,-9,13,-6,-18,-19,9,54,-17,-3,25,-3,-13,-23,13,-1,11,46,3,42,-45,9,-14,28,127,17,-13,0,14,-16,34,14,-29,1,81,8,11,25,61,5,34,-4,-18,25,3,-119,-35,-116,-33,-14,39,-5,-2,30,2,-38,43,12,-55,-1,-5,106,34,33,53,35,-10,27, 
  /* [10][0][][] */ 22,41,10,0,-19,17,-40,-24,69,5,-34,24,15,11,-2,-58,-29,3,17,3,26,-16,-22,-33,10,-16,-96,45,-17,50,-5,14,17,26,-16,5,16,6,6,-4,38,-8,56,-44,-28,0,16,25,15,4,12,-27,-19,-16,-5,33,-13,5,-9,-10,-14,-40,-3,8,-6,-11,-92,-32,-48,-14,44,-18,-22,31,35,18,47,-22,-90,9,-8,31,2,-4,10,5,-74,-127,-26,27,9,24,49,-28,22,31, 
  /* [11][0][][] */ 17,-42,4,3,-60,32,13,9,72,-19,-17,-43,24,7,15,-9,-27,52,24,-61,7,30,18,-27,41,15,62,1,30,-54,-30,18,21,104,-95,3,10,-16,55,8,-50,46,-16,16,-42,-1,-10,-3,46,-16,-21,-12,-21,16,-75,89,-31,1,-3,-33,25,7,-10,-67,-4,-42,-127,-80,2,-32,-86,33,51,21,-5,4,33,53,-113,-36,-12,-5,-17,-5,-18,-1,59,75,21,-50,5,9,-32,27,81,29, 
  /* [12][0][][] */ 19,27,-38,-23,12,-21,6,33,57,-40,22,0,0,-14,-2,9,12,-39,-27,15,14,53,1,48,-42,-33,-127,-7,76,-27,27,1,-21,-70,67,-4,34,-10,-2,15,-6,-53,13,32,46,1,23,-16,-73,-2,-50,92,76,-25,28,-72,9,20,-36,-36,11,48,79,2,-17,-13,33,21,109,29,22,25,1,-14,-10,-6,-38,-59,46,-70,25,-47,30,-35,7,4,3,-101,-10,37,-43,19,13,69,15,39, 
  /* [13][0][][] */ -17,19,-75,28,24,19,-7,6,31,64,-31,44,-46,-24,65,-51,15,52,58,15,-27,-44,-5,11,42,49,-21,27,11,40,51,-16,-18,67,-2,50,21,-34,-49,-52,0,-11,18,12,49,47,-32,45,-49,35,0,0,-13,-43,59,37,11,-47,-9,-17,24,19,6,-29,12,86,127,36,21,2,-45,-14,36,51,-77,53,16,-74,125,-43,-10,-33,22,5,28,54,-34,-20,-16,-24,6,51,39,17,64,53, 
  /* [14][0][][] */ -9,47,20,24,-60,-40,21,38,-74,-24,67,12,-74,-11,67,-23,-46,38,-60,24,-23,21,-95,11,-50,1,-54,-109,15,-6,29,78,-57,29,18,-15,-29,-67,-8,-42,27,-33,46,-23,-10,49,-71,28,-16,-41,84,27,-11,24,-30,29,-57,29,3,38,39,59,-8,40,13,-48,2,-66,40,61,74,34,-53,38,11,15,27,-15,40,16,-66,114,-4,-127,83,-5,-4,13,-108,-14,-21,-4,-25,9,39,32, 
  /* [15][0][][] */ 70,-35,23,30,36,13,-15,-11,20,29,-53,-14,64,64,0,-18,-9,12,-80,54,0,-35,15,25,64,-35,91,32,46,-31,-46,73,65,57,-3,-82,67,67,71,53,90,37,-23,6,-39,-125,34,-39,-36,-20,-12,-8,-8,-54,-33,52,-12,4,-12,22,0,-53,-33,34,38,46,-77,36,-8,-28,-5,-5,-3,-126,-50,-100,-23,21,-127,34,79,-35,47,28,-57,-3,-6,-18,42,89,15,-65,-34,-32,37,-40, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0037127656396478415, 0.0026370452251285315, 0.0027756348717957735, 0.0024939163122326136, 0.0038757009897381067, 0.0067647923715412617, 0.0021368162706494331, 0.0026213633827865124, 0.0046000522561371326, 0.004155320581048727, 0.0038187028840184212, 0.0033478641416877508, 0.0035148232709616423, 0.0035970937460660934, 0.0027931977529078722, 0.0034400345757603645, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10400, -866, -7093, 9166, -773, 1649, -486, -687, 3081, -4877, -192, -2688, 12705, -4197, -2274, -8584, -43, 793, -12098, -561, -2974, -432, -7767, -696, 58, 10119, -11495, -6115, -671, -3965, -1001, -1190, 23431, 107, -3380, -651, -186, 16799, 4583, 12509, -50, 6398, 664, 6870, 90, -717, 10856, 971, -6687, -9, -4050, -465, -1051, -3650, 156, 2448, -200, 2058, 1085, 2468, -582, -46, -154, 8943, 9337, -380, 15882, 10869, -1911, -210, 11783, -1461, 182, 1139, -4850, -482, 21245, 12050, 10677, 15127, 18011, -1664, 6416, 8987, -1417, -953, 11637, -8296, 14026, 40, -10555, -1174, -583, 792, 22686, -1821, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00010347834177082404, 0.00023302019690163434, 0.00014592727529816329, 0.00011896455544047058, 0.00017983949510380626, 0.00042519817361608148, 9.3177863163873553e-05, 0.00013726235192734748, 0.00027517549460753798, 0.00021709631255362183, 0.00019058857287745923, 0.00019754517416004092, 7.8207063779700547e-05, 0.00013423798372969031, 0.00017250122618861496, 0.00013466691598296165, 0.00023950562172103673, 0.00028482542256824672, 9.0333385742269456e-05, 0.00029901094967499375, 0.00019972588052041829, 0.00017591139476280659, 8.9562629000283778e-05, 0.00010464242950547487, 0.0018352486658841372, 0.00012557819718495011, 0.00018985160568263382, 0.00014823432138655335, 0.00026342846103943884, 0.00016623048577457666, 0.00012224543024785817, 0.00026708873338066041, 5.4414998885476962e-05, 0.00038148960447870195, 0.00010091871081385761, 0.00021163946075830609, 0.00022461936168838292, 7.886025559855625e-05, 0.00015958804578986019, 9.5455601694993675e-05, 0.00045238545862957835, 0.00016282469732686877, 0.00025410609669052064, 0.0001135642669396475, 0.00014021212700754404, 0.00024177941668312997, 0.00012473626702558249, 0.00026691294624470174, 0.00015154598804656416, 0.00038474419852718711, 0.00021067682246211916, 0.00012556355795823038, 0.00012764935672748834, 0.00024755450431257486, 0.00025209906743839383, 0.00022457679733633995, 0.00011698767048073933, 0.00030756017076782882, 0.00031448775553144515, 0.00024343348923139274, 0.00016671522462274879, 0.0001957387721631676, 0.00012848860933445394, 0.00011166228068759665, 0.00025255462969653308, 0.00037473181146197021, 0.00010395937715657055, 0.00012783872080035508, 0.00019524089293554425, 0.00020299592870287597, 0.00010623100388329476, 0.00019329650967847556, 0.00035660871071740985, 0.00015083284233696759, 0.00012949912343174219, 0.00019656155200209469, 6.5571293816901743e-05, 0.00013762025628238916, 0.00011775369785027578, 0.00012953912664670497, 7.1957627369556576e-05, 0.00022398857981897891, 0.00010565950651653111, 0.00027784216217696667, 8.9161498181056231e-05, 0.00019226205768063664, 0.00011300637561362237, 0.0001859213225543499, 8.5207197116687894e-05, 0.00020533523638732731, 8.7745705968700349e-05, 0.00022072558931540698, 0.00026049639564007521, 0.00012760143727064133, 8.4006278484594077e-05, 0.0002307858521817252, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-12,2,-36,100,-6,34,-14,-9,0,-8,-20,-30,4,-4,-19,-14,0,-12,-13,-6,23,8,48,1,-14,-30,-5,17,2,26,6,-19,2,2,-25,0,-69,-45,1,3,-12,32,-27,-22,39,-50,-12,-18,8,-9,53,-62,6,39,-13,1,-7,1,-19,-5,-15,-5,-36,-17,-23,-45,-27,-10,24,-3,-5,29,2,-3,-1,-22,12,127,-21,-127,11,-96,-22,-20,-21,27,10,-34,-15,14,-35,-2,33,-14,7, -16,33,50,-77,-36,-1,127,-59,-3,-12,-34,14,-69,5,-88,76,-8,67,62,-28,-2,127,79,127,33,2,42,57,127,37,127,-27,-127,-17,-76,-30,-19,-114,127,-60,-25,-127,-16,-45,57,-29,-27,-1,48,4,22,127,-89,38,-81,-7,-78,-4,-9,23,-8,-127,-122,-53,-41,1,-8,-92,-6,15,-68,110,-127,-15,9,-29,-127,-71,-5,-84,-126,9,27,-58,105,76,-53,29,-127,-2,35,-14,12,127,-41,-87, -27,-1,-5,-18,63,-4,42,-28,-21,14,-9,4,-9,2,-5,-27,-11,-6,-23,-21,-8,5,10,33,0,-8,-2,-20,6,7,19,12,-23,2,-7,59,0,-77,-43,10,0,-11,14,-16,-15,-23,-39,-19,-11,-1,-6,36,5,-2,11,-14,66,-14,4,-26,-6,-6,-49,-10,-22,-31,127,-27,-3,17,-4,6,16,5,2,17,-19,28,-40,-19,-103,3,-111,-19,10,-30,17,-20,-41,-37,8,47,7,28,-11,11, 
  /* [0][1][][] */ -91,-8,44,-61,48,90,-38,-20,-6,-17,-23,-16,-127,26,23,73,-15,36,95,22,27,-15,127,-22,40,18,68,18,-10,4,-4,-16,-122,-15,72,-15,-6,-127,-61,-127,-19,0,83,-28,-70,127,-89,-71,62,58,15,-43,-112,63,57,-29,27,-27,30,-14,15,-10,90,-75,-29,16,-28,-56,-9,-3,-127,15,66,127,14,-69,-116,-62,-62,-49,-80,-8,-16,-48,36,19,-100,55,-72,127,95,-84,127,-1,-53,-4, 82,127,127,127,-127,-127,95,-67,127,127,-76,-56,-86,127,-26,127,127,-127,127,127,127,-77,92,-122,-127,-127,127,127,-121,127,-21,127,-66,127,127,-93,127,101,7,-25,127,4,-127,-105,127,-24,127,127,127,-127,127,-109,115,127,-127,127,-127,127,-127,127,-103,120,107,-127,127,127,-14,127,-105,-127,-16,-127,10,121,127,72,-6,-127,93,-127,59,127,127,127,127,60,-127,127,-97,48,0,-28,-89,-25,-127,-32, -127,-30,39,-73,10,51,-55,0,-37,-14,-2,127,-111,23,26,60,-22,45,74,9,13,-20,84,-21,40,6,38,6,-12,-3,17,-12,-94,-30,85,127,0,-96,-83,-85,-30,-15,21,-33,-62,-62,-85,-97,48,66,-6,-24,127,9,87,-46,104,-24,44,-46,2,-33,-127,-30,-59,-8,-57,-67,-18,5,-113,1,31,-95,8,127,-80,-42,-58,-4,-112,-16,-52,-67,1,22,-82,43,-34,-80,127,127,-42,-26,-70,-7, 
  /* [0][2][][] */ -22,-40,-13,-21,35,-3,-3,17,-12,9,33,-24,47,0,-9,-33,-1,-10,-46,-18,-15,-12,15,-26,5,-14,-9,7,3,-5,-23,8,0,-1,7,-20,0,-46,-24,-4,-28,5,21,14,23,14,-56,5,-34,4,-23,-16,-6,-34,30,-16,11,-15,3,-19,0,18,5,2,-34,-20,117,17,29,26,0,0,-11,-17,-4,-25,-9,14,-28,-27,-36,3,-72,-13,-14,-5,34,-15,2,7,-2,-15,-13,-12,-33,-3, -24,-55,31,-105,-41,-3,52,127,-56,67,127,-20,-67,17,127,89,-9,-35,71,-44,-26,-35,124,11,20,-20,31,19,-8,8,-86,-40,-73,-29,-83,-2,-86,-117,46,-58,-25,-95,-40,127,29,-19,-49,2,19,-6,-13,-7,62,24,-49,-42,-44,-44,39,-56,127,28,105,4,-75,-46,-24,-56,127,31,-33,17,19,-30,22,-24,-20,-41,1,31,-111,-23,-69,-63,34,-127,-12,10,-26,4,46,3,14,-114,-80,127, -21,4,-9,-8,26,-9,0,15,-22,1,15,41,54,1,-6,-35,-3,6,-17,-25,-15,-5,7,-14,-1,-15,-14,-2,0,2,-29,7,5,3,6,4,-3,-62,-34,4,-34,6,-5,9,20,-3,-60,12,-31,-4,-16,-15,5,-38,24,-16,67,-8,8,-24,4,17,-10,16,-24,-22,-26,17,23,14,-11,0,-50,-40,-7,-15,-20,7,91,-15,-31,-2,-56,1,-17,1,39,1,10,0,-9,19,2,-18,-26,-8, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0057260757312178612, 0.012894401326775551, 0.008075028657913208, 0.006583020556718111, 0.0099515952169895172, 0.023528758436441422, 0.0051560886204242706, 0.0075955470092594624, 0.015227105468511581, 0.012013237923383713, 0.010546405799686909, 0.010931355878710747, 0.0043276646174490452, 0.0074281906709074974, 0.0095455246046185493, 0.0074519263580441475, 0.013253279030323029, 0.01576109416782856, 0.0049986867234110832, 0.016546064987778664, 0.011052027344703674, 0.0097342301160097122, 0.0049560358747839928, 0.0057904915884137154, 0.10155528783798218, 0.0069489930756390095, 0.010505625046789646, 0.008202691562473774, 0.01457707304507494, 0.0091985268518328667, 0.0067645711824297905, 0.014779617078602314, 0.0030111074447631836, 0.021110102534294128, 0.0055844360031187534, 0.011711277067661285, 0.012429532594978809, 0.0043638097122311592, 0.0088309608399868011, 0.0052821296267211437, 0.025033192709088326, 0.0090100644156336784, 0.014061210677027702, 0.0062841903418302536, 0.0077587757259607315, 0.013379101641476154, 0.0069024036638438702, 0.014769889414310455, 0.0083859460428357124, 0.021290197968482971, 0.011658009141683578, 0.006948182824999094, 0.0070636020973324776, 0.013698671944439411, 0.013950148597359657, 0.012427177280187607, 0.0064736274071037769, 0.017019143328070641, 0.017402488738298416, 0.013470631092786789, 0.0092253508046269417, 0.010831397026777267, 0.007110043428838253, 0.0061789420433342457, 0.013975357636809349, 0.020736152306199074, 0.0057526943273842335, 0.0070740813389420509, 0.010803846642374992, 0.011232978664338589, 0.0058783967979252338, 0.010696251876652241, 0.019733292981982231, 0.0083464831113815308, 0.0071659614332020283, 0.010876926593482494, 0.0036284520756453276, 0.0076153520494699478, 0.0065160165540874004, 0.007168174721300602, 0.0039818459190428257, 0.012394627556204796, 0.0058467723429203033, 0.015374668873846531, 0.0049338391982018948, 0.01063900999724865, 0.0062533188611268997, 0.010288138873875141, 0.0047150240279734135, 0.011362426914274693, 0.0048554949462413788, 0.01221406739205122, 0.014414824545383453, 0.0070609510876238346, 0.0046485699713230133, 0.012770761735737324, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1706, 8892, 369, 1753, 6825, 15344, 167, 2992, 12727, -1114, 17656, 4895, 1985, 558, 5331, 571, 3169, 5475, -521, 10769, 1559, 8698, -1786, 1881, -11892, 1322, 2485, 2033, 8789, 1367, 3794, 5519, 1852, 13489, 4732, 4540, 3580, 2533, 4703, 2917, 19877, 1463, 2596, 1435, 2813, 8810, 6384, 9839, 1299, -1029, 1869, 6330, 2623, -4092, 8005, 253, 2023, 18334, 1392, 2134, 3176, 12582, 3689, -299, 18604, 15784, 1971, 4896, 6897, 5453, 2010, 1453, -3831, 4420, 2316, 3365, 439, 11810, 3805, 8126, 3200, 1148, 7038, 14864, -160, 9861, 6516, 1885, -642, 2698, 1449, 14331, 3821, 2978, 6031, 5427, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00017484260024502873, 8.7045133113861084e-05, 0.00024268646666314453, 0.00022432843979913741, 9.7358497441746294e-05, 5.9781556046800688e-05, 0.00022345416073221713, 0.00011094164074165747, 6.9233450631145388e-05, 0.00016445435176137835, 4.758380600833334e-05, 9.6922369266394526e-05, 0.00016099234926514328, 0.00030993789550848305, 0.0001062204537447542, 0.00012425705790519714, 0.00018257183546666056, 0.0001166468791780062, 0.00010607915464788675, 8.1689286162145436e-05, 0.00014881303650327027, 8.6870008090045303e-05, 0.00014459916565101594, 0.00013162287359591573, 6.1896993429400027e-05, 0.00015206853277049959, 0.00019601210078690201, 0.00016684195725247264, 9.8429714853409678e-05, 0.00018595460278447717, 0.00014985022426117212, 9.5945972134359181e-05, 0.00021778617519885302, 6.296424544416368e-05, 0.00010825289064086974, 0.00013266038149595261, 0.00016302475705742836, 0.00016590542509220541, 0.00010477779142092913, 0.00014585195458494127, 4.7511104639852419e-05, 0.00018311373423784971, 0.00014872079191263765, 0.00012862416042480618, 0.00013073597801849246, 9.5898823929019272e-05, 0.00011220947635592893, 7.6922849984839559e-05, 0.00020482832042034715, 0.00021272011508699507, 0.00022012919362168759, 0.00011009833542630076, 0.00018225343956146389, 0.00010258221300318837, 9.2319714894983917e-05, 0.00025081404601223767, 0.00015859257837291807, 4.7706045734230429e-05, 0.00015200419875327498, 0.00013506518735084683, 0.00013313454110175371, 6.7556160502135754e-05, 0.00016479137411806732, 0.00019842258188873529, 5.1829803851433098e-05, 5.6324097386095673e-05, 0.00021336860663723201, 0.00012164108193246648, 0.00011155225365655497, 9.3922564701642841e-05, 0.00024086442135740072, 0.00015545655332971364, 0.00015139093738980591, 0.00014567658945452422, 0.00016629451420158148, 0.000188940015505068, 0.00016232985944952816, 6.8682231358252466e-05, 0.00015391163469757885, 0.00010330858640372753, 0.00013489989214576781, 0.00014873166219331324, 6.9720197643619031e-05, 6.4872154325712472e-05, 0.00011562724102986977, 7.411941624013707e-05, 0.00010697807010728866, 0.00022198572696652263, 0.00019468159007374197, 0.00020871133892796934, 0.00015009156777523458, 6.071513780625537e-05, 0.0001314533146796748, 0.00013604552077595145, 9.4543494924437255e-05, 0.00011989327322226018, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 45,4,6,62,-127,-22,96,48,64,88,-28,43,19,-3,35,79, 
  /* [1][0][][] */ -18,34,-97,0,127,108,1,-3,-31,13,-56,31,-53,92,-55,-36, 
  /* [2][0][][] */ -38,60,80,-5,65,84,5,34,40,-4,38,-16,56,-127,-7,9, 
  /* [3][0][][] */ 127,-30,20,4,33,36,-13,17,40,32,-57,-28,-45,49,-34,58, 
  /* [4][0][][] */ -85,-18,13,34,-112,-12,-93,-24,-8,38,-7,-51,-16,40,-42,127, 
  /* [5][0][][] */ -97,20,37,12,127,31,11,13,-52,33,-21,16,-65,57,-93,-32, 
  /* [6][0][][] */ -127,27,-38,30,-11,-69,77,20,5,-33,-49,36,10,-2,-44,14, 
  /* [7][0][][] */ -5,110,51,-98,64,53,127,12,43,-2,1,48,85,30,-34,5, 
  /* [8][0][][] */ -29,-29,-75,59,-51,88,-50,-78,32,-38,81,41,127,46,-105,3, 
  /* [9][0][][] */ -25,-127,-21,77,-41,-58,-12,56,47,42,4,59,-79,10,-5,-35, 
  /* [10][0][][] */ -39,-56,-110,59,-122,127,59,-91,9,-73,60,-50,39,113,-92,81, 
  /* [11][0][][] */ -46,-109,-38,33,-14,91,40,-13,17,16,40,-104,9,111,-125,127, 
  /* [12][0][][] */ -35,-96,-88,103,-109,-127,22,72,77,65,-32,102,-8,-63,-31,-4, 
  /* [13][0][][] */ -67,-25,-36,-3,-16,2,30,17,-18,127,-9,-24,37,32,13,-11, 
  /* [14][0][][] */ -127,-22,-58,-53,-29,97,-18,-99,121,-74,81,-6,90,-53,-99,-85, 
  /* [15][0][][] */ 3,-127,96,-55,-53,-34,5,55,19,-47,-91,-37,84,-42,-29,-49, 
  /* [16][0][][] */ -22,-38,29,-40,35,22,-23,-28,68,-127,35,-18,-5,-2,-75,-98, 
  /* [17][0][][] */ -17,12,34,-59,22,-4,-38,3,91,-56,21,75,109,-77,-24,-127, 
  /* [18][0][][] */ 77,6,-36,-125,4,-31,127,-46,23,62,-11,68,-4,76,-5,-122, 
  /* [19][0][][] */ -36,-35,-28,-66,-109,42,-15,-8,30,-43,22,-127,-19,-26,-16,-7, 
  /* [20][0][][] */ 21,78,76,-101,72,-6,-55,97,-108,-127,39,-83,-35,119,-22,-19, 
  /* [21][0][][] */ 18,-118,-127,-1,100,39,94,102,-80,-96,-28,18,123,-114,-26,31, 
  /* [22][0][][] */ 61,-14,84,-10,5,3,63,31,22,127,28,24,-5,-3,118,-10, 
  /* [23][0][][] */ -126,-78,-19,68,69,42,14,4,-2,14,-5,-92,-1,74,67,127, 
  /* [24][0][][] */ 20,-14,38,28,19,-92,18,-63,19,127,-121,79,-17,-61,82,-67, 
  /* [25][0][][] */ 127,-61,110,113,47,12,-21,30,-108,82,48,-51,-7,21,75,-20, 
  /* [26][0][][] */ -19,22,13,39,-53,111,-19,35,-56,-33,-82,35,5,17,47,-127, 
  /* [27][0][][] */ 33,-3,-11,-50,-49,4,-81,9,-109,-25,-70,-46,-75,47,-23,127, 
  /* [28][0][][] */ -64,15,25,-3,26,-16,-127,-1,-1,-28,-6,-9,14,-51,-68,-35, 
  /* [29][0][][] */ -22,-114,-23,93,-26,7,127,4,82,61,-116,69,36,-30,-49,74, 
  /* [30][0][][] */ 41,-57,-62,5,-127,32,60,-34,11,-3,0,-30,-13,51,-12,76, 
  /* [31][0][][] */ -127,-12,3,94,-41,13,-49,-6,-29,-59,18,-34,-26,-60,-21,103, 
  /* [32][0][][] */ -127,-77,-93,-8,-94,-45,6,-11,113,51,-51,-65,37,46,28,-13, 
  /* [33][0][][] */ -12,4,-85,37,-127,-89,52,-10,-113,14,-57,-61,-19,91,71,66, 
  /* [34][0][][] */ 31,56,1,39,-64,-42,36,16,16,-127,-14,34,-32,4,39,94, 
  /* [35][0][][] */ 40,-8,-64,-11,-127,15,94,-33,27,50,-15,-15,23,74,29,67, 
  /* [36][0][][] */ -7,-7,-56,62,127,-21,43,67,-89,15,-86,-86,28,-22,7,30, 
  /* [37][0][][] */ -127,53,-6,-74,44,-94,-45,-32,-12,-28,-23,47,57,-80,12,-125, 
  /* [38][0][][] */ 46,114,37,-84,-109,-61,-127,-64,-43,-78,48,75,-69,-110,96,-3, 
  /* [39][0][][] */ -2,-50,7,66,15,82,85,-52,-22,51,15,-25,-10,127,49,113, 
  /* [40][0][][] */ 105,48,82,103,-63,-55,1,26,-85,61,-6,-23,-48,-27,127,6, 
  /* [41][0][][] */ -26,-12,7,55,-99,115,-1,57,-61,26,-111,9,16,37,50,-127, 
  /* [42][0][][] */ 9,-102,27,-20,127,31,58,7,-20,-91,-97,-23,-19,-15,-7,29, 
  /* [43][0][][] */ -35,-90,-41,4,120,21,2,91,-72,-70,-127,-79,123,-11,-63,61, 
  /* [44][0][][] */ -35,-57,-83,-90,29,74,71,11,-41,-127,-61,65,-49,49,30,108, 
  /* [45][0][][] */ -6,-53,-68,-4,-127,67,-23,-62,56,-47,26,-52,-4,13,-38,47, 
  /* [46][0][][] */ 31,-80,-11,4,80,-81,-17,92,-1,-27,33,59,-47,-57,58,-127, 
  /* [47][0][][] */ -76,-25,-19,93,-14,14,44,42,2,127,92,89,-40,92,-10,112, 
  /* [48][0][][] */ 44,-16,-76,-88,35,-66,6,50,46,-73,-5,25,-55,3,-40,-127, 
  /* [49][0][][] */ 50,36,5,27,-10,-25,46,47,-31,127,-37,37,-40,-24,67,79, 
  /* [50][0][][] */ 9,-1,15,9,-127,-19,-10,-50,58,23,21,56,-20,-64,19,-3, 
  /* [51][0][][] */ 13,-2,-8,-127,-29,94,49,-52,12,3,33,-54,69,73,-26,19, 
  /* [52][0][][] */ 18,-22,-5,-80,75,-104,-6,-29,33,-5,127,-58,32,9,-36,95, 
  /* [53][0][][] */ -46,-60,50,-26,-43,-127,22,-108,0,91,-95,81,-33,-17,29,-82, 
  /* [54][0][][] */ 62,72,46,-23,-127,-41,-91,-111,-10,19,51,74,-73,-54,60,10, 
  /* [55][0][][] */ 17,16,-37,71,-39,27,41,-22,4,127,19,58,-2,-1,2,48, 
  /* [56][0][][] */ 42,-110,-79,78,-76,47,-1,65,127,16,67,59,-32,-27,51,95, 
  /* [57][0][][] */ 38,24,102,-91,83,-9,-14,3,88,-29,13,127,59,-51,103,-65, 
  /* [58][0][][] */ 75,-53,13,-73,29,13,-6,127,47,91,-4,64,46,20,87,-4, 
  /* [59][0][][] */ -49,43,27,-43,-3,-92,2,12,0,18,-112,-104,-127,-59,72,-10, 
  /* [60][0][][] */ 37,-26,26,19,14,-15,15,-56,26,127,-12,62,-8,-30,-22,-31, 
  /* [61][0][][] */ 63,67,13,-27,-90,-127,-16,-57,-68,-19,-20,18,-71,-41,85,92, 
  /* [62][0][][] */ -28,84,-42,35,-56,127,-42,25,-61,4,-35,27,-35,41,55,-82, 
  /* [63][0][][] */ 35,-4,-61,-127,-14,-42,82,-16,0,-91,-33,36,-34,66,37,-36, 
  /* [64][0][][] */ -44,17,16,-21,56,-70,25,92,-127,-20,-78,-43,-34,85,60,68, 
  /* [65][0][][] */ -68,-15,-50,-27,78,49,-44,-92,-127,-63,2,-35,-125,110,-65,49, 
  /* [66][0][][] */ -18,58,-9,30,-47,127,-24,23,-63,22,-30,46,-32,53,51,-85, 
  /* [67][0][][] */ 19,-20,-40,-26,10,-91,65,-98,-8,26,13,127,-61,-26,-21,-123, 
  /* [68][0][][] */ 11,-127,-26,74,-8,-1,20,84,44,42,51,13,-74,36,-12,-14, 
  /* [69][0][][] */ 15,94,89,-111,46,-1,-35,104,40,96,54,88,103,-103,34,-127, 
  /* [70][0][][] */ 40,27,42,-35,91,9,-93,-49,-127,-90,-3,41,-33,65,-105,-3, 
  /* [71][0][][] */ -27,-71,25,-51,70,-15,41,34,-94,85,-127,-48,16,100,-27,54, 
  /* [72][0][][] */ 11,22,64,14,-69,-32,-116,-69,-12,68,-33,65,34,126,-127,-3, 
  /* [73][0][][] */ 3,-34,-15,-45,41,-117,36,-53,80,94,107,-9,25,-19,-69,127, 
  /* [74][0][][] */ 8,0,-24,77,-76,-6,87,20,79,64,24,113,127,22,-54,4, 
  /* [75][0][][] */ -27,44,-23,31,-48,127,-14,17,-31,32,-40,46,-17,50,32,-66, 
  /* [76][0][][] */ -78,91,-64,45,-121,-2,-5,29,50,43,-41,-49,49,-46,-127,48, 
  /* [77][0][][] */ 106,115,-125,127,71,70,81,53,39,6,107,-44,77,39,71,29, 
  /* [78][0][][] */ 12,-34,-2,-58,67,-119,33,-51,46,45,127,-28,5,-15,-44,124, 
  /* [79][0][][] */ -41,60,0,18,-5,-42,-32,-4,-127,-9,53,6,101,44,-73,-40, 
  /* [80][0][][] */ -74,21,77,-4,68,51,-5,-127,-69,60,-66,-40,-3,-91,21,50, 
  /* [81][0][][] */ 87,79,-22,2,31,-30,83,118,-111,127,-63,-36,-44,29,118,123, 
  /* [82][0][][] */ 59,107,-26,-68,-6,-46,108,-106,33,25,-73,73,127,-27,64,-55, 
  /* [83][0][][] */ 5,-33,15,23,-2,23,-33,-100,63,-30,97,18,33,-63,-50,-127, 
  /* [84][0][][] */ -127,-83,-44,-24,-8,100,95,7,86,70,106,101,61,88,-86,12, 
  /* [85][0][][] */ 121,-1,97,-86,79,-11,-31,98,12,127,-66,6,-46,71,127,20, 
  /* [86][0][][] */ -80,74,-37,4,28,81,23,20,87,36,127,-26,-27,60,-13,-18, 
  /* [87][0][][] */ 12,-59,26,-44,45,-127,24,-33,47,-8,62,-34,35,-44,-37,67, 
  /* [88][0][][] */ -88,59,40,-8,113,-24,42,26,-65,-77,110,-76,75,121,104,-127, 
  /* [89][0][][] */ -26,35,-16,30,-35,127,-14,35,-47,7,-36,18,-10,58,26,-81, 
  /* [90][0][][] */ 50,-86,25,21,127,-6,48,37,-12,-100,-122,-29,-18,-13,-63,32, 
  /* [91][0][][] */ -16,67,-29,-42,-5,-80,-93,40,-86,19,-104,-127,-115,-78,-10,23, 
  /* [92][0][][] */ 62,44,58,30,-127,-90,21,11,-25,29,-25,-35,-24,-77,22,1, 
  /* [93][0][][] */ -5,-127,-104,59,-39,-58,-17,116,92,72,4,68,-58,66,-12,-27, 
  /* [94][0][][] */ 95,5,127,-25,28,-34,9,40,31,89,-6,53,9,3,114,-17, 
  /* [95][0][][] */ -64,-45,-26,-23,127,-4,46,81,-38,-13,-102,-61,14,14,-71,33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0036184727214276791, 0.0018014513188973069, 0.0050225420854985714, 0.0046426118351519108, 0.0020148926414549351, 0.0012372152414172888, 0.0046245181001722813, 0.0022960039786994457, 0.0014328277902677655, 0.0034034815616905689, 0.00098477548453956842, 0.0020058667287230492, 0.0033318335190415382, 0.0064143510535359383, 0.002198296133428812, 0.0025715744122862816, 0.0037784338928759098, 0.0024140772875398397, 0.0021953717805445194, 0.0016906087985262275, 0.0030797752551734447, 0.001797826960682869, 0.0029925666749477386, 0.0027240144554525614, 0.0012809954350814223, 0.0031471496913582087, 0.0040565882809460163, 0.0034528945107012987, 0.0020370620768517256, 0.0038484421093016863, 0.0031012403778731823, 0.0019856595899909735, 0.0045072156935930252, 0.0013030829140916467, 0.0022403586190193892, 0.0027454863302409649, 0.0033738953061401844, 0.0034335125237703323, 0.0021684393286705017, 0.003018493764102459, 0.00098327081650495529, 0.0037896488793194294, 0.003077866043895483, 0.0026619541458785534, 0.0027056597173213959, 0.0019846837967634201, 0.0023222425952553749, 0.0015919646248221397, 0.0042390450835227966, 0.0044023706577718258, 0.0045557059347629547, 0.0022785512264817953, 0.0037718445528298616, 0.0021230005659162998, 0.0019106119871139526, 0.0051907473243772984, 0.003282168647274375, 0.00098730530589818954, 0.0031458181329071522, 0.0027952552773058414, 0.0027552994433790445, 0.0013981153024360538, 0.0034104564692825079, 0.0041064745746552944, 0.0010726489126682281, 0.0011656610295176506, 0.0044157914817333221, 0.0025174352340400219, 0.0023086408618837595, 0.0019437838345766068, 0.0049848337657749653, 0.0032172668725252151, 0.0031331265345215797, 0.0030148644000291824, 0.0034415649715811014, 0.0039102272130548954, 0.0033595138229429722, 0.0014214200200513005, 0.0031852936372160912, 0.0021380332764238119, 0.0027918342966586351, 0.0030780909582972527, 0.001442901324480772, 0.0013425681972876191, 0.0023929751478135586, 0.0015339459059759974, 0.0022139754146337509, 0.0045941281132400036, 0.0040290523320436478, 0.0043194065801799297, 0.0031062350608408451, 0.0012565362267196178, 0.0027205054648220539, 0.002815543906763196, 0.0019566344562917948, 0.0024812633637338877, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5909, 12124, -23463, 1881, 14731, -17968, -49089, -10447, -6122, 8382, -18890, -15469, 7648, -14289, -4021, -3717, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00011609691864578053, 0.00013601228420156986, 0.00013650199980475008, 0.00013482374197337776, 8.7560154497623444e-05, 0.00011420254304539412, 8.7176915258169174e-05, 0.00010210077016381547, 7.0063397288322449e-05, 7.3594048444647342e-05, 0.00014651656965725124, 0.00013197719817981124, 8.4962717664893717e-05, 7.9018871474545449e-05, 0.00010924495290964842, 0.00012251734733581543, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 26,40,21,-36,67,69,-39,56,-12,114,1,46,-34,34,-13,48,34,79,45,-65,-72,79,-6,49,61,48,36,51,-46,-48,-11,88,-25,12,-72,55,53,-127,-32,13,16,-31,65,-4,-6,-54,-63,-15, 
  /* [1][0][][] */ -51,4,-78,-42,12,87,-57,21,-13,-32,-42,35,58,-16,-29,-27,-26,-30,-6,18,-64,43,-104,-44,-53,-37,49,69,-22,-26,43,-42,11,-56,-32,50,13,-56,127,-38,-24,30,-45,-16,33,53,32,19, 
  /* [2][0][][] */ -1,3,57,-32,-21,-84,20,27,101,77,-64,12,109,-47,127,85,-70,-20,-31,30,88,-84,-33,-96,9,-38,40,-74,43,42,-41,12,31,-25,64,41,-71,8,3,-31,29,33,65,-19,23,-88,100,-60, 
  /* [3][0][][] */ 37,1,-25,-26,30,107,18,-16,40,-49,25,-23,-53,10,8,39,-46,-65,34,-124,-8,-3,-29,-15,-43,89,127,66,-10,-39,29,40,58,-28,96,32,-46,-55,2,37,24,16,-18,-2,23,21,-9,-25, 
  /* [4][0][][] */ 97,-12,8,-51,87,86,50,8,71,-16,-107,28,42,-21,19,-13,-96,-122,-23,-94,-23,25,-38,-35,-81,127,-100,116,-59,-57,26,78,40,-52,14,-30,-8,12,-26,31,-48,-11,-6,52,-47,102,-28,-53, 
  /* [5][0][][] */ 2,-6,-54,4,-12,52,19,-27,63,52,39,90,54,-23,33,-3,-38,127,-20,34,9,0,-65,-16,36,-2,-65,-33,-16,30,18,-16,-37,1,39,16,-44,8,-86,2,88,-21,27,48,-18,10,-40,32, 
  /* [6][0][][] */ 61,17,16,71,6,-28,102,-55,-1,70,127,107,43,45,-56,62,42,-46,-76,93,50,-63,-47,61,-85,94,92,-10,115,48,-33,-2,101,-68,-122,-4,104,32,3,5,15,60,60,-36,66,121,36,-2, 
  /* [7][0][][] */ -97,-3,-23,26,-58,-55,22,48,78,111,-54,-73,-99,13,-16,-17,-77,99,3,118,-46,39,24,38,-21,-93,-30,-78,30,39,-5,6,-19,13,16,-17,2,-55,127,11,4,45,22,-14,57,71,-27,1, 
  /* [8][0][][] */ -9,-91,53,-67,61,-58,72,-39,-24,-117,26,8,-33,0,34,33,-5,4,-42,106,2,39,-18,27,69,-13,-66,-37,-127,-26,-60,-113,10,-64,0,88,-7,30,110,19,18,-2,73,122,-10,-71,-48,78, 
  /* [9][0][][] */ 23,-38,24,-63,43,83,-38,53,16,-39,-34,-14,23,-45,112,-19,10,-115,37,41,-73,38,55,-41,-27,-83,-28,83,57,78,-38,-30,-54,35,-11,127,-26,-42,-57,-27,-31,-1,34,110,63,86,-66,16, 
  /* [10][0][][] */ -12,17,-25,-7,18,29,-62,-40,47,40,63,-6,-35,-7,46,-50,-58,127,-2,47,2,-12,17,28,-44,42,5,89,33,6,-31,-10,68,10,-6,24,-9,-47,-36,19,-79,-4,25,-17,18,44,31,31, 
  /* [11][0][][] */ -30,46,-16,34,29,53,2,7,17,18,-127,-68,72,16,-7,-42,0,26,-41,-46,-13,-5,103,3,49,12,-18,34,-8,27,-10,48,30,-4,-49,1,43,79,100,21,33,-29,64,-2,-54,-18,81,5, 
  /* [12][0][][] */ -69,0,32,23,-63,-57,5,4,-41,-37,-127,18,71,-98,17,31,53,109,84,-125,-31,41,-45,-82,-4,-16,37,-30,8,17,-16,77,66,84,41,-37,-59,-27,35,-2,-35,17,60,-6,40,-13,-37,-39, 
  /* [13][0][][] */ -60,-120,-50,-102,8,23,61,12,-127,29,126,-62,53,49,125,2,122,29,-10,-102,80,-84,119,4,-83,8,-24,15,-41,-99,-111,15,45,-26,-73,61,28,-55,84,-81,-10,56,68,41,62,-26,112,-69, 
  /* [14][0][][] */ 64,21,-55,7,-41,17,-86,-25,-32,60,56,48,-12,-62,12,-47,53,-113,21,7,89,-61,21,-3,-13,127,-86,5,-56,-25,-90,2,123,45,89,-23,-82,14,-21,55,-17,-45,105,-27,-55,-42,-55,56, 
  /* [15][0][][] */ -63,14,38,22,93,7,0,34,18,79,-14,55,53,-15,-38,-17,14,40,0,-36,28,-38,-51,-52,53,-63,-35,63,-34,6,17,7,-59,-2,127,-6,-87,14,59,-13,-44,-21,19,-5,-34,-35,-9,12, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0058482084423303604, 0.0068514151498675346, 0.0068760835565626621, 0.0067915436811745167, 0.004410711582750082, 0.0057527818717062473, 0.0043914066627621651, 0.0051431735046207905, 0.0035293386317789555, 0.0037071898113936186, 0.0073805530555546284, 0.0066481539979577065, 0.0042798696085810661, 0.003980457317084074, 0.0055030509829521179, 0.006171627901494503, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 16028, -1004, 21011, -582, 15891, -2902, 32967, 342, 12594, 29137, 2675, 25199, 2602, 12601, 33425, 22747, 182, -3123, 3078, 44921, -631, 21750, 498, 17097, 18611, 30634, -842, -2201, -3000, 14956, 21891, -52, 788, -1158, -226, 17174, 11579, 30009, 1544, 17911, 29021, 494, 995, 18216, -504, -672, 36285, 25865, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.1760772445704788e-05, 0.00011617324344115332, 6.0102473071310669e-05, 0.00014034182822797447, 0.0001000868360279128, 9.440342546440661e-05, 6.5105923567898571e-05, 0.0002668165834620595, 0.00010875665611820295, 8.2700615166686475e-05, 6.2912564317230135e-05, 9.3801332695875317e-05, 6.6562468418851495e-05, 8.2963713794015348e-05, 5.2872732339892536e-05, 8.6869113147258759e-05, 9.7370531875640154e-05, 7.456707680830732e-05, 0.00011814618483185768, 5.1220522436778992e-05, 7.5101968832314014e-05, 6.1998696764931083e-05, 0.00010089056013384834, 9.391704952577129e-05, 6.3063060224521905e-05, 8.8822162069845945e-05, 7.175087375799194e-05, 4.9107082304544747e-05, 0.00020592975488398224, 8.9150948042515665e-05, 7.243816799018532e-05, 0.00029001670191064477, 0.00010744774044724181, 0.00012725820124614984, 9.8298383818473667e-05, 8.6122665379662067e-05, 0.00010062065848615021, 5.7011886383406818e-05, 8.6626816482748836e-05, 0.00011782042565755546, 5.1108756451867521e-05, 0.00018386497686151415, 0.00023720563331153244, 7.1202135586645454e-05, 0.00018532772082835436, 7.5556738011073321e-05, 5.8543540944810957e-05, 5.9496480389498174e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -94,66,-127,88,-100,59,-43,74,-81,-64,63,-51,55,-76,-50,-44,70,75,85,-117,94,-110,76,-89,-87,-52,56,127,-94,-53,-92,76,77,-90,68,-99,-73,-112,89,-45,-15,-83,118,-101,101,59,-65,-55, -114,92,-75,105,-74,122,-42,92,-115,-92,97,-72,87,-109,-73,-72,95,106,127,-127,120,-124,95,-127,-102,-82,71,118,34,-74,-114,98,106,-127,98,-110,-90,-127,116,-73,-103,101,127,-113,-30,101,-82,-90, -59,47,-1,29,-11,63,-17,28,-60,-32,46,-25,41,-45,-29,-14,38,50,62,-41,39,-62,39,-51,-79,-30,21,27,102,-30,-63,35,36,-78,37,-32,-25,-31,44,-41,-124,-29,40,-42,-62,53,-21,-57, 
  /* [0][1][][] */ -108,89,-70,107,-74,101,-116,106,-101,-93,81,-88,80,-99,-79,-89,97,92,-45,-99,101,-119,98,-85,-107,-86,88,109,-127,-92,-95,87,100,40,91,-111,-108,-100,101,-80,-118,-98,95,-113,127,62,-108,-95, -127,127,-118,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-55,-113,127,-127,127,-127,-127,-127,127,112,21,-127,-127,127,127,49,127,-127,-127,-98,127,-127,-127,127,104,-127,-50,127,-127,-127, -74,71,-87,36,-49,34,-55,44,-59,-35,57,-54,55,-48,-52,-17,68,54,-46,-33,38,-64,44,-56,-118,-47,44,40,111,-66,-71,54,40,19,48,-46,-40,-16,55,-55,-50,-59,21,-64,-80,64,-23,-79, 
  /* [0][2][][] */ -47,31,1,42,-34,42,-57,21,-52,-38,22,-51,28,-45,-31,-44,56,32,-77,-24,23,-34,35,-29,-56,-45,38,4,-80,-42,-29,39,31,57,46,-55,-44,-40,27,-43,-108,-46,30,-73,75,24,-55,-52, -69,51,-92,54,-66,39,-67,31,-66,-48,44,-73,46,-58,-52,-51,75,48,-95,-23,27,-32,43,-48,-60,-59,49,30,7,-77,-53,51,37,76,62,-61,-52,-35,33,-60,-55,69,30,-107,-27,54,-63,-72, -32,28,-72,8,-36,-4,-28,15,-18,-10,24,-32,25,-18,-19,8,43,22,-69,0,10,1,11,-12,-46,-18,24,12,67,-22,-12,30,8,44,27,-15,-7,4,16,-26,12,-18,-7,-21,-44,32,-7,-50, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037169754505157471, 0.0052814213559031487, 0.002732354449108243, 0.006380163598805666, 0.0045501072891056538, 0.0042917304672300816, 0.0029598192777484655, 0.012129908427596092, 0.0049442513845860958, 0.0037597022019326687, 0.0028601055964827538, 0.0042643584311008453, 0.0030260360799729824, 0.0037716629449278116, 0.0024036788381636143, 0.0039492086507380009, 0.0044266199693083763, 0.0033899382688105106, 0.0053711142390966415, 0.0023285667411983013, 0.0034142553340643644, 0.0028185597620904446, 0.0045866458676755428, 0.0042696190066635609, 0.0028669475577771664, 0.0040379972197115421, 0.0032619093544781208, 0.0022324863821268082, 0.0093618957325816154, 0.0040529444813728333, 0.0032931547611951828, 0.013184621930122375, 0.0048847459256649017, 0.0057853609323501587, 0.0044688014313578606, 0.0039152740500867367, 0.0045743756927549839, 0.0025918514002114534, 0.0039381934329867363, 0.0053563048131763935, 0.0023234856780618429, 0.0083587951958179474, 0.010783746838569641, 0.0032369627151638269, 0.0084252944216132164, 0.0034349299967288971, 0.002661482896655798, 0.0027048049960285425, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2966, -1525, 952, -2612, 4381, -908, 5541, -5101, 1646, 974, 2541, 5528, 569, -756, 831, 5769, -2778, 4505, 7889, 1087, -1152, 3693, -1145, 7509, 2744, 2593, 1486, -1167, 10959, -507, 3038, -3158, -1200, 5051, -1602, 2672, 3186, 1224, 631, 5143, 2189, 11294, -6141, 2478, 9642, 94, 3587, 3386, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00014909669698681682, 0.00021615369769278914, 0.00023649085778743029, 0.00017142195429187268, 0.00017384100647177547, 0.00016344446339644492, 0.00013248581672087312, 0.0001102118767448701, 0.00019321386935189366, 0.00020294867863412946, 0.00015852077922318131, 0.0001374354469589889, 0.000184499571332708, 0.0001893317821668461, 0.00019565844559110701, 0.0001347805664408952, 0.00015609836555086076, 0.00016930265701375902, 0.00011383908713469282, 0.00020805576059501618, 0.00018601301417220384, 0.00014868723519612104, 0.00015974463894963264, 0.00010489034320926294, 0.00016053953731898218, 0.00015570782124996185, 0.00020723017223645002, 0.00021339103113859892, 8.4667837654706091e-05, 0.00022982130758464336, 0.00014738379104528576, 0.00011665310739772394, 0.00014078117965254933, 0.00015189877012744546, 0.0001395756407873705, 0.00019377235730644315, 0.00013844754721503705, 0.00018536258721724153, 0.00015908211935311556, 0.0001466623943997547, 0.00022993134916760027, 7.7710705227218568e-05, 9.3411894340533763e-05, 0.00016826186038088053, 8.8336710177827626e-05, 0.00016932637663558125, 0.00015758741938043386, 0.00017159379785880446, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 66,34,127,-35,67,99,-78,-52, 
  /* [1][0][][] */ 12,-84,-127,3,50,23,30,-1, 
  /* [2][0][][] */ -127,-4,-45,-24,57,25,-73,-38, 
  /* [3][0][][] */ 44,69,127,-82,-10,-109,-9,-17, 
  /* [4][0][][] */ -127,24,-48,-23,47,14,-40,-55, 
  /* [5][0][][] */ -100,26,-55,-8,10,36,-84,-127, 
  /* [6][0][][] */ -40,-127,-120,46,102,15,4,48, 
  /* [7][0][][] */ -64,-127,-99,-75,-68,-66,20,88, 
  /* [8][0][][] */ 81,33,-6,-2,95,-74,-127,14, 
  /* [9][0][][] */ -36,52,-56,92,-64,-40,127,-32, 
  /* [10][0][][] */ -27,126,39,64,127,-25,-8,57, 
  /* [11][0][][] */ -81,-32,-21,-8,-82,103,127,-3, 
  /* [12][0][][] */ 68,37,-127,37,-6,-36,-68,-12, 
  /* [13][0][][] */ 60,-28,-67,12,15,-127,-31,-21, 
  /* [14][0][][] */ 13,-82,74,7,127,-115,-61,17, 
  /* [15][0][][] */ -37,-45,-5,127,62,78,-77,25, 
  /* [16][0][][] */ 114,27,-36,19,77,-106,-127,-25, 
  /* [17][0][][] */ 57,127,52,74,45,61,24,-84, 
  /* [18][0][][] */ 37,-13,1,-4,127,1,30,-15, 
  /* [19][0][][] */ 9,127,35,16,-114,19,27,-30, 
  /* [20][0][][] */ -47,20,68,-127,22,32,-14,103, 
  /* [21][0][][] */ -37,72,44,-127,33,43,-8,111, 
  /* [22][0][][] */ -75,-67,-95,21,-127,126,117,-22, 
  /* [23][0][][] */ 97,41,-127,23,18,-50,-75,-16, 
  /* [24][0][][] */ -57,46,10,3,-18,80,-127,106, 
  /* [25][0][][] */ -98,-52,-127,13,-56,-65,63,98, 
  /* [26][0][][] */ 44,-7,-35,-30,108,-16,127,-38, 
  /* [27][0][][] */ 127,-69,27,97,3,29,-22,99, 
  /* [28][0][][] */ 42,57,51,-13,127,-59,52,-34, 
  /* [29][0][][] */ -18,-9,-23,-46,-65,17,127,-30, 
  /* [30][0][][] */ 43,-127,-49,-72,-103,-5,8,-51, 
  /* [31][0][][] */ 10,28,-7,-11,-127,4,-27,-11, 
  /* [32][0][][] */ 45,-59,-59,79,-5,-94,120,-127, 
  /* [33][0][][] */ 53,127,50,36,60,-18,-29,-21, 
  /* [34][0][][] */ -123,-31,127,-2,-18,100,96,11, 
  /* [35][0][][] */ -33,76,127,-15,-63,-68,-36,27, 
  /* [36][0][][] */ -100,9,103,-18,-20,127,76,28, 
  /* [37][0][][] */ -22,-78,-6,-127,-40,-79,72,47, 
  /* [38][0][][] */ 46,-14,90,-57,57,59,-127,10, 
  /* [39][0][][] */ -12,93,-127,-39,-18,0,6,85, 
  /* [40][0][][] */ 61,-49,20,31,13,0,6,127, 
  /* [41][0][][] */ -30,93,127,-2,10,81,-75,23, 
  /* [42][0][][] */ 70,-127,-122,-23,-118,3,12,-95, 
  /* [43][0][][] */ -8,-89,27,-72,127,-43,21,35, 
  /* [44][0][][] */ 7,127,122,24,4,57,-76,11, 
  /* [45][0][][] */ -36,47,13,86,-116,59,-127,23, 
  /* [46][0][][] */ -42,-42,60,50,-127,-117,-34,-5, 
  /* [47][0][][] */ -21,64,52,-112,-127,42,-16,65, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023275616113096476, 0.0033743942622095346, 0.0036918793339282274, 0.0026760830078274012, 0.0027138472069054842, 0.0025515458546578884, 0.0020682476460933685, 0.0017205271869897842, 0.003016278613358736, 0.0031682495027780533, 0.0024746817070990801, 0.0021455166861414909, 0.0028802389279007912, 0.0029556748922914267, 0.0030544411856681108, 0.0021040712017565966, 0.0024368651211261749, 0.0026429984718561172, 0.0017771519487723708, 0.0032479765359312296, 0.0029038654174655676, 0.0023211694788187742, 0.002493787556886673, 0.0016374522820115089, 0.0025061967317014933, 0.0024307684507220984, 0.0032350881956517696, 0.0033312661107629538, 0.0013217569794505835, 0.0035877604968845844, 0.0023008212447166443, 0.0018210818525403738, 0.0021977473516017199, 0.002371304901316762, 0.0021789274178445339, 0.0030249971896409988, 0.0021613168064504862, 0.0028937114402651787, 0.0024834447540342808, 0.0022895594593137503, 0.0035894783213734627, 0.0012131485855206847, 0.0014582612784579396, 0.0026267506182193756, 0.0013790320372208953, 0.0026433689054101706, 0.0024601109325885773, 0.002678765682503581, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2603, 992, 22384, -4885, 5000, -14822, 2357, -14203, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.9661214335355908e-05, 0.00010745810141088441, 0.00013905251398682594, 0.00011077195085817948, 0.00013110399595461786, 0.00012840746785514057, 8.9731729531195015e-05, 8.2902064605150372e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-50,-21,-63,0,-14,91,86,-100,-84,-33,9,-52,-4,-59,37,-85,11,11,127,55,-28,13,94,71,71,29,3,-90,-54,-76,-55,-49,102,32,-51,28,-33,89,-6,28,9,2,-103,41,-31,-35,-85, 
  /* [1][0][][] */ -16,55,-21,-29,-75,59,-23,-51,-35,70,-18,15,54,45,-51,-8,-23,-121,76,-52,127,7,-64,23,57,-2,-85,61,37,-13,68,33,-33,-18,4,-14,0,108,-17,-25,69,41,-5,11,106,17,-31,57, 
  /* [2][0][][] */ -25,-35,108,2,80,-40,-13,19,-33,-2,-13,45,6,-40,-44,-127,-50,-97,-21,14,-92,20,-37,-31,-48,15,0,-43,-41,5,-30,-11,-1,-6,24,-3,26,-28,-47,7,34,-33,27,-44,-44,-43,-62,-49, 
  /* [3][0][][] */ 47,17,61,13,15,-33,32,68,-56,-26,42,-26,-69,60,-14,49,66,28,-35,35,-105,-69,127,-4,4,0,-60,-32,-48,66,113,-61,5,-111,-19,42,-12,-75,-16,70,-76,-59,63,-1,-92,-73,55,-9, 
  /* [4][0][][] */ 16,-19,69,-26,5,-11,-6,-4,-59,-8,-21,9,46,-70,41,-98,42,43,-11,-33,10,32,18,7,-2,4,57,-17,24,21,-127,-12,-28,-23,3,15,46,-4,34,0,-37,-11,-67,29,-18,-97,0,18, 
  /* [5][0][][] */ 28,-46,63,29,31,18,24,-2,-74,-7,-46,27,30,6,11,-46,92,76,-1,-17,89,-59,127,-88,-14,43,1,46,13,14,-34,-50,-16,-44,-35,11,40,29,66,6,-76,26,34,26,51,-17,81,-1, 
  /* [6][0][][] */ -45,55,-127,85,54,23,42,22,-21,-6,65,-77,-96,-21,-31,31,-121,33,-7,93,24,50,-91,-89,-5,-22,23,77,-31,-39,-49,8,37,77,-49,-25,-17,-5,80,5,75,64,-122,-56,-38,117,-55,-35, 
  /* [7][0][][] */ 32,73,-78,16,16,65,123,78,43,76,-100,0,-45,2,-69,-48,30,37,120,101,85,7,127,28,105,96,-47,100,-67,30,1,-78,18,-68,-26,24,3,98,-60,79,-65,46,-8,-84,77,-22,51,-37, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0042356015183031559, 0.0045669693499803543, 0.0059097316116094589, 0.0047078076750040054, 0.0055719194933772087, 0.0054573174566030502, 0.0038135983049869537, 0.0035233376547694206, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 249, 10449, -176, 64, 1049, -1286, 1572, -347, -3610, 159, -6831, -167, -228, -949, -2138, 4401, 6071, 1733, -105, -4035, -6840, -363, 16099, -4986, -1089, -1085, 4362, -6714, -756, -96, -8624, 8704, 5417, -29, 4284, -282, -16, -358, 9218, 497, 7616, -2384, 2662, 5598, -841, 9624, -524, 915, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00022946979152038693, 0.00015960491145960987, 0.0007718265987932682, 0.00017347272660117596, 0.00021500950970221311, 0.00026488470030017197, 0.00021009941701777279, 0.00028383187600411475, 9.805225272430107e-05, 0.00025010100216604769, 0.00020923453848809004, 0.0015069172950461507, 0.00044072058517485857, 0.00049569748807698488, 0.000387881591450423, 0.00063937384402379394, 0.00018519011791795492, 6.6859858634416014e-05, 0.00022686307784169912, 0.00029260781593620777, 0.00028992674197070301, 0.00020569257321767509, 9.2879250587429851e-05, 0.00046564737567678094, 0.00018321399693377316, 0.00040304599679075181, 0.00038977307849563658, 0.00020016610505990684, 0.00023856475309003145, 0.00041637744288891554, 0.00012777553638443351, 0.0001200335900648497, 0.00012185634113848209, 0.00019602340762503445, 0.00013564749679062515, 0.00026968546444550157, 0.0020473445765674114, 0.00035290842060931027, 0.00015805484144948423, 0.00015811645425856113, 0.0001378279848722741, 0.00014358969929162413, 0.0002830417943187058, 0.0001829021202865988, 0.00040037024882622063, 8.9457527792546898e-05, 6.5723092120606452e-05, 0.00018045463366433978, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 10,-45,8,5,-18,-105,-37,48,-38,-7,-5,12,45,-7,-14,4,96,19,27,3,-3,-20,-71,20,-8,-14,0,-32,-60,76,-14,-117,54,-5,-57,-50,-9,-31,12,-10,-17,40,11,3,-13,57,127,-27, -127,-97,-25,127,-66,81,-91,127,27,15,15,-1,51,18,-4,-43,-28,63,29,9,9,127,13,127,127,-29,-42,43,69,-119,-9,-75,74,-7,-45,-119,26,13,-53,-58,-127,-7,-94,-127,33,48,56,114, -11,-6,10,7,-24,36,41,43,6,-37,0,6,-21,-3,-5,5,-57,37,-67,-25,-7,-26,127,20,-60,5,14,-4,19,40,12,16,-1,-17,-42,69,7,1,19,68,24,-25,30,-35,-8,31,-19,-22, 
  /* [0][1][][] */ -14,-17,-29,-3,32,-114,127,-87,-15,8,23,40,127,20,1,-34,-20,-27,28,41,58,-63,37,12,-66,127,-74,-23,127,-95,49,-127,-43,8,-86,20,11,-63,-39,10,119,127,12,-123,-67,-59,-1,81, 91,-127,127,-2,127,70,-65,-57,26,127,127,-127,-94,127,127,127,127,127,122,127,127,119,5,3,120,-99,-127,127,40,127,127,4,-127,127,127,127,-127,127,-127,-127,38,34,-127,-34,127,-127,-9,82, 19,33,-41,-6,-50,127,-112,90,104,-79,17,66,-37,14,10,-65,17,8,-127,18,19,-109,-33,-3,72,-11,-19,127,-72,-36,31,-33,-28,16,95,-24,39,-6,0,-96,109,-3,36,48,-59,88,94,-87, 
  /* [0][2][][] */ -7,27,5,-33,1,-72,-12,-13,4,-3,2,6,-14,-14,-4,-2,-48,18,8,-39,-3,-20,80,-12,-115,4,41,-27,9,-2,1,37,-13,-8,-72,35,0,-12,21,45,-24,-6,15,6,-16,16,-11,7, 34,-16,-37,-38,28,34,117,-107,127,-33,-4,9,-70,-24,-24,-72,-16,106,4,23,12,33,-21,-33,-84,59,78,-9,-93,12,-34,-6,-26,-2,-42,6,56,-26,3,119,-116,-7,-6,59,36,53,10,-127, -11,30,3,-22,-14,-5,-5,-56,-26,-23,-11,7,19,-13,-14,13,47,40,-28,-19,-6,-19,-46,-15,17,-22,25,-18,-15,2,-10,23,27,-14,-31,-47,-6,6,32,11,-9,-18,12,16,-14,13,64,-54, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0099962810054421425, 0.0069527914747595787, 0.033622708171606064, 0.0075569082982838154, 0.0093663549050688744, 0.011539043858647346, 0.009152458980679512, 0.012364430353045464, 0.0042714024893939495, 0.010895027779042721, 0.0091147823259234428, 0.065645106136798859, 0.019198896363377571, 0.021593827754259109, 0.016897097229957581, 0.027852730825543404, 0.0080673471093177795, 0.0029125835280865431, 0.0098827257752418518, 0.012746731750667095, 0.012629938311874866, 0.0089604854583740234, 0.0040460536256432533, 0.020284770056605339, 0.007981262169778347, 0.017557697370648384, 0.01697949506342411, 0.0087197385728359222, 0.010392480529844761, 0.018138447776436806, 0.0055662235245108604, 0.0052289650775492191, 0.0053083687089383602, 0.0085392724722623825, 0.0059091462753713131, 0.011748176999390125, 0.089187473058700562, 0.015373578295111656, 0.0068852663971483707, 0.0068879504688084126, 0.0060041332617402077, 0.0062551284208893776, 0.012330011464655399, 0.0079676760360598564, 0.01744113489985466, 0.003896994749084115, 0.0028630630113184452, 0.0078610572963953018, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3526, 5604, 17665, 2492, 3413, -2074, 6592, 16733, 5089, -976, 4901, -3170, 22014, -2737, 2528, 25239, -487, 2771, 168, 3583, 4358, 4720, 574, 42141, 9022, 5197, 19196, 2058, 6927, 7462, 808, 1342, 1164, 2306, -431, 302, -4137, -646, 3011, 3368, 6140, 2696, 5266, 5656, 6337, 4138, 2142, 8146, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017522445705253631, 0.00014475836360361427, 5.3965999541105703e-05, 0.00012148234964115545, 0.00014509142783936113, 0.00019889310351572931, 0.00011787780385930091, 5.8156459999736398e-05, 0.00011113400250906125, 0.00018953814287669957, 0.00016894198779482394, 0.00015722078387625515, 4.3814921809826046e-05, 0.00016127937124110758, 0.00018805792205967009, 4.2171090171905234e-05, 0.00025287113385275006, 0.00015678837371524423, 0.00021584652131423354, 0.00017253185797017068, 0.00015902768063824624, 0.00015375534712802619, 0.00028667796868830919, 2.6431614969624206e-05, 9.455623512621969e-05, 0.00011363370867911726, 5.2357136155478656e-05, 0.00019113306188955903, 0.00011122295109089464, 0.00010031523561337963, 0.00033324791002087295, 0.0003155760932713747, 0.00015938334399834275, 0.00016886509547475725, 0.00021650918642990291, 0.00022830304806120694, 0.0001434109581168741, 0.0002187558711739257, 0.00019540413632057607, 0.00015969856758601964, 0.00012941082241013646, 0.00018449763592798263, 0.00015494902618229389, 0.00014348096738103777, 0.00011473577615106478, 0.00016804152983240783, 0.00029610027559101582, 0.00010119210492121056, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 60,127,-81,-84,11,82,16,67, 
  /* [1][0][][] */ 58,-77,47,-127,-55,68,-87,-43, 
  /* [2][0][][] */ -31,127,120,52,110,1,49,8, 
  /* [3][0][][] */ 109,47,-92,68,-3,-106,-127,-32, 
  /* [4][0][][] */ -45,31,17,-66,-38,114,127,47, 
  /* [5][0][][] */ 20,82,-127,-76,49,94,36,-27, 
  /* [6][0][][] */ -12,127,61,59,71,14,18,-87, 
  /* [7][0][][] */ 127,-23,-38,25,19,2,109,14, 
  /* [8][0][][] */ 58,127,63,91,115,87,104,-88, 
  /* [9][0][][] */ 49,119,-127,-90,13,102,10,70, 
  /* [10][0][][] */ -69,-45,19,-51,-7,-27,-50,127, 
  /* [11][0][][] */ 18,-115,-127,-20,25,-16,42,-6, 
  /* [12][0][][] */ -30,-109,-115,-27,-127,33,-60,42, 
  /* [13][0][][] */ -7,11,-104,104,-127,-27,0,-16, 
  /* [14][0][][] */ -60,-41,-127,-8,37,-4,-14,-56, 
  /* [15][0][][] */ 18,-98,-127,12,-93,-25,-27,-11, 
  /* [16][0][][] */ 127,-64,-16,69,-81,22,31,102, 
  /* [17][0][][] */ -24,116,127,-24,-47,-12,-28,-19, 
  /* [18][0][][] */ 8,-127,50,75,-2,-64,55,-84, 
  /* [19][0][][] */ 127,-45,-59,36,-98,6,41,104, 
  /* [20][0][][] */ -31,-127,83,76,-13,-90,0,-73, 
  /* [21][0][][] */ -9,-54,-14,-37,127,-8,45,22, 
  /* [22][0][][] */ -127,29,-74,50,50,54,-91,-102, 
  /* [23][0][][] */ -92,-54,63,-8,-114,127,127,-52, 
  /* [24][0][][] */ -28,55,-4,-49,-41,118,127,0, 
  /* [25][0][][] */ -57,-117,-127,-65,-52,-16,-25,-40, 
  /* [26][0][][] */ -14,64,-13,127,-96,38,-52,-1, 
  /* [27][0][][] */ 14,-127,36,80,14,-53,8,-123, 
  /* [28][0][][] */ 21,127,57,47,110,-19,25,-66, 
  /* [29][0][][] */ 100,29,-38,-5,82,-127,-108,37, 
  /* [30][0][][] */ 25,-10,30,-127,16,-22,15,-25, 
  /* [31][0][][] */ 45,-38,5,63,-10,27,12,127, 
  /* [32][0][][] */ -86,-72,12,-67,-64,127,63,94, 
  /* [33][0][][] */ -32,40,44,-41,35,127,-105,68, 
  /* [34][0][][] */ 26,127,-68,-47,20,50,-64,66, 
  /* [35][0][][] */ 14,-127,29,55,-22,-59,36,-72, 
  /* [36][0][][] */ -17,-31,-78,-10,-127,-58,-19,14, 
  /* [37][0][][] */ -57,-127,77,89,-44,-90,-11,-48, 
  /* [38][0][][] */ -74,22,62,-72,-127,-86,-58,83, 
  /* [39][0][][] */ 67,-127,93,54,-13,-76,-14,-83, 
  /* [40][0][][] */ 1,57,23,46,-127,-13,-61,18, 
  /* [41][0][][] */ 102,127,-76,-107,58,24,-1,18, 
  /* [42][0][][] */ -10,-40,-17,11,127,14,48,19, 
  /* [43][0][][] */ 127,23,83,20,-68,-25,63,105, 
  /* [44][0][][] */ 65,48,-18,18,71,-111,-127,25, 
  /* [45][0][][] */ 47,16,23,22,81,-127,-4,-50, 
  /* [46][0][][] */ 56,-35,-7,127,41,53,18,72, 
  /* [47][0][][] */ -81,-79,45,70,-53,16,127,-79, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.003352894214913249, 0.0027699300553649664, 0.0010326314950361848, 0.0023245469201356173, 0.0027763033285737038, 0.0038057903293520212, 0.0022555745672434568, 0.00111281534191221, 0.0021265328396111727, 0.0036267845425754786, 0.0032326802611351013, 0.0030083965975791216, 0.00083839212311431766, 0.0030860570259392262, 0.0035984606947749853, 0.00080693763447925448, 0.0048386519774794579, 0.003000122494995594, 0.0041301916353404522, 0.0033013718202710152, 0.0030429714825004339, 0.0029420859646052122, 0.005485540721565485, 0.00050576508510857821, 0.0018093197140842676, 0.0021743644028902054, 0.0010018461616709828, 0.0036573030520230532, 0.0021282348316162825, 0.0019195172935724258, 0.0063766501843929291, 0.00603850232437253, 0.0030497768893837929, 0.0032312090042978525, 0.0041428715921938419, 0.0043685454875230789, 0.0027441475540399551, 0.0041858614422380924, 0.0037390296347439289, 0.00305580860003829, 0.0024762570392340422, 0.0035303353797644377, 0.0029649268835783005, 0.0027454872615635395, 0.0021954523399472237, 0.003215450095012784, 0.0056658354587852955, 0.0019362961174920201, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7151, 15573, -4397, 7107, -689, 3581, -11692, -18757, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022358575370162725, 0.00013493222650140524, 0.00013565737754106522, 0.00015788272139616311, 0.00020897976355627179, 0.00017299503087997437, 0.00022045626246836036, 0.00014626479241997004, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -46,-4,32,13,-32,-13,12,10,-41,-6,-63,-58,-24,-64,-11,-29,48,-42,41,41,-17,32,-39,13,1,-38,57,-16,-4,-18,19,9,81,37,38,-127,19,0,-15,-36,5,-15,46,50,37,6,29,3, 
  /* [1][0][][] */ -2,37,63,-28,-14,46,-49,-32,0,22,-18,-89,9,89,-19,56,-21,22,-26,-53,8,-77,-25,22,-71,-14,-4,-112,-28,-18,33,-52,49,76,-40,2,127,-32,0,51,-32,40,-84,-31,112,-21,-35,-26, 
  /* [2][0][][] */ -6,-22,-64,15,-2,43,27,2,-9,44,-5,29,67,-94,18,-63,35,-87,22,35,-25,53,-3,26,-18,59,-26,-68,15,3,21,-70,-47,-90,33,-29,105,21,-12,-57,-3,28,79,26,127,15,18,24, 
  /* [3][0][][] */ -4,25,-64,42,15,-37,-68,-101,10,-22,-35,-2,5,26,32,77,-6,15,-37,24,5,-96,27,-57,-72,-11,127,-11,-43,1,-64,16,2,-78,9,-12,-20,-39,-20,102,-45,-35,-1,18,38,2,-40,41, 
  /* [4][0][][] */ -26,-45,-7,8,31,-30,-11,-7,27,-31,57,-79,4,28,9,9,-17,-22,10,-15,-4,-51,4,-20,18,-11,39,50,32,20,-16,27,-11,-2,2,-2,-71,85,36,-24,31,-20,-21,-25,-78,11,127,10, 
  /* [5][0][][] */ 43,-22,1,14,27,-40,32,-127,27,-27,-10,118,-78,67,23,-64,1,-91,14,2,-34,63,-36,-48,-61,77,-23,1,-21,50,-40,-35,25,53,35,-3,-39,-7,-44,-43,17,-38,-44,-7,-33,57,90,20, 
  /* [6][0][][] */ 52,-22,20,-12,-35,-18,-37,18,-39,8,-41,127,-41,-36,-4,56,11,46,15,32,37,-82,-21,19,21,40,-64,5,9,-40,13,36,5,16,-15,-1,12,1,-2,-5,-8,-17,41,57,-2,-35,73,-14, 
  /* [7][0][][] */ -27,4,-6,64,32,35,8,32,22,4,73,-3,124,108,62,49,45,49,-16,3,24,-20,-88,-28,17,-4,-31,67,33,-28,-34,-16,36,6,42,-98,-78,36,38,58,-32,34,85,127,-62,-28,-111,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0095023941248655319, 0.0057346192188560963, 0.0057654385454952717, 0.0067100157029926777, 0.008881639689207077, 0.0073522888123989105, 0.0093693910166621208, 0.0062162536196410656, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11871, 5666, 3970, -129, 513, -906, 147, 30481, 182, 2100, 8418, 54893, 1879, 2703, 170, 11926, -896, 13102, -393, 7329, 13036, 402, 3682, -9639, 10946, 1348, -93, 12541, 1253, -959, -9203, 9906, 4661, 1767, -483, 4025, -8618, 8551, -973, 19663, -910, -685, 3861, 649, 874, -331, 1337, -508, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.8469318395946175e-05, 8.6511179688386619e-05, 0.00018738622020464391, 0.00017741326882969588, 0.00072031916351988912, 0.00015586223162245005, 0.00015116116264835, 0.00011738932516891509, 0.00013119421782903373, 8.9188724814448506e-05, 6.2122016970533878e-05, 5.806723129353486e-05, 8.6695290519855917e-05, 7.4340707215014845e-05, 0.00022841777536086738, 0.00016004612552933395, 0.00012571511615533382, 0.00034995112218894064, 0.00014667949290014803, 0.00014858900976832956, 0.00011896401701960713, 0.00038920101360417902, 0.00014110887423157692, 0.00028058400494046509, 0.00012914018589071929, 9.4096671091392636e-05, 6.7109460360370576e-05, 0.00010427557572256774, 0.00013683438010048121, 0.00085868540918454528, 0.00027353753102943301, 8.5391024185810238e-05, 0.00010638103412929922, 0.0001556516217533499, 0.00015869425260461867, 6.5322477894369513e-05, 0.00010765660408651456, 5.0799932068912312e-05, 0.00011249232920818031, 6.7782442783936858e-05, 0.00013298988051246852, 0.00015561512554995716, 8.143187005771324e-05, 9.9224205769132823e-05, 8.2141763414256275e-05, 0.00034590688301250339, 7.0161026087589562e-05, 0.00021218684560153633, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -47,-104,-8,-22,127,-55,68,-62,-89,-82,-24,-40,117,33,62,-127,60,-25,5,-34,-85,108,0,15,-22,81,65,-32,70,-70,14,-39,-108,-84,48,67,19,73,111,-69,-126,-17,33,70,51,-127,86,85, -55,-125,-75,51,-83,105,60,-67,-72,41,80,-110,127,91,109,-82,-84,-80,37,-51,-88,95,-66,116,-86,100,85,-116,84,-51,10,-123,-45,-86,77,127,113,108,127,-66,-127,-64,66,83,81,105,88,74, 9,-57,-61,92,-42,-25,28,-9,81,19,62,-77,17,54,-41,-12,-85,-19,34,-36,-34,11,-80,2,-76,39,15,-86,28,54,116,-70,18,17,-12,51,75,69,50,-3,-19,94,55,27,35,25,16,-118, 
  /* [0][1][][] */ -121,-102,-10,-73,-82,-73,94,-111,-127,-127,83,-73,94,44,-125,-81,127,-127,-60,-71,-89,120,-43,11,-16,96,108,-50,-106,-79,-3,-47,-96,-127,-127,64,36,86,5,-92,63,-17,70,115,81,104,121,-127, -127,-127,-127,-99,-27,127,127,-127,83,66,127,-127,109,127,62,-122,53,-95,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-12,-127,-127,-108,51,124,127,127,-15,-127,102,-98,127,127,127,-5,127,120, -53,-66,-119,127,76,-40,46,-27,60,23,21,-63,8,60,71,-59,-20,0,-13,-72,-65,6,-78,-12,-120,41,21,-90,-54,36,127,-82,-52,16,63,72,78,74,-27,-34,47,127,72,20,47,-50,21,29, 
  /* [0][2][][] */ -99,-31,25,16,-43,-29,21,-41,22,-45,13,-36,1,17,-46,-10,-82,-24,100,-28,-16,27,-60,-14,-3,45,71,-14,28,57,-7,-1,11,-82,-41,35,11,7,-55,-47,21,-4,36,38,24,51,18,-71, -85,-43,-28,-71,89,39,53,-54,88,22,-45,-63,-4,41,-127,-73,37,6,53,-64,-43,19,-54,58,-63,52,71,-33,30,4,-25,-30,-59,-21,-63,56,28,13,-104,-75,26,-45,75,65,38,-108,27,-2, -25,-35,-43,-22,-21,-13,15,-24,-71,11,-20,-19,-12,12,31,-25,32,35,2,-43,-36,-24,-12,-25,-58,1,14,-21,4,-66,53,-21,-79,25,20,42,18,17,-55,-36,3,46,20,17,14,-5,8,35, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033349459990859032, 0.003676725085824728, 0.0079639144241809845, 0.0075400639325380325, 0.03061356395483017, 0.0066241449676454067, 0.0064243492670357227, 0.0049890461377799511, 0.0055757542140781879, 0.0037905205972492695, 0.0026401856448501348, 0.0024678572081029415, 0.0036845498252660036, 0.0031594799365848303, 0.009707755409181118, 0.0068019600585103035, 0.0053428923711180687, 0.01487292256206274, 0.0062338784337043762, 0.0063150324858725071, 0.0050559705123305321, 0.016541043296456337, 0.0059971269220113754, 0.011924820020794868, 0.005488458089530468, 0.0039991084486246109, 0.0028521521016955376, 0.0044317119754850864, 0.005815461277961731, 0.036494128406047821, 0.01162534486502409, 0.0036291184369474649, 0.0045211939141154289, 0.0066151940263807774, 0.0067445058375597, 0.0027762053068727255, 0.0045754057355225086, 0.0021589971147477627, 0.0047809239476919174, 0.0028807537164539099, 0.0056520695798099041, 0.0066136429086327553, 0.0034608545247465372, 0.0042170286178588867, 0.0034910249523818493, 0.014701042324304581, 0.0029818436596542597, 0.0090179406106472015, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1429, -541, -470, 1658, 19753, 2028, -639, 5359, 1869, 1485, 345, 3630, 1410, 651, -1090, 504, 3572, 12089, 3646, -851, 1407, -1728, -144, 2797, -283, -957, 1908, -51, 4260, 15962, 2688, -38, 551, -101, 3054, -4, 569, -257, 1444, 1399, 1875, 2250, 217, -373, 923, 2800, 1673, -227, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00036134922993369401, 0.00034438871080055833, 0.00024720877991057932, 0.00024250688147731125, 5.0874790758825839e-05, 0.00029744859784841537, 0.00042338267667219043, 0.00016985725960694253, 0.00023180502466857433, 0.00044174594222567976, 0.00023385042732115835, 0.00024903618032112718, 0.00018499846919439733, 0.00031879445305094123, 0.00024689082056283951, 0.00027040365966968238, 0.0002038325765170157, 7.6380369137041271e-05, 0.00020766358647961169, 0.00028636577189899981, 0.00030733560561202466, 0.00015746858844067901, 0.00037903751945123076, 0.00026717051514424384, 0.00040609401185065508, 0.00055933097610250115, 0.00026779575273394585, 0.00068925926461815834, 0.00019008033268619329, 6.0962702264077961e-05, 0.00027068893541581929, 0.00065282039577141404, 0.0003246069245506078, 0.00033927735057659447, 0.00024429557379335165, 0.00026372467982582748, 0.00033242980134673417, 0.00046633367310278118, 0.00029078577063046396, 0.0004239569534547627, 0.00029173094662837684, 0.00028493997524492443, 0.00028681836556643248, 0.00036675619776360691, 0.00032389169791713357, 0.00018525001360103488, 0.00021783210104331374, 0.00024571578251197934, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -40,30,5,-16,-82,-38,-127,30, 
  /* [1][0][][] */ 82,-75,-55,-56,127,-87,94,22, 
  /* [2][0][][] */ -101,124,-47,-127,54,-22,-25,40, 
  /* [3][0][][] */ 48,27,97,5,100,120,127,-12, 
  /* [4][0][][] */ -71,-127,68,6,-58,-116,5,-33, 
  /* [5][0][][] */ 127,-21,65,64,-66,-8,0,-25, 
  /* [6][0][][] */ 24,33,127,-26,42,-35,-44,31, 
  /* [7][0][][] */ 27,5,-127,-32,-43,95,96,-75, 
  /* [8][0][][] */ -3,127,-37,14,62,106,48,59, 
  /* [9][0][][] */ -9,127,-68,90,16,-116,44,124, 
  /* [10][0][][] */ 5,-127,-2,-31,-76,-127,-60,-82, 
  /* [11][0][][] */ -127,-77,107,47,-6,-65,100,62, 
  /* [12][0][][] */ -29,47,-127,80,37,-57,-77,102, 
  /* [13][0][][] */ 94,-127,94,78,9,31,37,-61, 
  /* [14][0][][] */ -25,94,-34,-127,-26,-111,-26,-65, 
  /* [15][0][][] */ 39,116,30,-15,35,-68,96,-127, 
  /* [16][0][][] */ -120,-127,-65,98,-57,21,-15,75, 
  /* [17][0][][] */ -22,-109,-127,85,-63,71,-54,74, 
  /* [18][0][][] */ -93,-75,-50,92,-5,72,-4,127, 
  /* [19][0][][] */ 62,-121,103,-127,13,-65,32,-34, 
  /* [20][0][][] */ -6,70,28,15,39,127,70,-8, 
  /* [21][0][][] */ 26,114,44,-32,37,-69,94,-127, 
  /* [22][0][][] */ 24,13,99,21,-7,127,29,-33, 
  /* [23][0][][] */ -100,-64,34,-76,96,102,-64,-127, 
  /* [24][0][][] */ -91,-89,35,-85,105,101,-45,-127, 
  /* [25][0][][] */ 127,10,-61,-12,13,34,-63,-7, 
  /* [26][0][][] */ -127,-35,-120,-23,-51,-31,22,-4, 
  /* [27][0][][] */ 82,35,-3,-61,-127,-24,86,90, 
  /* [28][0][][] */ -127,-87,8,51,-78,-108,10,-3, 
  /* [29][0][][] */ 118,98,39,-127,26,9,-61,-95, 
  /* [30][0][][] */ -88,-66,40,-72,81,93,-55,-127, 
  /* [31][0][][] */ 51,46,-7,127,6,-73,6,8, 
  /* [32][0][][] */ -27,127,-8,35,23,68,-17,46, 
  /* [33][0][][] */ -33,127,-71,26,23,-34,-22,-2, 
  /* [34][0][][] */ -127,-116,-47,109,-13,17,24,107, 
  /* [35][0][][] */ -51,127,-33,-3,70,108,54,71, 
  /* [36][0][][] */ 71,31,0,-48,-127,-31,105,108, 
  /* [37][0][][] */ -67,115,30,21,-127,109,-27,-98, 
  /* [38][0][][] */ 35,34,34,19,127,74,100,57, 
  /* [39][0][][] */ -25,-66,35,-19,10,37,-95,127, 
  /* [40][0][][] */ -68,-53,-73,127,-26,2,14,67, 
  /* [41][0][][] */ 127,14,59,101,-43,-11,-6,-20, 
  /* [42][0][][] */ -41,9,-70,-127,56,-105,3,86, 
  /* [43][0][][] */ 24,-4,88,-4,37,127,92,7, 
  /* [44][0][][] */ -28,-26,-72,127,49,10,-41,-42, 
  /* [45][0][][] */ 70,127,111,-123,54,-62,20,-126, 
  /* [46][0][][] */ -36,-127,-43,36,-10,41,-65,126, 
  /* [47][0][][] */ 43,45,127,5,94,126,127,-22, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0044936081394553185, 0.0042826933786273003, 0.0030741989612579346, 0.003015727736055851, 0.00063266046345233917, 0.0036989629734307528, 0.0052650338038802147, 0.0021122833713889122, 0.0028826433699578047, 0.0054933927021920681, 0.0029080791864544153, 0.0030969239305704832, 0.0023005739785730839, 0.0039644124917685986, 0.0030702447984367609, 0.0033626421354711056, 0.0025347881019115448, 0.00094983860617503524, 0.0025824292097240686, 0.0035611409693956375, 0.003821914317086339, 0.0019582223612815142, 0.0047135734930634499, 0.0033224357757717371, 0.0050500379875302315, 0.0069556375965476036, 0.0033302111551165581, 0.0085713788866996765, 0.0023637702688574791, 0.00075811007991433144, 0.0033661895431578159, 0.0081182383000850677, 0.0040366942994296551, 0.0042191301472485065, 0.0030379712115973234, 0.0032795844599604607, 0.0041339765302836895, 0.0057991566136479378, 0.0036161066964268684, 0.0052721751853823662, 0.0036278604529798031, 0.0035434102173894644, 0.0035667694173753262, 0.0045608473010361195, 0.0040277997031807899, 0.0023037020582705736, 0.0027088811621069908, 0.0030556325800716877, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7511, -2952, 11851, -9822, 22643, 7461, -8897, 11211, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018511152302380651, 0.00021635259327013046, 0.00018375394574832171, 0.00023406051332131028, 0.00017787748947739601, 0.00015707162674516439, 0.00015732963220216334, 0.00027828666497953236, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-12,-17,-65,-26,-33,19,-17,37,9,-30,-4,110,127,-18,-107, 
  /* [1][0][][] */ 127,-58,-41,16,-47,74,-69,-42,-41,85,-33,-51,-10,3,-62,-19, 
  /* [2][0][][] */ -36,-96,43,41,45,-55,-76,-21,28,-86,27,-127,42,-21,-75,22, 
  /* [3][0][][] */ 38,11,15,15,-13,67,-53,-20,127,46,10,23,2,-12,12,21, 
  /* [4][0][][] */ -95,-35,-25,-127,-9,40,55,-116,32,-16,-46,-36,-120,31,-38,-24, 
  /* [5][0][][] */ 86,53,68,-26,47,-47,-127,-123,-16,-75,68,50,-58,52,67,-45, 
  /* [6][0][][] */ 108,38,-124,-75,28,-72,4,-88,-43,20,-127,94,89,-90,5,72, 
  /* [7][0][][] */ -127,-5,98,-29,-64,2,-4,-62,-51,61,85,-33,62,-25,29,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0078672394156455994, 0.009194985032081604, 0.0078095425851643085, 0.0099475719034671783, 0.0075597930699586868, 0.0066755437292158604, 0.006686509121209383, 0.011827182956039906, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 24671, -483, -339, 3361, -911, 221, 10365, 1736, -437, 270, -2043, 2771, -468, -440, -240, -1234, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.2395843239501119e-05, 0.00020335713634267449, 0.00017397831834387034, 0.00017841941735241562, 0.0011056446237489581, 0.00085327791748568416, 0.00016126985428854823, 0.0006839039851911366, 0.00029634821112267673, 0.0011314777657389641, 0.00019926288223359734, 0.00020457059144973755, 0.0001121721652452834, 0.00021822510461788625, 0.00020541324920486659, 0.0005132608930580318, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-5,3,4,-18,11,6,15,-4,-11,-1,-9,-4,-7,-1,0, 6,-6,0,4,14,-2,10,-27,-7,9,-5,87,-8,21,4,1, 2,-5,-6,3,3,-14,-4,10,3,2,-5,-10,1,-5,-5,0, 
  /* [0][1][][] */ 15,-10,3,4,127,-24,-127,-22,127,127,0,-7,107,-24,-3,-18, -127,127,127,-1,-87,-91,-16,-103,17,-106,127,127,127,127,127,127, 20,-4,-6,1,-9,127,2,-11,-2,-13,-5,-6,10,-4,-14,-8, 
  /* [0][2][][] */ 3,-5,-2,-16,-19,16,51,6,-8,-8,-2,-3,-5,1,-7,-10, 24,-15,-5,-127,6,-15,-9,127,-4,1,1,-16,-9,-56,-10,-35, 4,-5,-4,-4,1,-4,-1,-3,1,2,-4,-2,0,-4,-9,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0039268233813345432, 0.0086426781490445137, 0.0073940781876444817, 0.0075828251428902149, 0.046989895403385162, 0.036264311522245407, 0.006853968370705843, 0.029065918177366257, 0.01259479857981205, 0.048087805509567261, 0.0084686726331710815, 0.0086942501366138458, 0.004767316859215498, 0.0092745665460824966, 0.0087300632148981094, 0.021813586354255676, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1056, 535, 222, 1408, 52112, 42040, 5310, 19404, 4859, 15479, 1416, 114, 7115, 14892, 328, 18966, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00016186104039661586, 0.00043430106597952545, 0.00020200322614982724, 0.00013061618665233254, 2.4574595954618417e-05, 3.1631156161893159e-05, 0.00011578275734791532, 2.6235966288368218e-05, 0.00015538677689619362, 3.4121727367164567e-05, 0.00029825611272826791, 0.00033594539854675531, 0.00024115548876579851, 1.7781976566766389e-05, 0.0003262335667386651, 3.4127766411984339e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -84, -108, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -57, -1, 
  /* [4][1][][] */ 24, -127, 1, 
  /* [4][2][][] */ 15, -82, -12, 
  /* [5][0][][] */ -64, 28, -2, 
  /* [5][1][][] */ -127, 35, 3, 
  /* [5][2][][] */ -83, 28, 1, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -35, -50, -86, 
  /* [7][0][][] */ 39, 28, -14, 
  /* [7][1][][] */ 127, 68, -7, 
  /* [7][2][][] */ 33, 4, -24, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -20, 52, -8, 
  /* [9][1][][] */ -15, 127, -10, 
  /* [9][2][][] */ -5, 86, -7, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 5, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 81, 24, -15, 
  /* [13][1][][] */ 127, 99, -14, 
  /* [13][2][][] */ 74, 98, 32, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -89, -30, 17, 
  /* [15][1][][] */ -127, -122, 15, 
  /* [15][2][][] */ -23, -76, -9, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.041274562478065491, 0.11074676364660263, 0.051510818302631378, 0.033307123929262161, 0.0062665217556059361, 0.0080659445375204086, 0.029524601995944977, 0.0066901710815727711, 0.039623625576496124, 0.0087010404095053673, 0.07605530321598053, 0.085666067898273468, 0.061494644731283188, 0.0045344037935137749, 0.083189554512500763, 0.0087025798857212067, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.080414049327373505, } };
const TfArray<1, int> quant46_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.052260655909776688, } };
const TfArray<1, int> quant50_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.02295551635324955, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.050994012504816055, } };
const TfArray<1, int> quant53_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.064057037234306335, } };
const TfArray<1, int> quant54_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.021996587514877319, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.021996587514877319, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.019851706922054291, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.048319447785615921, } };
const TfArray<1, int> quant58_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.018071424216032028, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.018537843599915504, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.033289305865764618, } };
const TfArray<1, int> quant61_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.049697551876306534, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.018116641789674759, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020902818068861961, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.031346641480922699, } };
const TfArray<1, int> quant65_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.067240349948406219, } };
const TfArray<1, int> quant66_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.018190432339906693, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.024171292781829834, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.03799443319439888, } };
const TfArray<1, int> quant69_zero = { 1, { -79 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
