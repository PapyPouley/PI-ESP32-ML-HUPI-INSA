/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 14.11.2024 09:35:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 38210, -36228, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.6755222582723945e-05, 9.2074726126156747e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 73,-45,-56,114,-91,8,-69,77,127,-48,-42,-25,-18,85,-66,33,123,-75,-48,-116,115,105,82,-74,-78,-107,-52,83,-5,-111,-20,68, 
  /* [1][0][][] */ 65,85,84,-70,-83,86,-8,17,-41,-14,41,119,127,50,45,-1,-44,1,-67,-99,-86,40,40,124,95,85,-53,-5,120,-115,-122,-18, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0030422145500779152, 0.0032287517096847296, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 375, 368, 377, -325, -295, 369, -403, 316, -370, -296, 348, 364, 375, 357, 283, -394, -416, -607, -289, -327, -309, 275, 341, 398, 337, 371, -339, -380, 335, -385, 119, -388, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.0355316741624847e-05, 4.0717575757298619e-05, 4.0010312659433112e-05, 4.0068240195978433e-05, 3.9183792978292331e-05, 4.0006409108173102e-05, 4.0167065890273079e-05, 3.9973601815290749e-05, 4.0755116060608998e-05, 4.2330753785790876e-05, 4.1134131606668234e-05, 4.0348357288166881e-05, 4.0439943404635414e-05, 4.0608276322018355e-05, 4.3323965655872598e-05, 4.2791030864464119e-05, 3.7853365938644856e-05, 4.3840565922437236e-05, 3.9823979022912681e-05, 3.8701069570379332e-05, 3.9324237150140107e-05, 4.044775414513424e-05, 3.9340295188594609e-05, 3.9594429836142808e-05, 4.1267147025791928e-05, 4.0646056731930003e-05, 4.0507551602786407e-05, 3.9975311665330082e-05, 3.8798425521235913e-05, 3.9442034903913736e-05, 3.988642492913641e-05, 4.1093000618275255e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -29,-44,113,17,104,-6,-83,-94,69,-92,-102,6,64,16,-30,62,-49,-25,-60,-49,-64,-99,12,117,-124,16,86,-41,117,5,-14,-76,91,-55,-87,72,-106,-78,-85,36,82,-83,-90,109,59,-103,117,-12,24,-51,-27,98,-68,-44,-90,115,28,76,127,-104,-70,91,-53,55,-1,23,79,102,62,106,93,-111,109,-100,50,92,-101,19,-54,39,61,26,102,-9,-54,-41,-81,110,34,121,-3,-108,20,75,36,11, 
  /* [1][0][][] */ -48,40,-63,6,-31,89,46,18,87,-94,-97,114,74,-18,33,74,118,-33,43,127,-41,2,44,36,22,26,-33,115,18,12,108,-58,69,114,-1,37,59,64,-6,-57,-56,9,-14,-89,-27,44,-21,-47,-17,-78,123,56,19,91,-72,-42,31,108,66,92,-51,124,-68,-72,-50,43,86,50,114,37,26,18,-106,92,-41,53,91,-39,-34,82,-73,94,-44,-122,36,114,-63,-62,84,81,102,34,93,98,35,-19, 
  /* [2][0][][] */ 56,44,-54,104,-13,-53,98,106,-96,97,-28,126,100,-7,93,-106,-51,-19,42,64,-92,-7,122,29,-38,90,115,17,-63,89,90,104,-62,-12,-86,-101,-81,99,115,-20,-113,-76,23,2,-77,127,-17,-71,108,47,99,-92,-40,71,29,26,-67,105,-60,13,-10,68,-37,79,102,55,58,97,-89,78,17,-66,43,-77,41,35,-48,-18,12,18,47,-89,-3,-46,8,-103,-14,-28,96,115,-17,15,-37,-79,-41,-85, 
  /* [3][0][][] */ 71,-3,34,-28,-76,48,-120,35,50,17,62,1,91,94,70,2,103,97,-63,11,114,-94,-71,-121,-25,-120,-87,105,41,-106,83,4,-61,-41,-21,-20,-97,-30,37,46,-30,-98,-104,-3,71,26,-54,-90,67,-91,39,-3,93,27,87,-106,-124,-124,-125,-64,-101,33,-41,70,53,-39,-67,-37,-38,-77,0,99,17,-109,52,-54,29,98,94,-68,-97,-127,32,95,26,44,-48,-123,-90,41,-6,-115,91,-102,-97,54, 
  /* [4][0][][] */ 49,102,-6,50,-33,-30,28,12,59,88,-13,49,24,-43,-17,-73,-30,-9,-70,10,107,-100,85,22,-16,-9,61,-66,-56,32,-74,-59,67,114,10,-111,-55,-9,-121,46,-56,-64,-81,-98,30,105,31,54,20,-50,-21,-80,-97,43,-94,16,32,-102,24,10,3,-81,-39,-74,-53,53,-3,-43,23,-110,-106,-91,-62,21,100,52,59,-27,-12,-65,1,-52,-106,-23,-5,70,90,-1,-127,-73,41,42,25,99,-106,-5, 
  /* [5][0][][] */ 107,-87,87,92,49,-110,35,65,113,-110,5,-62,31,108,44,44,70,69,-67,107,38,60,25,-20,-119,-57,-9,-86,56,37,24,-94,-32,10,-64,25,-111,-34,54,30,-85,-51,49,106,-27,31,44,-46,-104,114,32,29,47,22,42,-15,112,58,-51,-34,39,-62,37,-66,-24,110,-19,37,83,10,112,-64,-41,78,-21,-68,16,-43,19,92,116,50,36,105,-76,79,0,42,74,-101,127,99,-11,32,80,-97, 
  /* [6][0][][] */ 12,-49,109,71,-91,-69,-8,61,-18,-89,1,-94,82,50,111,-125,37,-3,-6,99,-84,-125,106,55,-58,-89,-14,-63,-33,-120,42,-83,-96,-127,-51,-112,-13,35,-116,77,82,53,19,-20,-118,103,-95,-50,-90,11,-32,-66,55,-59,90,-32,2,-13,-72,109,-101,-3,66,-78,-57,62,96,-55,74,-10,-111,-10,52,-75,-97,-47,-86,-106,-62,-33,29,-34,39,-30,-77,-90,-45,-99,80,92,92,12,-59,-70,72,-31, 
  /* [7][0][][] */ 127,78,-32,-38,-67,124,-14,8,126,11,-92,20,64,-84,54,84,60,25,6,122,62,41,2,94,-70,111,48,65,-74,116,-13,44,31,32,74,109,-102,95,-2,-22,104,-73,95,78,59,5,112,-106,61,-51,-106,-67,-20,95,23,37,123,-85,10,-52,14,0,85,-110,-64,-50,77,31,-104,27,73,94,94,30,69,67,-59,59,-94,54,100,-32,-11,-77,96,38,-107,102,90,11,96,73,-51,-37,3,-69, 
  /* [8][0][][] */ 4,27,-53,-99,50,19,-84,-30,2,28,36,87,-6,-53,-94,-80,-78,87,-69,8,24,-34,74,101,-102,84,36,68,-77,11,-100,109,85,-41,38,-12,109,1,-26,62,74,101,-120,-127,-19,-35,-33,102,14,-102,-71,1,-73,-15,-38,-117,46,99,-99,96,104,34,43,100,-41,-55,-31,92,-94,42,24,-10,67,73,1,16,-55,98,76,67,27,73,-121,-84,18,46,67,-46,32,-34,-91,92,-90,-107,-55,83, 
  /* [9][0][][] */ -4,3,105,39,73,-110,-53,-121,35,42,-16,46,-32,-82,-105,-30,2,-6,-101,-72,-2,91,-109,-107,127,-14,-18,19,-16,-65,-91,90,53,-6,20,-25,-79,13,-38,-49,41,-69,47,-97,71,14,-106,53,44,-18,-85,-45,67,-79,-74,94,79,-63,-13,-10,-92,96,79,-78,-89,-2,95,40,-45,92,100,-94,1,78,-108,-97,-82,-120,-42,98,26,19,96,29,-47,-92,30,-15,103,48,-34,99,101,-6,52,-31, 
  /* [10][0][][] */ -52,87,100,-58,-7,112,114,37,41,40,32,-60,109,90,-24,19,-26,88,-93,-54,-12,36,64,-60,10,62,-107,-105,-41,86,-84,-73,93,109,127,82,-35,6,-27,44,-29,114,-103,-29,-88,-52,7,-54,3,10,43,-1,69,26,-59,-26,-100,-6,31,-36,3,88,105,49,126,-67,-88,-14,31,-11,-86,-58,95,56,-74,109,-9,67,73,28,85,7,63,94,-94,54,105,-28,38,4,1,-59,-44,-47,-39,-86, 
  /* [11][0][][] */ 122,18,-6,113,127,54,61,40,119,102,-70,120,2,-77,38,-58,-49,-95,72,48,40,84,32,-103,-124,-88,-12,80,88,-1,35,-11,-82,-64,62,55,-59,79,-23,-51,-20,108,-67,14,-33,-51,-82,-87,84,114,119,43,-88,-87,24,35,-68,-48,-36,-81,-74,97,83,16,37,97,-49,38,98,68,-77,-64,50,102,-92,57,-60,37,-38,95,-99,-18,-64,-50,53,-93,19,-25,-93,-24,18,-94,-79,-26,-65,-47, 
  /* [12][0][][] */ 23,75,-47,9,97,16,-27,45,-71,69,-6,23,-37,21,58,-71,-92,-25,-41,-73,34,-2,26,107,-82,-41,110,-92,102,21,-27,125,-79,-62,-38,25,4,-72,-10,52,123,43,-103,-32,-13,-76,-30,126,-38,-108,-70,104,45,7,-76,95,-16,-51,59,76,67,123,-5,63,121,42,-37,127,66,112,50,81,93,116,-8,1,-28,43,-110,-86,-50,113,56,12,-29,30,61,120,-89,-111,101,52,111,-9,36,65, 
  /* [13][0][][] */ 120,-53,111,105,103,123,89,74,80,-96,20,-21,100,81,76,-39,-111,-63,-64,37,76,-20,127,-39,-75,48,14,27,-81,-82,92,46,48,113,-13,45,-78,-25,33,78,-57,82,-44,21,-35,37,6,-21,43,111,-28,-105,-92,37,108,-74,-43,37,-16,-67,-19,126,-76,22,-45,-55,-84,96,-29,-4,105,6,-84,40,-68,-35,-99,74,90,-54,61,-89,105,19,-75,-103,100,124,-5,-50,-67,63,122,-46,74,-13, 
  /* [14][0][][] */ -45,-87,91,74,82,-19,-8,-99,-70,-28,73,86,-20,-72,-76,-74,-41,-48,12,31,-36,37,6,67,-127,-62,-22,37,-101,-104,-66,45,107,-13,-23,12,98,111,38,-97,-1,-104,39,93,72,-102,70,-75,118,43,79,41,99,-7,-12,21,-52,16,48,101,-8,-69,-36,75,-79,-3,81,-93,-76,-77,-77,97,12,75,55,-66,60,-94,58,38,51,-13,-108,-49,-104,-92,-102,105,105,6,88,-42,87,101,-9,47, 
  /* [15][0][][] */ 8,-28,-34,62,81,-89,51,-99,54,-10,-74,2,95,-5,-93,-111,78,4,-92,15,41,11,64,97,94,57,30,84,12,48,55,-103,-2,0,-67,-13,-69,110,100,-71,10,105,-54,-28,18,-79,-50,-81,-11,-84,-10,30,-101,-101,-55,-14,61,43,-48,99,-48,-69,2,90,-41,86,-75,-3,-64,-4,53,-76,11,-2,50,-107,-7,45,97,69,-85,48,-110,-57,-121,-31,-93,34,80,78,-113,-45,44,100,-108,127, 
  /* [16][0][][] */ -84,-4,102,-74,37,114,-66,34,49,43,-124,69,-23,-61,-65,-72,108,78,70,62,113,77,-49,48,-17,51,-82,61,-117,8,35,6,-122,75,53,54,-44,57,-60,-82,18,-50,69,90,60,104,100,-21,-67,-127,0,124,-52,119,65,41,27,88,70,6,118,109,40,59,51,7,-48,92,39,97,-42,-19,24,105,60,89,-19,99,-124,-21,7,-98,54,19,5,115,104,7,80,17,-22,113,67,-40,-97,48, 
  /* [17][0][][] */ 38,-116,18,71,-45,-115,-76,-94,27,-79,67,52,98,55,-101,33,36,43,88,101,-98,-10,2,-41,9,58,-68,14,99,-62,-37,70,-31,-20,31,3,-56,79,-96,-21,-105,-52,-24,-20,-5,-1,88,-115,72,94,-28,10,-30,58,78,-65,-127,85,-94,-102,16,-90,55,80,-83,-66,38,-102,-101,3,98,18,15,-125,-72,47,96,-52,27,-67,1,-22,-80,-102,-111,54,63,-44,4,58,-103,-106,-12,85,-2,-2, 
  /* [18][0][][] */ -102,98,105,-76,-14,-118,-111,1,-10,70,-115,-54,-43,30,56,-64,17,-29,55,-30,98,-52,17,-86,46,-104,-23,108,24,30,-5,38,40,-34,-115,-115,-39,31,-39,59,-46,-5,-56,-15,-122,12,22,-6,15,-31,67,27,-117,-15,-3,83,-47,30,-23,-125,81,106,10,31,-75,-127,-37,85,64,-85,-78,106,-105,-37,-95,-111,50,52,-5,-81,-63,-14,-31,-72,99,-37,67,66,-113,-59,-70,102,84,-60,44,-12, 
  /* [19][0][][] */ 17,30,76,37,57,-91,97,92,96,-70,27,-15,-103,32,-62,61,74,-112,111,57,-26,81,-60,10,104,-87,28,-73,-99,-126,-71,45,81,-90,31,-5,6,-75,-62,-109,44,-122,-89,8,-93,29,77,-100,-31,36,-45,50,-39,13,3,-14,22,100,-4,-31,55,-61,105,61,-77,-5,-31,-4,-12,52,76,-56,-68,-127,-61,-86,-26,-121,13,109,58,-124,-33,84,-93,-7,6,-6,93,35,-7,64,-38,117,70,-43, 
  /* [20][0][][] */ -15,70,67,92,-93,90,15,56,14,8,-93,-2,-12,86,37,-79,-57,-41,-67,-37,21,-51,-82,-78,98,-79,-111,44,19,9,-46,112,99,41,-20,52,39,-29,-20,-117,-89,-34,-95,-110,-33,-69,-76,106,63,-127,-109,45,45,111,51,-5,96,71,102,87,111,-61,-64,-39,-33,-73,-57,11,-91,-84,-73,77,-70,-75,27,18,109,78,110,108,84,0,86,-18,58,127,-18,75,21,103,25,63,18,22,-9,25, 
  /* [21][0][][] */ 101,82,77,-99,103,-75,77,25,0,-62,-67,46,11,43,-45,-84,-99,-24,29,-9,112,-46,78,-79,48,-83,-27,80,19,8,-2,-17,8,27,-87,-112,115,98,-112,-27,-4,6,34,-8,-96,-78,-74,100,-19,-63,-2,65,41,70,-100,31,-62,59,-48,127,59,-73,9,-10,88,36,-29,-64,-100,2,64,83,39,-23,79,65,-109,-32,70,112,18,101,40,-88,31,-102,67,-81,-103,79,114,-109,-45,-69,70,-49, 
  /* [22][0][][] */ 42,-50,-68,-93,101,-50,122,68,-93,98,-70,-104,127,-110,-111,-80,48,96,-115,-55,99,-70,41,41,91,4,-111,113,-54,-73,-60,-106,58,72,27,20,11,-15,-53,-112,10,-9,11,107,66,-114,103,-14,-59,-78,13,-14,-60,-88,-42,43,-12,-23,-19,-24,122,-71,-78,-112,-61,28,-110,-39,125,117,-17,6,-62,4,76,-88,54,-48,75,106,119,-96,-71,-122,91,92,109,-29,-55,32,-61,71,28,29,-24,94, 
  /* [23][0][][] */ 74,-86,13,67,108,-110,12,-96,63,-76,96,85,26,-103,28,-34,99,-27,-103,111,102,-77,114,-28,-30,-7,93,30,80,56,82,-32,-33,52,28,43,106,-5,-109,14,-103,-2,17,-105,-64,-87,125,34,87,-106,-85,-60,91,-57,-49,100,-86,-14,106,54,-109,-87,-59,-4,42,46,-112,-106,73,-7,123,-67,1,-37,-31,-94,53,-16,104,127,-48,-46,30,-124,103,5,122,-19,-90,42,116,0,116,-48,-28,70, 
  /* [24][0][][] */ -67,-42,-95,-60,-75,-102,-60,-81,70,127,90,54,124,69,-29,-107,-71,52,30,-43,103,-73,-46,-27,40,-21,84,66,115,63,14,-53,6,19,59,38,-46,-90,68,-11,-72,-108,113,14,31,-28,55,78,-78,-39,-14,8,79,63,76,-63,-9,87,28,10,98,4,28,103,-88,106,-37,-80,-92,64,-49,-17,-29,26,104,104,70,-67,-95,-75,-70,-87,-52,-126,9,53,-9,-96,29,-110,12,-68,-9,34,-88,10, 
  /* [25][0][][] */ -78,-52,-72,-2,101,-66,-96,63,51,-104,-31,30,81,7,-102,-15,-65,68,39,-102,75,93,-4,-50,3,-45,-96,46,85,-83,48,124,101,-103,52,81,106,-61,-17,-10,-79,99,-97,11,107,48,75,43,-99,101,-64,1,52,-14,-58,19,-22,60,-108,83,127,51,46,53,9,84,-9,1,-83,4,-17,-106,43,-117,80,27,79,81,22,27,58,58,-40,76,-69,-51,-99,-88,-21,-48,112,31,-109,-7,-13,-97, 
  /* [26][0][][] */ 49,-121,-27,-19,-103,-9,-15,-19,-110,-127,103,82,-84,-53,6,-20,110,26,-84,-72,11,68,96,9,66,60,8,43,8,2,-98,-6,-34,-66,-104,-108,-69,85,-56,106,-102,102,52,28,-76,70,-47,99,-25,25,-9,103,7,-50,-7,-111,97,60,52,21,-2,-99,66,-26,111,-24,-62,53,-92,74,83,93,76,-95,-92,5,43,-112,-101,5,-33,71,79,-71,76,4,-49,12,-85,115,6,14,-61,112,49,105, 
  /* [27][0][][] */ 5,5,-71,-111,-127,-77,-77,-24,39,94,32,-116,-34,51,77,-35,61,-21,55,-90,-101,5,-34,-30,-108,40,-116,-8,60,24,-40,-16,56,64,-98,-95,-92,-71,-120,85,-102,14,22,13,95,20,63,100,89,61,54,-74,-97,-91,-12,-41,97,-31,-118,-85,-62,-68,-38,49,34,-53,-121,101,44,4,-125,1,57,-53,-14,-93,44,-70,85,99,80,-34,111,-53,-81,-87,-38,30,-54,0,-42,-58,50,11,83,60, 
  /* [28][0][][] */ 102,4,96,54,-111,-60,-95,-70,-36,-105,71,78,-76,-84,13,114,107,126,-70,87,-25,29,-104,-70,-127,93,-79,-56,-70,-75,7,-12,-105,26,92,82,15,-111,-37,42,116,46,-92,62,-111,-2,24,58,30,-60,-79,-38,-82,21,57,49,64,-4,86,63,-5,-39,-98,12,70,85,-14,93,-75,36,-102,-35,82,36,3,-101,-115,-66,-81,54,-70,-94,122,-31,71,-119,75,-87,-105,-76,-32,-61,-37,51,-103,-98, 
  /* [29][0][][] */ 47,51,52,-60,-96,8,-127,1,99,-21,-98,-103,104,-113,-55,-53,-108,100,24,-73,-82,-40,51,0,-25,2,-51,-34,-111,-12,100,-9,47,-4,-88,-63,-16,103,-15,92,45,108,-52,80,-6,104,-61,-31,15,-13,55,-96,68,-107,110,43,-99,53,-55,106,-125,94,-97,-59,-68,-71,48,86,93,-94,30,-79,109,79,57,21,114,-69,-36,29,-11,-92,-14,-78,60,122,41,79,-42,98,68,78,-112,14,-7,75, 
  /* [30][0][][] */ 31,-62,-61,40,-102,24,-49,0,121,-12,13,-36,-101,20,63,23,-1,40,105,-99,45,-99,-111,14,-110,29,-69,119,-11,-112,-89,9,-85,-70,-118,-53,20,2,9,27,105,-65,-10,103,109,-31,107,76,-69,82,26,-106,104,-42,9,108,-78,-54,-79,-55,-100,-3,-60,-15,-110,-90,-88,95,-60,117,51,-27,-91,127,56,-84,-61,-66,-70,-59,33,29,-92,-18,-105,44,-111,118,-35,-109,83,54,-33,1,19,-54, 
  /* [31][0][][] */ 76,-95,31,94,45,58,-65,-104,-33,-26,-84,-93,95,-127,-53,107,-66,-94,33,44,60,31,-35,101,45,-119,32,35,-77,-77,42,103,13,16,-96,-14,92,-33,-72,-115,55,-73,-36,27,0,-58,-44,21,68,19,88,-31,-120,-62,-86,19,-122,63,1,109,-43,-8,84,-81,65,107,-50,-83,68,-126,-124,6,-102,-42,-1,2,-63,-51,47,86,-80,-48,53,72,52,95,-99,16,15,-53,-91,-60,6,99,-10,-22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001802619663067162, 0.0018188012763857841, 0.0017872087191790342, 0.0017897962825372815, 0.0017502892296761274, 0.0017870344454422593, 0.0017942107515409589, 0.0017855690093711019, 0.0018204781226813793, 0.0018908599158748984, 0.0018374082865193486, 0.0018023088341578841, 0.0018063997849822044, 0.0018139190506190062, 0.001935225329361856, 0.0019114199094474316, 0.001690860721282661, 0.0019583012908697128, 0.0017788854893296957, 0.0017287266673520207, 0.0017565626185387373, 0.0018067486817017198, 0.0017572799697518349, 0.0017686318606138229, 0.0018433498917147517, 0.0018156066071242094, 0.0018094198312610388, 0.0017856452614068985, 0.0017330753616988659, 0.0017618245910853148, 0.0017816749168559909, 0.0018355710199102759, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1529, -119, 4102, 6231, 5613, -2410, 4663, -1033, -2182, -782, 3909, -3045, 4949, 4858, 2360, 2609, -838, -668, -1857, 4406, 2038, -638, 2148, -713, -1282, 3255, 1458, 1880, 5632, 1826, 4703, 1457, 1381, 5340, 6131, 3625, -389, 3042, 2505, -5443, -444, 1231, -81, 1342, -1163, 384, -1468, 906, -9556, 1613, 892, -3795, 6148, -917, 2005, 1890, 927, 3428, -645, -1781, 170, 2275, 360, 4088, 5312, 2897, 2917, 5769, 4622, -699, 2146, 5829, 3418, -1465, 4909, 5834, 807, -3188, 603, 1528, 12737, 1994, -375, -2455, 1088, 872, 1229, -2492, 4465, -651, 4144, 1783, 116, -3087, -156, 1562, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00013407456572167575, 0.00020707266230601817, 0.00013576891797129065, 0.00012392077769618481, 0.00011390188592486084, 0.00017139478586614132, 0.00012941143359057605, 0.00023345719091594219, 0.00018875394016504288, 0.00019729748601093888, 0.00016757303092163056, 0.00014138914411887527, 0.00011481770343380049, 0.00012593294377438724, 0.00013573741307482123, 0.00015198464097920805, 0.000195165048353374, 0.00015745987184345722, 0.00016390037490054965, 0.00014299515169113874, 0.0002095687814289704, 0.0001947343407664448, 0.00017196520639117807, 0.0001427525858161971, 0.00016906864766497165, 0.00018271879525855184, 0.00020428471907507628, 0.00017722506891004741, 0.00012920516019221395, 0.00023788366524968296, 0.0001136186474468559, 0.00015751514001749456, 0.00020339584443718195, 0.00011458002700237557, 0.00010225172445643693, 0.00013858491729479283, 0.00024770048912614584, 0.00014615373220294714, 0.00015959994925651699, 9.7543845186010003e-05, 0.00017100966942962259, 0.00016570431762374938, 0.00019985374819952995, 0.00018746276327874511, 0.00021102120808791369, 0.00015293635078705847, 0.00016182022227440029, 0.00014700205065310001, 7.4633935582824051e-05, 0.00016416350263170898, 0.00025765859754756093, 0.0001284359022974968, 0.00012267834972590208, 0.00017567710892762989, 0.00016373499238397926, 0.00013593940821010619, 0.0001926439581438899, 0.00011196733976248652, 0.0002223177143605426, 0.00017723282508086413, 0.00024206405214499682, 0.00012026988406432793, 0.00015756946231704205, 0.0001631531777093187, 0.00013022228085901588, 0.00016631928156130016, 0.00013490418496076018, 0.00012571558181662112, 0.00014684669440612197, 0.00018619270122144371, 0.00022799997532274574, 0.00011657764116534963, 0.00013324171595741063, 0.00016432053234893829, 0.00014236742572393268, 0.00013385532656684518, 0.00012899204739369452, 0.00019593279284890741, 0.00015462726878467947, 0.00013875355944037437, 6.5753782109823078e-05, 0.00015019718557596207, 0.00018816700321622193, 0.00016449300164822489, 0.00018031442596111447, 0.00012119190796511248, 0.00021160149481147528, 0.00016067385149654001, 0.00014342204667627811, 0.00013810062955599278, 0.00014743497013114393, 0.00011858089419547468, 0.00016270100604742765, 0.00014310110418591648, 0.00020478575606830418, 0.00017288861272390932, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -16,97,-90,32,47,-39,108,71,-57,6,39,-98,81,127,-71,25, 
  /* [1][0][][] */ -17,3,-54,-27,-7,46,20,-127,32,-43,-25,-55,-12,-44,-50,2, 
  /* [2][0][][] */ -20,-24,36,79,26,47,-109,127,-19,5,73,-61,-22,-69,-41,65, 
  /* [3][0][][] */ 83,-94,70,-11,-7,-37,-27,127,-32,53,71,51,-3,62,7,13, 
  /* [4][0][][] */ -48,-27,-18,46,-102,9,-27,-127,-6,-13,42,-12,34,61,117,127, 
  /* [5][0][][] */ 127,27,-21,-26,-76,25,24,68,18,-9,59,88,124,29,-83,1, 
  /* [6][0][][] */ 13,-41,-67,-60,-81,0,4,-43,-59,-58,-24,31,88,62,127,-4, 
  /* [7][0][][] */ -53,35,-33,-79,-1,-58,-76,19,-97,52,-69,-69,-127,-33,19,86, 
  /* [8][0][][] */ 53,44,73,8,56,26,69,10,68,-27,39,5,-127,-25,-77,10, 
  /* [9][0][][] */ -35,66,32,-47,-26,-11,27,-17,-29,52,-44,12,48,127,27,25, 
  /* [10][0][][] */ 74,49,-50,64,-40,-20,62,-49,-88,-42,-54,-105,-127,-80,7,111, 
  /* [11][0][][] */ 46,3,58,6,-16,-34,13,111,-92,22,-27,5,-15,-4,63,127, 
  /* [12][0][][] */ -53,-24,-1,-5,18,-4,127,38,-54,20,9,-11,-10,78,-46,108, 
  /* [13][0][][] */ 10,27,22,62,109,30,120,115,-54,100,-78,-75,39,104,-127,-18, 
  /* [14][0][][] */ -125,121,-2,-17,-9,0,72,-3,-43,28,127,-15,-91,24,-50,55, 
  /* [15][0][][] */ -11,-16,-127,-49,84,-41,-92,-40,-23,-23,-19,-67,-8,-87,-55,47, 
  /* [16][0][][] */ 119,-13,12,-16,34,-27,42,-26,-36,13,127,52,53,5,-34,17, 
  /* [17][0][][] */ 16,20,-21,-100,-7,-55,109,-127,5,-19,-49,32,41,67,9,45, 
  /* [18][0][][] */ 31,127,-8,-53,63,-72,-26,-60,-37,127,-29,2,-30,51,-11,-32, 
  /* [19][0][][] */ -72,-122,114,-87,38,-127,35,-31,42,39,92,100,28,-4,65,-27, 
  /* [20][0][][] */ -17,90,55,6,11,-1,21,-27,61,-5,95,-25,-127,-22,-74,-8, 
  /* [21][0][][] */ -65,44,29,16,67,41,65,57,-127,56,-45,16,-24,22,-60,-31, 
  /* [22][0][][] */ 12,-91,39,14,15,-127,115,11,14,-52,-38,-71,43,-77,-58,-48, 
  /* [23][0][][] */ -59,-98,44,62,25,-14,23,-41,19,-39,80,6,7,67,74,127, 
  /* [24][0][][] */ -3,-1,29,83,45,18,-56,-127,65,17,-43,14,1,2,-23,-29, 
  /* [25][0][][] */ -7,37,25,-55,-25,0,7,-39,-25,59,-49,-13,40,127,28,5, 
  /* [26][0][][] */ -69,75,1,22,28,-89,1,-29,13,20,16,69,12,4,-83,127, 
  /* [27][0][][] */ -17,-127,-47,8,-60,98,-2,-65,21,-38,57,-33,27,-52,-111,-22, 
  /* [28][0][][] */ -38,0,36,81,25,8,-38,-127,-126,48,110,-11,77,15,-48,-24, 
  /* [29][0][][] */ -127,103,-28,-29,-30,20,-118,-69,-46,-31,2,-7,8,-54,-112,63, 
  /* [30][0][][] */ 55,78,-61,80,-118,-106,-75,-12,-46,-7,10,-119,127,41,-11,102, 
  /* [31][0][][] */ 127,31,-65,-35,-60,23,96,32,-55,-14,62,46,43,25,-22,5, 
  /* [32][0][][] */ -27,-16,127,4,-18,74,68,15,-15,-9,-12,18,9,67,65,37, 
  /* [33][0][][] */ 4,29,-64,-60,-20,26,117,21,-4,-10,23,-70,105,127,-47,49, 
  /* [34][0][][] */ -89,-20,99,21,31,-48,99,-8,-127,39,32,-48,50,60,-54,-37, 
  /* [35][0][][] */ -8,16,-62,10,-86,125,-32,-12,-25,127,8,100,-68,84,19,42, 
  /* [36][0][][] */ -8,-71,127,-47,-50,16,-43,-12,17,24,-51,77,0,-84,-35,43, 
  /* [37][0][][] */ 98,-3,82,-37,122,-74,-57,37,-61,127,-78,3,-95,-49,122,-27, 
  /* [38][0][][] */ 49,47,14,-117,-14,-62,-109,68,-97,58,-106,-55,-81,-127,-117,71, 
  /* [39][0][][] */ -74,23,-54,-30,-83,-76,68,16,-127,-33,18,80,36,1,-1,49, 
  /* [40][0][][] */ 127,39,13,-84,-65,28,9,-43,-32,-19,-49,-71,17,44,43,30, 
  /* [41][0][][] */ 98,-76,-58,-49,-1,0,-63,-24,61,-23,0,-61,127,-71,60,-36, 
  /* [42][0][][] */ -11,-83,-37,127,9,-90,-108,13,10,8,3,49,-80,67,-56,-6, 
  /* [43][0][][] */ -85,-42,-43,-125,-54,5,-6,74,46,-127,-42,39,-19,-56,-27,90, 
  /* [44][0][][] */ -33,45,44,-49,-19,-18,27,113,120,-84,71,111,127,42,-20,-2, 
  /* [45][0][][] */ 34,78,-72,88,127,-81,-41,-69,110,-66,63,-64,-33,3,-68,57, 
  /* [46][0][][] */ -28,-46,6,-5,98,-30,37,20,-13,127,-25,-122,38,65,-56,82, 
  /* [47][0][][] */ 81,-41,-29,-13,81,-15,-43,-62,0,127,-31,35,-8,-104,-79,10, 
  /* [48][0][][] */ 13,28,-11,-127,-3,-47,113,-122,10,4,-40,46,52,63,6,36, 
  /* [49][0][][] */ -30,127,-73,35,43,-53,77,65,-34,19,49,-92,-28,82,115,-89, 
  /* [50][0][][] */ 14,42,-19,1,-127,2,-67,-54,53,71,30,27,-36,-36,3,33, 
  /* [51][0][][] */ 127,-42,-51,-14,-47,88,-93,-41,45,-20,-39,67,-30,-66,0,41, 
  /* [52][0][][] */ -29,-62,38,70,-56,-119,-127,-11,-59,-64,-28,-67,15,-67,4,94, 
  /* [53][0][][] */ 24,96,52,-127,3,105,95,-17,-15,-29,-4,-37,82,-114,4,59, 
  /* [54][0][][] */ 36,127,12,-17,0,-87,-110,48,9,-20,-46,125,81,86,24,58, 
  /* [55][0][][] */ -51,-20,50,24,48,-42,121,91,-84,-9,27,15,127,50,-12,4, 
  /* [56][0][][] */ 127,24,19,24,-47,106,-56,-76,-21,46,-84,8,-55,96,-5,33, 
  /* [57][0][][] */ -45,-33,-53,-31,-71,-102,61,-27,-127,-26,52,50,18,41,-5,48, 
  /* [58][0][][] */ 44,-58,58,25,4,-68,-14,10,25,-11,-127,-28,25,-34,-40,49, 
  /* [59][0][][] */ 82,18,-127,99,13,40,86,-34,-71,-47,28,-108,-123,-65,34,112, 
  /* [60][0][][] */ 1,31,-13,18,-13,-26,-25,0,-30,-77,56,117,-47,-127,-32,-8, 
  /* [61][0][][] */ -38,10,75,-98,-78,48,9,126,-22,-100,64,69,88,2,9,127, 
  /* [62][0][][] */ 81,47,-8,-127,-15,5,5,-40,-3,33,-38,47,27,-22,-87,-79, 
  /* [63][0][][] */ -3,-30,-3,-6,-67,-72,-52,13,-73,-14,-30,-18,127,8,49,-9, 
  /* [64][0][][] */ 24,-3,-24,54,-119,-49,-18,-83,59,127,45,-1,41,-51,-49,122, 
  /* [65][0][][] */ -32,5,-24,-17,-83,72,29,-24,50,-111,101,-63,68,63,-127,64, 
  /* [66][0][][] */ -120,103,-89,-95,46,-28,-119,-76,-98,121,88,9,-127,-67,50,52, 
  /* [67][0][][] */ 4,-28,-127,-108,62,73,8,-23,-27,-5,47,-22,26,40,17,44, 
  /* [68][0][][] */ 49,19,-19,-46,-66,33,21,34,-56,64,127,-17,-7,-38,-117,2, 
  /* [69][0][][] */ 70,-106,50,-45,16,-113,-26,127,-3,60,85,81,-17,76,-30,0, 
  /* [70][0][][] */ 42,2,108,45,91,-26,127,20,25,18,-58,41,-66,68,-79,40, 
  /* [71][0][][] */ 11,33,101,-71,-127,-77,12,5,-21,-10,18,-107,-80,-1,14,29, 
  /* [72][0][][] */ -58,-94,26,-126,78,-10,6,49,-69,17,-127,-20,61,122,-57,116, 
  /* [73][0][][] */ 22,17,47,-3,127,-97,-48,11,-36,103,-88,31,-89,-56,125,-15, 
  /* [74][0][][] */ -99,6,-119,-74,70,-38,-44,18,-78,7,-127,-32,-40,-65,-36,76, 
  /* [75][0][][] */ 93,-21,51,-42,22,7,-127,-23,-2,-93,64,1,-1,-16,-4,-12, 
  /* [76][0][][] */ 7,-52,-33,115,44,98,100,-68,90,-127,66,123,39,-96,-66,38, 
  /* [77][0][][] */ -33,-30,127,-26,38,-25,-31,-118,23,22,30,85,44,45,20,-3, 
  /* [78][0][][] */ -46,6,17,-36,1,-52,31,-14,26,-13,14,-95,-106,-74,-127,-53, 
  /* [79][0][][] */ -106,-82,-28,27,127,27,-11,22,22,35,-12,48,-40,-70,-74,-13, 
  /* [80][0][][] */ 6,-121,54,127,-40,-25,-116,80,-5,20,67,2,-83,-16,-17,66, 
  /* [81][0][][] */ 106,58,-22,78,-6,32,27,127,15,8,114,58,112,35,55,-16, 
  /* [82][0][][] */ -54,-1,11,-29,31,-127,-111,-84,1,77,-40,-36,-25,102,-72,-22, 
  /* [83][0][][] */ 104,-24,85,-29,-45,-11,-127,-1,20,-124,16,-54,-17,-7,11,-21, 
  /* [84][0][][] */ 18,-63,-88,27,127,43,33,28,-106,23,-108,-27,44,-38,-66,10, 
  /* [85][0][][] */ 16,89,45,-49,93,5,40,-113,127,-35,34,-14,88,-78,12,-2, 
  /* [86][0][][] */ 122,-34,127,50,4,-60,75,38,-61,-52,-100,-51,37,21,-64,8, 
  /* [87][0][][] */ -3,9,20,-78,72,-26,-46,11,37,-36,70,-37,-84,-127,-1,20, 
  /* [88][0][][] */ -61,-34,38,-4,23,28,-66,-47,-2,10,-72,-127,-47,-40,-20,-15, 
  /* [89][0][][] */ -69,15,24,-66,29,8,-127,19,84,22,-70,-7,-11,-79,-40,-24, 
  /* [90][0][][] */ -15,-20,-37,-80,127,15,-56,45,40,59,35,-16,37,23,-74,-16, 
  /* [91][0][][] */ -39,-60,27,56,-51,-5,-14,79,-46,-54,23,-52,0,66,27,127, 
  /* [92][0][][] */ -27,72,-3,-15,-23,55,-89,51,-41,-13,67,3,-31,127,46,27, 
  /* [93][0][][] */ -5,77,-48,-72,72,83,-82,3,66,65,70,57,-127,21,-37,72, 
  /* [94][0][][] */ 22,61,92,9,-127,-41,14,-7,17,-22,30,-17,-53,-18,13,-21, 
  /* [95][0][][] */ 2,28,49,10,127,-18,-90,74,21,11,-88,107,2,13,115,-35, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014690030366182327, 0.0022688149474561214, 0.0014875674387440085, 0.0013577520148828626, 0.0012479788856580853, 0.0018779062665998936, 0.0014179109130054712, 0.0025579000357538462, 0.0020681037567555904, 0.0021617121528834105, 0.0018360328394919634, 0.0015491461381316185, 0.0012580130714923143, 0.0013797985156998038, 0.0014872222673147917, 0.001665236777625978, 0.0021383478306233883, 0.0017252268735319376, 0.0017957929521799088, 0.0015667425468564034, 0.0022961639333516359, 0.0021336288191378117, 0.0018841561395674944, 0.0015640847850590944, 0.0018524196930229664, 0.0020019791554659605, 0.0022382684983313084, 0.0019417863804847002, 0.0014156508259475231, 0.0026063991244882345, 0.0012448754860088229, 0.0017258323496207595, 0.0022285294253379107, 0.0012554089771583676, 0.0011203325120732188, 0.0015184212243184447, 0.0027139582671225071, 0.0016013497952371836, 0.0017486747819930315, 0.0010687501635402441, 0.0018736866768449545, 0.0018155580619350076, 0.0021897200495004654, 0.0020539569668471813, 0.0023120776750147343, 0.001675664447247982, 0.0017730015097185969, 0.0016106445109471679, 0.00081773509737104177, 0.001798675861209631, 0.0028230655007064342, 0.0014072224730625749, 0.0013441391056403518, 0.0019248260650783777, 0.0017939808312803507, 0.0014894354389980435, 0.0021107252687215805, 0.0012267827987670898, 0.0024358490481972694, 0.0019418713636696339, 0.0026522020343691111, 0.0013177505461499095, 0.0017264275811612606, 0.0017876061610877514, 0.0014267950318753719, 0.0018222959479317069, 0.0014780928613618016, 0.0013774170074611902, 0.0016089424025267363, 0.0020400413777679205, 0.0024981074966490269, 0.0012772961053997278, 0.0014598779380321503, 0.0018003963632509112, 0.001559864729642868, 0.0014666009228676558, 0.0014133158838376403, 0.0021467597689479589, 0.0016941911308094859, 0.0015202690847218037, 0.00072043872205540538, 0.0016456523444503546, 0.0020616729743778706, 0.0018022861331701279, 0.0019756352994590998, 0.0013278528349474072, 0.0023184355814009905, 0.0017604412278160453, 0.0015714198816567659, 0.0015131151303648949, 0.0016153878532350063, 0.0012992449337616563, 0.0017826519906520844, 0.0015679033240303397, 0.0022437581792473793, 0.0018942735623568296, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 10742, 16497, -3800, 2871, 442, 9868, 503, 3396, 16692, -4867, -9691, 9568, -16031, 10274, 3896, 6822, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.2310169849079102e-05, 6.3674197008367628e-05, 5.130982754053548e-05, 6.4847234170883894e-05, 6.7020424467045814e-05, 7.3344410338904709e-05, 4.7298181016230956e-05, 5.6983146350830793e-05, 9.2088994279038161e-05, 6.3451589085161686e-05, 5.4421088862000033e-05, 5.1883154810639098e-05, 6.3561521528754383e-05, 5.6935743486974388e-05, 8.6449399532284588e-05, 6.4905216277111322e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -110,37,58,-25,-77,-9,-73,-3,-52,9,-9,-28,31,47,35,-36,11,-5,98,16,9,-55,127,73,51,25,1,33,-70,-119,-95,3,-42,-51,23,23,7,23,1,26,-10,-7,-80,6,-75,-21,3,92,-18,18,-44,-21,-6,-1,23,-54,-104,4,-16,80,60,31,0,1,-29,-50,-50,22,-53,-71,5,-15,12,-6,-76,-51,-49,11,-37,2,-57,72,85,-80,15,55,10,48,30,-23,-9,-28,-40,-38,-58,10, 
  /* [1][0][][] */ 32,21,22,-53,-69,-20,-6,16,-19,21,58,-52,8,-7,-72,-38,-14,-4,-72,33,-18,-82,14,47,-5,-66,-9,-46,66,-109,109,-75,61,20,-23,56,35,77,-8,-47,37,15,1,-18,2,66,-127,-48,-60,-51,-17,-30,37,-54,-41,52,14,-4,-36,19,24,52,-5,-108,-12,-11,-65,-10,3,-20,-90,-16,-41,-19,20,-74,5,19,30,-68,-25,-27,-90,-36,40,-35,-26,25,-83,-8,-57,45,17,59,-56,51, 
  /* [2][0][][] */ 88,-37,24,18,23,-77,62,8,-13,-9,-15,-9,-81,-33,14,-32,-96,-46,-34,49,11,-49,-42,32,-4,-73,13,-23,-27,47,-52,122,-57,127,-24,19,-9,-16,-21,-13,-98,80,69,16,-59,3,-20,-8,33,1,-29,-48,46,-15,-19,62,37,-3,51,-4,6,40,-35,14,70,8,-1,-4,24,57,-43,-4,49,45,62,34,35,-67,72,53,85,-10,-37,30,-61,31,18,73,21,8,-25,33,-44,54,-18,35, 
  /* [3][0][][] */ 5,-6,-17,10,15,-13,5,-55,-25,53,33,54,24,-15,-48,38,8,-31,31,9,16,127,28,-39,6,18,-16,7,66,-37,62,-13,-23,35,-25,-30,22,45,30,12,-75,-30,-41,29,-27,28,23,-4,-20,-50,-6,-21,49,-76,-29,-48,9,82,-24,-4,-11,-7,-45,7,23,42,-37,2,-23,3,14,-65,-34,-48,30,-12,15,-2,-31,-30,-27,-10,-49,14,-15,-41,29,-24,1,19,25,-17,49,27,-35,59, 
  /* [4][0][][] */ 27,8,-43,18,23,24,-45,9,-30,74,94,-14,-10,4,1,-48,14,-13,-29,43,19,-48,53,81,-67,5,-127,14,-45,-60,6,11,-55,-51,13,58,11,32,24,27,-32,-44,46,-22,-7,13,-29,47,-41,57,14,14,44,-16,-82,17,43,-17,7,-9,48,-7,30,5,-49,18,-38,4,-50,24,-48,49,38,-64,-36,-43,23,-59,-9,9,-46,80,-76,-2,-22,24,29,-57,51,4,29,10,-57,-29,35,30, 
  /* [5][0][][] */ -84,37,44,-4,46,-22,60,-46,-13,31,-4,-28,38,-19,-26,-42,-7,-40,53,26,-126,-26,-81,47,-43,-6,44,9,41,-79,-20,50,62,119,-18,42,-4,19,51,-17,-29,98,79,-33,-6,73,47,-8,-6,19,-27,26,14,-44,27,-95,39,-52,-69,-64,65,105,-50,-24,80,-45,-85,-71,-57,-27,-67,-8,-25,16,-25,-44,19,-48,-40,-22,127,-25,20,-98,-82,37,41,-16,-55,42,27,-7,-21,33,9,95, 
  /* [6][0][][] */ 48,-15,-90,25,-41,-119,112,102,-70,79,-12,84,-127,-91,66,66,-5,-63,-10,8,-2,-22,-69,-70,-58,53,90,35,34,41,103,-58,27,13,18,-74,13,11,35,75,6,16,-61,-27,3,-68,-84,28,44,-125,-22,80,34,8,-25,-71,80,51,10,4,-122,53,-104,3,26,8,-3,58,37,29,-6,-59,-34,18,107,31,65,-26,41,-82,-12,-52,-77,71,9,-64,50,15,-46,67,40,44,-24,20,-40,124, 
  /* [7][0][][] */ 35,84,-38,-55,-21,-11,36,14,-57,35,-51,-53,-34,13,14,-8,-49,-43,-33,58,-7,127,13,32,-5,4,24,29,48,46,81,-32,65,33,-19,12,4,-10,-1,33,-61,-4,9,-55,16,-48,72,-25,38,-78,-82,-25,-49,11,2,-17,28,17,-103,8,-9,108,16,-21,-26,3,-43,18,-42,-13,-102,35,11,63,-34,42,-52,56,7,-74,-19,-51,63,-73,39,-19,-7,2,-7,71,-86,49,55,-29,-45,9, 
  /* [8][0][][] */ -14,78,-49,45,-39,-25,-81,23,-92,-32,9,0,-39,42,27,83,8,-51,4,8,27,-2,8,-8,-33,78,-7,22,-18,-23,-46,-29,-17,-57,-33,-66,-43,21,52,7,-5,-39,31,12,-40,-30,13,-18,-21,-12,46,64,2,-24,-75,93,-34,33,-7,-43,-33,12,22,47,-29,-57,-41,-14,-42,1,-1,0,-23,-45,-114,-12,-50,21,-60,-35,-32,-3,-46,-38,4,-2,24,27,8,65,-53,-6,-91,-127,26,-48, 
  /* [9][0][][] */ -10,19,-67,42,-29,-36,65,56,-9,46,-26,89,-30,-24,27,127,9,15,74,18,22,17,36,-87,-37,-6,29,-6,15,-18,43,47,-31,3,3,-115,29,-18,-26,-22,-11,22,37,-27,-11,0,15,21,34,80,27,-6,-58,-73,2,-3,1,-12,70,-15,-66,51,-62,-23,80,-14,-21,10,-67,31,39,39,-5,82,-21,-27,-26,23,-38,-7,54,-25,65,1,23,-14,-16,-31,-50,17,-2,-3,66,37,-43,1, 
  /* [10][0][][] */ 76,0,-38,-5,-29,-35,66,5,6,-28,-23,-4,-90,-21,8,-8,-68,-27,21,19,42,37,24,0,-50,75,43,-3,-45,-71,-28,-16,70,-31,51,8,71,-84,78,127,12,-54,2,7,-17,-93,-14,66,29,79,-69,-38,-25,31,20,52,17,-63,80,53,-15,42,-67,-15,-10,-64,24,60,21,-19,-6,42,114,31,22,-86,32,-42,49,-12,-45,37,38,28,-42,-12,2,45,-38,-13,24,50,55,68,-34,6, 
  /* [11][0][][] */ -56,-44,40,-74,19,-10,-34,-42,49,-47,-2,-2,-18,-4,1,9,-70,1,68,9,-63,20,-77,-86,18,22,-51,46,33,-65,39,-39,18,-3,20,-23,-79,10,-127,13,-72,66,-46,54,16,13,-4,-41,18,-41,-64,-56,17,32,85,-65,-28,-74,14,-53,-29,-61,-30,-125,6,-68,68,76,120,19,76,-18,-37,-19,71,-41,103,43,21,54,33,-16,-22,89,88,10,-13,-18,-82,-71,-18,31,60,46,64,77, 
  /* [12][0][][] */ 43,-20,1,-42,39,102,-8,34,41,55,-3,55,16,42,19,4,-65,51,17,52,127,1,63,-69,28,19,-62,-63,-16,82,6,7,25,-4,12,-37,47,2,-36,-38,20,-20,41,52,-19,32,-2,-4,-63,22,3,26,-29,-21,16,20,-36,54,13,52,21,-94,8,-90,-9,86,-10,-29,-4,-36,64,9,-4,13,-5,42,-7,53,-76,-16,-17,35,122,20,-13,72,-33,-65,74,8,-82,48,74,12,-19,-92, 
  /* [13][0][][] */ -2,38,-12,-49,-28,-5,7,-30,19,-27,-35,-75,63,-110,-37,-75,-20,-30,-86,-12,-92,-29,22,103,-27,10,115,11,24,-37,59,41,7,5,-115,127,-26,-48,22,-59,118,15,-6,22,-6,-95,58,-25,81,-14,-39,31,20,0,0,69,72,-56,-39,-2,45,40,-6,-79,-5,37,-34,38,-72,-32,-77,-2,-60,16,-42,-90,-101,26,33,84,-15,65,41,-85,48,47,29,-10,-12,-14,-14,23,-53,22,-27,-8, 
  /* [14][0][][] */ -5,22,-79,-27,83,91,-86,-6,32,-43,71,-5,15,-26,-37,-63,-70,18,37,127,8,-22,-3,11,0,35,-33,69,10,-6,-24,12,60,-1,-40,2,-19,59,71,9,62,2,30,-1,-14,-42,60,-36,24,-12,-10,-22,43,17,-36,28,12,58,-88,-11,-18,-65,-44,-97,13,-41,-47,-5,-72,53,-16,33,1,-26,-21,-36,38,-12,-51,-27,31,2,0,-14,-11,46,-12,-16,-32,65,62,16,0,-39,-40,-66, 
  /* [15][0][][] */ -64,-39,46,-58,22,-31,-32,-82,-11,13,-6,66,-5,-27,36,88,-103,-15,13,-71,35,-26,-14,-90,45,-10,53,-50,-57,-102,-62,34,-42,62,93,-97,-11,-38,16,-20,-25,0,29,-12,6,-8,60,103,-45,-13,18,-36,-42,59,21,-54,-98,-18,103,17,-33,11,-88,36,-66,-13,13,32,52,-64,92,-26,56,-41,-35,-43,18,26,42,4,-19,76,60,39,-5,-18,-127,8,-10,-48,-77,29,50,-31,-30,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022231822367757559, 0.0027061533182859421, 0.0021806675940752029, 0.0027560072485357523, 0.0028483679052442312, 0.0031171373557299376, 0.0020101726986467838, 0.0024217837490141392, 0.0039137820713222027, 0.0026966924779117107, 0.0023128963075578213, 0.0022050340194255114, 0.0027013644576072693, 0.0024197690654546022, 0.0036740994546562433, 0.0027584717608988285, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 642, 452, -2022, -4619, -1210, 2908, -267, -617, -892, -1221, 10613, -1850, -1306, 10913, 7105, -4714, 13658, 2101, -3979, 319, -105, -3407, 1180, -1605, 1020, -4132, 780, -4144, 777, -8148, -633, -268, 10748, -881, -841, -64, -64, -1385, -994, 7565, 141, 548, 1221, -5458, 13691, 12480, -907, 15920, 613, 11636, 15304, -3889, -1023, 261, 6, 9301, -722, -786, 15468, 5948, 7952, 11807, 7815, -8035, 277, 1045, -2156, 2711, -3478, -1702, 2406, 2171, 11740, -176, -1314, 9156, -64, -363, 9091, -1378, 70, 16087, 49, 2147, 18774, 2225, -3754, -2819, 705, -4992, 11294, 482, -1636, -486, -4717, -2754, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00031368900090456009, 0.00017308327369391918, 0.00012428768968675286, 0.00017361486970912665, 0.00024345311976503581, 0.00023375425371341407, 0.00032613924122415483, 0.00020780027261935174, 0.00020680195302702487, 0.00017582977307029068, 0.00011407132842577994, 0.00035179220139980316, 0.00026430844445712864, 0.00012270553270354867, 0.00016032838902901858, 0.00014364445814862847, 0.0001148921946878545, 0.0001727236231090501, 0.00020067385048605502, 0.00011757596075767651, 0.00016343127936124802, 0.00032255105907097459, 0.00014426738198380917, 0.00017847138224169612, 0.00040484796045348048, 0.00021072849631309509, 0.00030756214982829988, 0.00014703847409691662, 0.0002296186430612579, 8.3039056335110217e-05, 0.00038101919926702976, 0.00019562611123546958, 0.00018997667939402163, 0.00019202180556021631, 0.0002724102814681828, 0.00043234572513028979, 0.00016746105393394828, 0.00036548162461258471, 0.00043134528095833957, 0.00014923828712198883, 0.00020842447702307254, 0.00029958033701404929, 0.00023681188758928329, 0.00013190750905778259, 8.8797089119907469e-05, 0.00012053373939124867, 0.00021434621885418892, 0.0001058074485627003, 0.00022952764993533492, 9.9357101134955883e-05, 0.00014397758059203625, 0.00012255822366569191, 0.00016104838869068772, 0.00014119775732979178, 0.00021673613809980452, 0.00020476269128266722, 0.00023034188780002296, 0.00023847016564104706, 0.00016199695528484881, 0.00014880231174174696, 0.00016085740935523063, 0.00019255722872912884, 0.0001378485030727461, 0.0001224543375428766, 0.00020547444000840187, 0.00019977228657808155, 0.00028098322218284011, 0.00022029758838471025, 0.00022007258667144924, 0.00018955272389575839, 0.00023701085592620075, 0.00013991254672873765, 0.00010113473399542272, 0.00028668501181527972, 0.00035255125840194523, 0.00013784052862320095, 0.00014649030345026404, 0.00016322400188073516, 0.00015706662088632584, 0.00022585125407204032, 0.00039157053106464446, 0.00011086146696470678, 0.00024578909506089985, 0.00016280036652460694, 7.0479713031090796e-05, 0.00018893420929089189, 0.00016240234253928065, 0.00022945721866562963, 0.00024317658971995115, 0.00024476007092744112, 0.00010972316522384062, 0.00041960319504141808, 0.0002306782262166962, 0.00034996922477148473, 0.00014514804934151471, 0.0003851229848805815, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 23,127,-10,19,-26,2,34,49,54,-62,-74,44,-5,-11,37,-56,-107,18,13,29,36,73,71,105,15,-3,-46,0,-6,10,19,-15,-44,9,-37,82,-11,32,6,-10,28,-41,-3,36,-105,-30,14,-30,-27,-81,-39,-8,17,61,-23,-7,-75,-55,-49,-127,-127,5,-87,0,-31,44,30,-17,-20,42,32,-10,-23,13,47,1,-4,-34,-81,26,6,-88,51,-36,-78,-53,-12,6,-113,8,-73,32,73,-3,66,-3, -44,-37,-8,87,-4,90,-30,1,60,32,-127,72,-20,-70,-85,127,-125,68,43,84,127,19,107,127,27,23,16,48,8,127,-9,-127,64,88,0,35,64,84,-21,-127,127,-14,84,127,-49,-66,127,-89,-17,-127,-102,-34,13,127,-26,-127,8,33,-123,-75,-55,-127,-49,93,-35,86,99,-29,4,127,127,-2,-68,30,-30,-93,29,-56,-14,127,-6,-76,127,-61,-115,-50,102,45,106,96,-72,-2,127,-23,127,29, 18,-102,2,8,-12,-14,-14,53,29,70,-56,14,-3,36,12,-85,-43,13,4,22,31,57,51,98,16,-29,21,42,11,15,-10,-54,-38,-76,-37,54,-10,-11,17,20,-7,29,-20,63,-29,-8,3,-8,22,-58,9,5,4,-3,6,-1,55,-67,-13,-80,-90,27,-74,-6,33,13,-45,-10,-22,-5,5,10,-8,-35,-4,10,1,-14,-80,2,1,-99,29,-11,-8,-39,-5,-26,-91,-5,-13,27,23,41,25,-12, 
  /* [0][1][][] */ 86,-11,55,111,7,-48,127,49,-25,-127,-108,127,2,-126,-55,26,-67,-49,66,26,-119,6,-127,-86,-15,51,-127,127,-95,88,127,86,20,64,13,127,-127,55,-23,-69,60,-127,16,79,-127,-71,6,-127,-122,-114,-127,23,127,-69,77,-17,-127,3,-70,-4,-51,-74,-37,56,-97,-18,86,-91,-38,27,-49,-127,-127,67,127,-72,95,74,-90,-41,127,-127,-28,108,-52,-18,4,78,-8,20,-65,23,-4,-77,80,-14, -127,-4,-55,127,-83,-127,-113,-127,73,-6,-79,34,-83,-127,-41,123,-127,-127,127,127,26,-127,-115,94,-127,127,5,66,-94,-33,-101,88,-127,94,127,-26,36,127,127,-99,-45,22,18,29,-57,-127,-69,-110,-12,-123,-98,127,34,80,67,-71,25,23,79,-37,-40,-49,-127,127,-7,-127,127,127,26,66,-103,-79,-28,49,-104,-127,127,127,101,-43,-86,-2,-103,65,-114,-105,127,127,127,127,-127,-127,-85,-58,82,127, 48,-15,93,58,6,-25,3,37,-40,109,-72,64,14,-18,-127,70,30,-42,20,-5,-120,11,-82,-88,-6,18,117,0,127,126,16,-109,-26,-127,-14,118,-118,3,-35,-52,-11,94,17,119,-18,-15,-6,-87,127,-83,-102,5,66,-98,-127,25,105,0,-127,76,-11,-47,-5,59,127,-40,-34,-14,-48,-10,-42,-48,-117,-127,-2,-34,-9,-22,-127,-38,-75,-109,-14,127,-127,9,-7,-2,-36,-18,-6,38,-13,127,27,-14, 
  /* [0][2][][] */ 28,-127,36,-18,13,19,33,57,-34,-46,0,-42,16,-7,2,41,-7,23,-11,37,-6,51,6,-41,12,52,-12,-6,-31,14,6,30,-25,-13,-25,-1,45,-11,1,-30,-5,13,-18,-34,-23,-39,-10,-13,-21,36,-42,36,-5,-7,-36,-14,-9,-1,-7,26,-34,-10,35,-6,-29,49,-55,-25,28,2,5,75,-5,17,22,8,-43,-31,-24,2,18,-18,-16,-32,-69,30,-32,-20,-86,40,1,18,-7,7,13,-18, -54,5,127,0,127,69,-26,17,-127,1,-100,-50,127,-32,-51,34,25,58,-7,-48,16,19,48,-3,55,-47,-16,26,-25,120,-12,23,-82,32,11,-24,75,46,23,-110,-27,-7,-127,-1,-19,-18,-34,-76,-13,-53,-64,97,119,-75,-31,-79,-12,127,-49,-1,63,-112,73,69,-20,17,-38,13,127,-9,4,94,-87,13,-16,-58,-18,-73,-51,-36,-2,-85,-36,-60,-69,127,38,3,88,45,28,19,-24,-10,2,-2, 12,84,32,-30,4,-6,-16,48,9,53,19,-4,5,-4,0,38,-12,4,-9,23,-19,43,-7,-45,3,45,6,27,2,20,-19,-71,-41,-18,-20,-10,32,-28,-2,-21,-6,-13,1,1,-34,-27,-11,-6,14,41,-32,17,-6,-21,9,3,3,6,-5,67,-30,8,17,-14,37,15,-71,3,20,-6,5,74,32,-15,-3,6,-21,-9,-18,5,-5,-46,-12,-6,-43,19,-38,-25,-83,33,17,14,-14,9,-7,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013331782072782516, 0.0073560392484068871, 0.0052822264842689037, 0.0073786317370831966, 0.010346757248044014, 0.0099345557391643524, 0.013860917650163174, 0.0088315112516283989, 0.0087890829890966415, 0.0074727651663124561, 0.0048480313271284103, 0.014951168559491634, 0.01123310811817646, 0.0052149849943816662, 0.0068139564245939255, 0.0061048893257975578, 0.0048829182051122189, 0.0073407539166510105, 0.008528638631105423, 0.0049969782121479511, 0.0069458293728530407, 0.013708419166505337, 0.0061313635669648647, 0.0075850333087146282, 0.017206037417054176, 0.0089559610933065414, 0.013071390800178051, 0.0062491348944604397, 0.0097587918862700462, 0.0035291598178446293, 0.016193315386772156, 0.0083141094073653221, 0.0080740088596940041, 0.0081609264016151428, 0.011577436700463295, 0.018374692648649216, 0.0071170944720506668, 0.015532968565821648, 0.018332174047827721, 0.0063426271080970764, 0.0088580399751663208, 0.01273216400295496, 0.010064505040645599, 0.0056060692295432091, 0.0037738762330263853, 0.0051226839423179626, 0.0091097140684723854, 0.0044968165457248688, 0.0097549250349402428, 0.0042226766236126423, 0.0061190472915768623, 0.0052087246440351009, 0.0068445564247667789, 0.0060009043663740158, 0.0092112859711050987, 0.0087024141103029251, 0.0097895301878452301, 0.010134981945157051, 0.0068848705850541592, 0.0063240979798138142, 0.0068364394828677177, 0.0081836823374032974, 0.0058585610240697861, 0.005204309243708849, 0.0087326634675264359, 0.008490322157740593, 0.011941786855459213, 0.0093626473098993301, 0.0093530844897031784, 0.0080559905618429184, 0.010072961449623108, 0.0059462832286953926, 0.0042982259765267372, 0.012184113264083862, 0.01498342864215374, 0.0058582224883139133, 0.0062258378602564335, 0.0069370199926197529, 0.006675331387668848, 0.0095986779779195786, 0.016641747206449509, 0.0047116121277213097, 0.010446036234498024, 0.0069190156646072865, 0.0029953876510262489, 0.0080297039821743965, 0.0069020995870232582, 0.0097519317641854286, 0.010335004888474941, 0.01040230318903923, 0.0046632345765829086, 0.017833136022090912, 0.0098038241267204285, 0.014873691834509373, 0.0061687920242547989, 0.016367726027965546, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 7391, 4472, 1261, -1193, 5022, 13214, 8195, 1637, -343, 9004, 1029, -4066, 3178, 3595, 371, -495, 3690, 9347, -694, 60, 4599, 15866, 9095, -1503, -3736, -902, 11763, 137, 1680, 1168, 9293, -1609, 10739, 3173, 4131, -4518, 999, -5233, 338, 2269, 2301, 1539, 1990, -459, 670, 2070, 4755, 4070, 3743, 3011, 4623, 2903, -2195, 1547, 1196, 1819, 1564, 2053, 9861, 1551, -947, 5082, 5738, 4182, 4468, 5325, -3981, 2357, 5844, -627, 5336, 1890, 3356, 3267, 3917, 2182, -378, 2314, 2569, 3384, 3562, 3897, 8943, 528, 2460, 5048, 724, -981, 15271, -566, 1033, -1489, 12744, 3404, 54, -1127, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001022134383674711, 8.2606056821532547e-05, 0.00011573610390769318, 0.00017254908743780106, 0.00014065575669519603, 6.1336540966294706e-05, 9.9821510957553983e-05, 0.00015715541667304933, 0.00016410261741839349, 8.5847779700998217e-05, 0.00017691301763989031, 0.00011859088408527896, 0.00015979765157680959, 0.00013349264918360859, 0.00019475526642054319, 0.00015271591837517917, 0.00016563199460506439, 7.9893878137227148e-05, 0.00011233729310333729, 0.00016971321019809693, 0.00013484683586284518, 5.7281617046101019e-05, 9.3882503279019147e-05, 0.00016901877825148404, 0.00015101507597137243, 0.00013802759349346161, 7.559666846645996e-05, 0.00013907488028053194, 0.00015784478455316275, 0.00016349270299542695, 8.864306437317282e-05, 0.00017739995382726192, 7.4475305154919624e-05, 0.00014575367094948888, 0.00017119660333264619, 0.00013156177010387182, 0.00014028362056706101, 0.00011280802573310211, 0.00012333528138697147, 0.00013252459757495672, 0.00018834101501852274, 0.00016034646250773221, 0.00017904341802932322, 0.0002024351415457204, 0.00032759865280240774, 0.00018761918181553483, 0.00011498149979161099, 0.00015119439922273159, 0.00015908258501440287, 0.00016472679271828383, 0.00015172876010183245, 0.00015073081885930151, 0.00015558328595943749, 0.00023707172658760101, 0.00021330721210688353, 0.00021737530187238008, 0.00021216149616520852, 0.00017194605607073754, 8.3865379565395415e-05, 0.00013931393914390355, 0.00020283329649828374, 0.00013946436229161918, 9.9333403341006488e-05, 0.00014655590348411351, 0.00012847060861531645, 0.00014201198064256459, 0.0001450276467949152, 0.00018285420082975179, 0.00010425529035273939, 0.00023393977608066052, 0.00013172224862501025, 0.00011385290417820215, 0.00012656617036554962, 0.00012288930884096771, 0.00013603930710814893, 0.00012210414570290595, 0.00017994563677348197, 0.00015183551295194775, 0.00013957449118606746, 0.00014992318756412715, 0.00012587672972586006, 0.00010842494521057233, 8.7343156337738037e-05, 0.00017743659554980695, 0.00015044664905872196, 0.00013606790162157267, 0.0002041408879449591, 0.00021546489733736962, 6.248482532100752e-05, 0.00015324850392062217, 0.00016469552065245807, 0.0001373064296785742, 6.600374763365835e-05, 0.00011840664956253022, 0.00019448815146461129, 0.00012526236241683364, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -49,54,-3,-31,-21,-63,-69,-30,57,-44,31,-60,78,-109,9,-127, 
  /* [1][0][][] */ -98,73,-103,-118,-73,23,-18,61,-52,1,100,-57,42,127,25,49, 
  /* [2][0][][] */ -47,-14,-73,11,-7,-45,29,-44,-86,127,71,13,53,54,-41,116, 
  /* [3][0][][] */ -56,-75,8,-39,-82,14,-58,-122,-3,19,43,-73,-70,-41,-127,-48, 
  /* [4][0][][] */ 83,9,-22,37,-66,-3,-127,35,16,69,15,58,11,6,-45,-94, 
  /* [5][0][][] */ -97,66,-89,-26,51,-65,-22,-91,103,-28,11,-50,22,-127,-125,-106, 
  /* [6][0][][] */ -13,-34,-30,27,-80,73,41,-38,-26,-48,127,-29,-6,2,-117,8, 
  /* [7][0][][] */ -23,105,127,-90,65,83,-1,-67,47,60,-91,-10,60,2,26,72, 
  /* [8][0][][] */ -53,4,32,-9,46,7,99,127,-72,-26,-60,-79,37,94,-60,-54, 
  /* [9][0][][] */ 42,54,108,19,-107,-41,-112,-113,66,21,127,23,-41,-103,49,-33, 
  /* [10][0][][] */ -16,-111,2,-74,-127,62,40,36,-35,-52,0,31,-17,62,-116,29, 
  /* [11][0][][] */ 115,-64,-17,96,-124,-43,65,-1,123,127,-45,39,24,-80,-20,122, 
  /* [12][0][][] */ -62,-66,127,-7,60,-11,26,59,68,-24,97,72,-26,9,-95,31, 
  /* [13][0][][] */ 1,-26,16,27,8,4,127,34,-100,7,4,7,-23,115,99,-65, 
  /* [14][0][][] */ 115,-89,127,10,64,55,97,68,79,70,60,44,60,-40,37,-53, 
  /* [15][0][][] */ -9,122,4,-43,38,125,-72,73,-47,-23,-35,-18,-47,127,-26,-48, 
  /* [16][0][][] */ -42,62,102,-39,17,72,6,-3,-12,15,-10,39,87,6,91,127, 
  /* [17][0][][] */ 11,115,88,-127,30,-49,3,-85,-52,96,-35,63,-64,-35,113,-59, 
  /* [18][0][][] */ -87,-2,-78,-85,110,86,-41,-60,35,77,127,70,-2,108,-46,-2, 
  /* [19][0][][] */ 43,127,90,75,50,-31,-6,2,-35,121,49,115,70,71,-58,43, 
  /* [20][0][][] */ 101,-5,3,66,-70,-11,-36,55,-28,-47,-127,-36,87,-52,42,-13, 
  /* [21][0][][] */ -82,-67,-17,106,-25,-1,-127,67,8,2,25,17,-42,27,-55,4, 
  /* [22][0][][] */ -2,4,-62,-45,127,-4,-39,58,61,78,37,70,-20,22,-9,28, 
  /* [23][0][][] */ -66,23,-13,9,21,58,100,80,-19,127,-25,-33,-6,27,-66,-34, 
  /* [24][0][][] */ 25,-88,36,8,127,40,76,-32,54,29,51,27,-70,38,-10,-14, 
  /* [25][0][][] */ 122,-67,84,28,8,-6,-30,94,124,-29,-53,10,127,-64,94,48, 
  /* [26][0][][] */ 61,44,122,98,78,-10,-81,-12,1,78,14,127,35,-76,24,-66, 
  /* [27][0][][] */ -58,42,-73,28,-27,127,12,-104,40,-96,124,25,52,-53,126,106, 
  /* [28][0][][] */ -43,30,-83,-127,30,-79,5,-48,-102,87,-53,37,-21,26,-36,73, 
  /* [29][0][][] */ 85,98,-81,41,36,83,-41,-18,45,52,12,59,-127,20,-27,81, 
  /* [30][0][][] */ -31,88,-118,-59,81,-42,16,10,-62,58,-73,-14,5,72,-11,127, 
  /* [31][0][][] */ 18,-110,76,41,58,-68,-70,35,-23,-5,26,-40,-72,59,30,127, 
  /* [32][0][][] */ -64,62,-10,38,-102,61,21,67,22,-127,36,-94,35,43,36,49, 
  /* [33][0][][] */ -73,-11,54,82,-9,14,-44,19,-41,-50,16,-13,-10,3,14,127, 
  /* [34][0][][] */ -15,6,-89,-95,59,-15,-8,65,23,-7,0,-18,-57,-23,-36,127, 
  /* [35][0][][] */ 71,-7,20,-10,-3,20,-69,-23,-19,-127,-53,13,-2,-27,48,-23, 
  /* [36][0][][] */ -4,23,-127,-20,29,117,-2,44,-31,8,64,33,18,33,-70,54, 
  /* [37][0][][] */ 65,42,70,-63,69,-127,36,-27,-110,59,-100,-21,12,17,97,30, 
  /* [38][0][][] */ -44,127,37,-39,37,18,68,-89,10,6,-115,30,-59,-100,-93,12, 
  /* [39][0][][] */ 90,49,-124,-127,-20,-27,13,-63,5,-3,4,-42,68,9,-123,-74, 
  /* [40][0][][] */ -34,20,-70,-85,-42,-13,24,-127,-4,-14,4,-30,36,74,33,61, 
  /* [41][0][][] */ -41,-91,-8,127,-1,-20,-67,-13,-2,-48,64,-65,-65,-8,3,23, 
  /* [42][0][][] */ -23,59,-16,-127,18,14,9,-25,53,2,-43,12,73,-15,-15,15, 
  /* [43][0][][] */ 0,51,0,17,127,24,28,27,5,45,3,-91,-122,-43,-11,-9, 
  /* [44][0][][] */ 73,-15,23,43,-31,-14,7,37,23,-31,31,4,127,9,-50,-26, 
  /* [45][0][][] */ 14,-81,-64,39,-43,-91,10,47,27,-25,14,28,-82,127,41,-33, 
  /* [46][0][][] */ -22,-96,53,74,3,-9,-116,62,34,-53,49,-22,31,79,91,127, 
  /* [47][0][][] */ -32,-51,23,69,4,0,50,14,8,-68,-127,-28,49,-33,-62,13, 
  /* [48][0][][] */ -80,88,-10,-28,1,60,-11,-122,32,-21,37,-58,55,-127,-61,-1, 
  /* [49][0][][] */ -54,11,40,-41,-5,4,127,123,-36,-32,-6,25,-42,35,-45,35, 
  /* [50][0][][] */ 47,24,-75,36,29,-127,-36,4,-78,52,-36,-6,17,-74,-103,-41, 
  /* [51][0][][] */ -46,64,-29,122,-36,53,-53,-87,-40,-84,-3,-51,-2,29,-8,127, 
  /* [52][0][][] */ -127,9,23,-4,29,49,58,9,14,-81,-46,-39,-107,-60,-124,-14, 
  /* [53][0][][] */ -43,-65,-54,-127,-31,-4,15,73,34,-67,-50,24,-32,23,59,90, 
  /* [54][0][][] */ 4,-52,-6,-10,-57,55,56,-13,-16,-84,55,21,-18,-7,-127,38, 
  /* [55][0][][] */ -13,-27,-36,32,63,-25,59,84,-55,-56,-127,-40,57,-32,-24,35, 
  /* [56][0][][] */ 73,-36,-49,-23,-127,20,-122,-3,-9,-14,-39,8,97,-43,51,8, 
  /* [57][0][][] */ -41,14,25,-27,127,46,44,35,-34,42,-6,-6,-46,64,-94,-30, 
  /* [58][0][][] */ 19,-4,-3,-20,42,-7,-40,-57,45,-127,-56,5,-64,-43,-36,57, 
  /* [59][0][][] */ -72,-27,3,7,22,49,-104,-49,83,127,-89,8,-20,12,-25,-4, 
  /* [60][0][][] */ 17,-55,0,17,-127,-52,26,10,-5,52,-16,44,-2,-40,39,43, 
  /* [61][0][][] */ 23,34,-83,-17,-43,-15,-127,-86,-18,5,39,113,71,-64,99,58, 
  /* [62][0][][] */ 54,-12,45,-19,-21,31,52,127,-63,121,24,85,29,43,87,115, 
  /* [63][0][][] */ 22,-127,-10,-13,-66,16,44,-29,-8,-18,-3,-11,-40,123,107,32, 
  /* [64][0][][] */ -13,-4,-127,-34,21,57,35,-16,-9,-100,52,-5,73,-35,-74,107, 
  /* [65][0][][] */ -5,-1,68,60,79,-19,69,80,-35,1,-127,-72,33,95,-66,-22, 
  /* [66][0][][] */ -48,-127,-12,-104,-66,-124,50,-32,-9,-40,20,84,-64,-35,-70,83, 
  /* [67][0][][] */ -38,-98,-99,-22,-94,113,4,-127,-77,-36,-37,-98,25,-8,-73,51, 
  /* [68][0][][] */ 127,52,22,-6,-87,18,-61,-54,-79,-117,-22,-11,29,-26,81,-60, 
  /* [69][0][][] */ 34,1,44,-25,-1,-40,-48,27,-10,127,-28,12,1,34,62,-27, 
  /* [70][0][][] */ 47,-7,-19,73,-121,28,-21,-93,91,127,25,61,44,-62,5,16, 
  /* [71][0][][] */ 117,-87,82,107,-85,-47,37,-22,127,13,-56,50,66,-74,23,12, 
  /* [72][0][][] */ -3,-53,53,109,68,6,-127,87,98,-17,41,12,-45,-83,-83,93, 
  /* [73][0][][] */ 72,19,60,-127,61,-92,-76,58,-18,114,-31,11,11,-79,37,-37, 
  /* [74][0][][] */ 99,11,43,48,-127,-36,38,-3,-79,-42,11,-50,29,-80,5,15, 
  /* [75][0][][] */ 82,127,-105,20,56,52,-17,-26,-20,-29,53,74,-107,59,62,81, 
  /* [76][0][][] */ -69,-40,-1,-43,-56,-2,88,-7,-61,22,98,50,-56,-127,-20,88, 
  /* [77][0][][] */ -55,127,-22,12,-63,-71,50,84,45,-69,-12,68,-17,51,-7,87, 
  /* [78][0][][] */ 127,50,-70,27,-79,45,-124,-27,-9,-17,-76,19,32,-111,22,72, 
  /* [79][0][][] */ -64,-38,127,46,-19,-96,-56,-44,-17,24,7,21,-69,107,-47,58, 
  /* [80][0][][] */ 62,107,30,-127,-19,27,89,-29,12,23,-35,23,82,-52,7,-9, 
  /* [81][0][][] */ 43,-70,17,-127,110,54,-7,126,118,26,-21,-48,-14,20,-102,-75, 
  /* [82][0][][] */ 95,56,86,5,127,-106,24,52,-8,115,-31,31,-14,-45,48,-102, 
  /* [83][0][][] */ -44,79,10,12,82,54,127,98,-3,57,-25,-74,-91,100,-52,-90, 
  /* [84][0][][] */ 0,-94,-11,98,7,-79,-83,39,-84,68,-62,-8,-127,65,-14,-59, 
  /* [85][0][][] */ -91,51,-31,-6,-19,-47,-50,-38,-12,39,10,-68,-127,-87,-62,39, 
  /* [86][0][][] */ -11,58,99,115,34,-32,51,13,7,21,-47,-66,33,71,-127,-60, 
  /* [87][0][][] */ -15,49,127,-24,-95,-32,18,10,36,-22,9,41,-52,16,-5,-8, 
  /* [88][0][][] */ -28,-73,-112,21,46,33,-10,16,-13,-78,-123,-108,127,-22,4,37, 
  /* [89][0][][] */ 33,24,24,-120,12,-61,-56,51,127,-12,26,-100,6,-33,53,-77, 
  /* [90][0][][] */ 8,74,23,14,-45,35,43,120,2,-57,-17,127,56,17,-37,84, 
  /* [91][0][][] */ -57,11,-14,77,89,50,-48,-115,-47,42,-13,10,-118,-127,-61,-11, 
  /* [92][0][][] */ -23,70,8,-28,-127,-3,-97,53,-37,66,91,83,-18,-29,77,3, 
  /* [93][0][][] */ 119,53,116,48,-127,-89,8,30,-17,-60,-34,-81,30,-60,-12,-10, 
  /* [94][0][][] */ -31,-127,28,-105,17,38,-25,2,85,-18,-1,58,11,55,-51,39, 
  /* [95][0][][] */ -45,-67,-28,-51,122,110,-37,49,98,47,-79,63,-42,127,-79,38, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0014073550701141357, 0.0011373852612450719, 0.0015935457777231932, 0.0023757917806506157, 0.0019366592168807983, 0.00084452977171167731, 0.0013744211755692959, 0.0021638395264744759, 0.0022594940382987261, 0.0011820198269560933, 0.0024358776863664389, 0.0016328527126461267, 0.002200220013037324, 0.0018380319233983755, 0.002681543817743659, 0.0021027131006121635, 0.0022805517073720694, 0.0011000417871400714, 0.0015467483317479491, 0.0023367451503872871, 0.0018566773505881429, 0.00078869843855500221, 0.001292648259550333, 0.0023271837271749973, 0.00207929452881217, 0.0019004725618287921, 0.0010408745147287846, 0.001914892578497529, 0.0021733313333243132, 0.0022510963026434183, 0.0012205075472593307, 0.0024425822775810957, 0.0010254346998408437, 0.0020068513695150614, 0.0023571697529405355, 0.0018114460399374366, 0.0019315353129059076, 0.0015532297547906637, 0.0016981771914288402, 0.0018247030675411224, 0.0025932274293154478, 0.0022077762987464666, 0.0024652108550071716, 0.0027872864156961441, 0.0045106364414095879, 0.0025832885876297951, 0.0015831558266654611, 0.0020817634649574757, 0.0021903743036091328, 0.0022680882830172777, 0.0020891211461275816, 0.0020753806456923485, 0.0021421932615339756, 0.0032641901634633541, 0.0029369816184043884, 0.0029929943848401308, 0.0029212066438049078, 0.002367488807067275, 0.0011547246249392629, 0.0019181841053068638, 0.0027927686460316181, 0.0019202552502974868, 0.0013677005190402269, 0.0020178970880806446, 0.0017688845982775092, 0.001955332700163126, 0.0019968547858297825, 0.0025176806375384331, 0.0014354689046740532, 0.0032210671342909336, 0.0018136556027457118, 0.0015676164766773582, 0.0017426627455279231, 0.0016920367488637567, 0.0018730962183326483, 0.001681226072832942, 0.0024776333011686802, 0.0020905910059809685, 0.0019217715598642826, 0.002064260421320796, 0.0017331698909401894, 0.0014928800519555807, 0.0012026093900203705, 0.0024430868215858936, 0.0020714679267257452, 0.0018734900513663888, 0.0028107725083827972, 0.0029666903428733349, 0.00086034025298431516, 0.0021100461017340422, 0.0022676575463265181, 0.0018905431497842073, 0.00090879155322909355, 0.0016303160227835178, 0.0026778660248965025, 0.0017247108044102788, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27890, -5146, 3753, -13149, 13381, -13364, 25033, -8968, 12732, -9687, 13183, 11560, -4090, -30766, 483, 5467, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.5909014160279185e-05, 6.2897255702409893e-05, 5.6543849495938048e-05, 5.7463239500066265e-05, 9.6966774435713887e-05, 0.0001658102119108662, 4.9870533985085785e-05, 6.595585000468418e-05, 0.0001110151206376031, 9.080818563234061e-05, 9.2409412900451571e-05, 8.3286446169950068e-05, 7.9046905739232898e-05, 8.8101638539228588e-05, 6.5024745708797127e-05, 8.5877974925097078e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 20,29,15,16,-20,-76,-11,-4,-22,-78,11,-7,61,-70,52,29,-89,-28,41,6,83,24,-66,11,-5,68,127,69,15,77,58,-40,10,1,10,-26,27,28,-11,-9,123,20,26,-17,-9,-10,7,-41,25,-38,97,-7,-69,-1,42,37,-8,-38,5,18,-10,41,-64,-14,17,-4,66,32,1,-23,23,27,3,42,11,33,59,-36,50,23,-13,51,34,36,-55,13,-10,67,18,8,-91,-21,21,12,107,75, 
  /* [1][0][][] */ 16,36,-51,-17,-1,-52,89,-71,-67,-42,-61,-44,-1,-48,-12,-50,-35,-20,-28,-16,-19,-88,117,-34,2,12,4,58,-49,10,-36,12,-27,21,19,10,-26,57,-63,80,33,13,3,-42,51,-54,-4,32,-88,-1,55,-100,-44,46,59,63,38,28,-66,18,-43,5,-18,-20,38,23,106,10,-39,-127,11,6,19,64,-17,31,-51,-31,106,-26,36,-9,49,-57,-31,-58,-14,17,-14,-49,32,-5,68,-61,-38,60, 
  /* [2][0][][] */ 8,-21,14,-6,59,46,-48,23,-51,41,18,-22,30,-5,23,26,31,-22,-127,-6,-13,-44,-15,18,1,-13,-45,18,-33,-18,-21,70,-19,-33,0,13,-39,27,-19,-22,65,14,1,37,9,54,3,-3,-85,8,-21,13,-20,44,13,-61,31,19,44,29,-26,-14,-18,50,35,0,-36,-5,-6,-2,-10,-33,24,46,29,66,-56,-13,-28,-36,36,36,53,-12,-8,-44,-16,-51,-19,-31,-16,68,3,-6,84,-37, 
  /* [3][0][][] */ 43,-44,-26,-111,-10,-27,117,-34,29,127,-76,-17,4,-18,-17,58,62,47,-30,21,-46,18,16,3,-50,79,48,-2,-40,-15,-72,70,-6,-16,26,-29,6,-54,-23,57,4,14,-24,21,61,-51,-8,37,46,-24,24,-44,109,37,32,-7,-3,-28,-9,-47,-41,33,71,-5,-36,-21,119,-37,-43,-11,-55,23,15,-75,1,-78,13,-50,125,-9,-6,-57,-35,-49,-30,-49,71,76,-48,50,-64,3,6,-79,-17,38, 
  /* [4][0][][] */ -30,79,36,9,-10,8,-39,-16,16,-33,-1,-18,21,39,-24,26,-6,-45,-14,-72,24,-30,-57,18,-23,-32,-20,14,-35,127,-49,-19,9,-43,1,-33,67,40,-35,5,17,7,12,-42,-49,-9,51,-22,26,-20,-58,-9,-67,29,41,23,1,56,-19,17,-28,-66,-28,7,56,24,-64,-11,-4,0,9,-66,-15,61,55,63,-29,14,-61,41,15,59,25,-62,42,-64,-25,-63,-34,-50,-46,-16,-4,9,29,-33, 
  /* [5][0][][] */ -8,-8,36,-17,-8,-23,-16,3,34,9,-16,-6,-20,-28,22,-16,-14,2,-47,-34,-23,16,-19,13,18,-44,61,-19,-6,37,14,71,-7,-81,18,6,-37,-28,-32,2,-46,-4,-19,13,2,20,-67,22,-17,14,47,-7,21,-69,3,19,-20,-51,5,-33,38,24,21,46,-36,7,106,-20,-8,-25,9,13,-1,25,33,7,-4,-11,127,38,-23,-13,-30,24,39,60,6,90,4,-35,-5,8,10,-15,-31,19, 
  /* [6][0][][] */ 20,-67,71,12,-50,122,-54,-104,-27,-89,-92,62,11,11,-36,99,6,47,22,-44,-95,-28,-89,-75,10,-54,-4,77,-125,53,-27,-37,49,100,-15,-9,-3,-40,18,-24,-64,38,37,-31,21,56,-100,-10,51,13,-86,-127,93,10,-45,-17,23,-31,30,-27,-13,-44,46,-7,60,-84,-72,-70,-101,19,-10,-83,-34,-113,29,-118,95,5,-84,52,-38,96,20,-105,68,-43,-13,4,-79,90,-92,93,46,-60,71,-110, 
  /* [7][0][][] */ -12,-16,-63,58,-36,1,43,-8,-99,2,89,55,-4,-55,0,-37,-9,2,-3,2,-48,-25,-43,-46,73,52,-5,76,1,30,16,31,-58,-127,33,106,-6,13,-45,4,-13,-15,7,-74,33,55,68,88,-17,52,-46,6,31,-48,47,-57,-19,32,-78,-24,59,6,11,-43,69,-50,112,-20,-57,-24,74,6,-15,-33,-80,-27,28,-43,101,-36,-4,-7,-78,-37,46,18,-77,45,-14,19,2,34,70,-8,90,-3, 
  /* [8][0][][] */ -7,-55,13,3,-8,-9,15,-3,-16,-1,44,42,16,25,-42,-2,68,-5,18,-4,-16,-70,-31,-16,-25,-39,69,0,-23,50,8,-34,-11,-6,-2,3,-49,-20,14,-22,-1,42,31,-37,9,-15,23,-17,39,-7,51,6,-7,14,-46,3,-12,110,-62,0,-15,-58,-64,-2,-82,-39,-18,20,-7,8,34,-22,-32,-127,42,-107,14,18,-56,22,-28,-13,5,55,62,-60,-37,52,-32,84,15,-23,-56,4,-6,-60, 
  /* [9][0][][] */ -25,-28,-30,24,2,20,7,35,-40,-1,64,55,-28,56,27,-49,-15,36,-22,-40,4,36,-7,6,-25,26,6,18,35,-5,13,-6,-18,-19,9,53,-17,-4,25,-3,-13,-24,11,0,11,43,1,42,-45,11,-17,28,127,17,-8,0,13,-16,34,14,-32,1,82,7,10,25,61,5,34,-4,-17,25,8,-121,-35,-117,-34,-14,37,-4,-3,33,2,-36,43,12,-55,-3,-6,110,34,33,54,32,-10,27, 
  /* [10][0][][] */ 20,41,10,1,-17,18,-39,-26,70,5,-33,21,16,12,-2,-59,-31,2,17,3,27,-17,-22,-34,9,-16,-97,46,-18,51,-5,14,16,26,-18,0,16,1,6,-4,38,-8,55,-45,-27,-4,16,27,16,8,9,-26,-19,-16,1,33,-15,5,-10,-10,-17,-41,-4,7,-7,-11,-93,-31,-48,-15,49,-17,-16,29,35,16,47,-22,-90,9,-11,35,0,-6,10,6,-75,-127,-28,28,9,25,54,-35,22,29, 
  /* [11][0][][] */ 17,-43,5,2,-61,33,14,9,72,-19,-17,-45,24,7,12,-10,-27,53,20,-60,8,32,17,-24,42,15,60,3,32,-55,-31,19,21,104,-94,2,10,-17,51,8,-51,44,-18,19,-41,-2,-15,-5,51,-16,-19,-14,-19,13,-74,88,-33,-2,-1,-34,26,7,-7,-67,-9,-44,-127,-80,3,-31,-86,34,48,16,-5,2,32,52,-112,-37,-14,-2,-18,-7,-18,-4,58,75,19,-48,6,3,-32,29,81,35, 
  /* [12][0][][] */ 17,29,-38,-22,13,-20,9,32,56,-41,23,0,2,-13,-2,8,7,-39,-23,15,14,52,0,47,-42,-32,-127,-6,76,-22,26,1,-21,-69,66,-8,35,-9,-1,14,-7,-53,13,31,46,1,24,-14,-73,3,-53,91,76,-22,33,-75,5,20,-42,-35,11,47,78,1,-18,-13,29,24,105,27,22,25,7,-16,-9,-6,-38,-59,43,-69,24,-43,33,-34,7,10,2,-102,-12,37,-43,23,18,67,15,38, 
  /* [13][0][][] */ -19,18,-75,28,23,19,-6,5,32,64,-30,41,-47,-18,63,-48,14,53,64,15,-26,-45,-1,11,42,50,-19,27,11,43,50,-16,-19,68,-2,44,22,-34,-48,-53,-1,-13,15,12,50,47,-31,51,-49,41,-2,0,-13,-36,59,37,9,-47,-11,-17,21,19,7,-30,12,92,127,34,22,2,-43,-15,42,51,-75,52,17,-74,125,-40,-12,-30,26,6,30,62,-30,-23,-19,-21,7,51,43,13,64,52, 
  /* [14][0][][] */ -4,48,20,23,-58,-40,20,37,-72,-23,63,12,-72,-9,64,-23,-44,37,-58,24,-22,23,-93,14,-48,0,-52,-106,14,-4,31,76,-56,28,16,-12,-27,-65,-8,-41,27,-30,45,-24,-10,45,-72,26,-14,-42,76,25,-13,23,-29,29,-48,28,3,38,39,58,-9,39,14,-47,2,-65,36,60,66,35,-50,37,10,15,25,-13,37,15,-64,111,-2,-127,81,-6,-4,9,-103,-16,-20,-3,-25,13,38,36, 
  /* [15][0][][] */ 71,-35,23,29,34,13,-11,-10,20,33,-51,-15,63,68,-2,-18,-8,10,-79,55,3,-36,13,22,60,-31,87,31,45,-29,-47,71,61,56,-6,-84,67,65,70,51,85,37,-22,3,-36,-123,34,-36,-27,-16,-22,-8,-6,-54,-27,48,-17,2,-18,16,-2,-55,-32,31,35,45,-76,35,-10,-32,-6,-8,3,-127,-49,-101,-20,19,-123,34,76,-35,45,27,-55,0,-8,-20,35,88,15,-62,-27,-30,37,-43, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0036511330399662256, 0.0026731332764029503, 0.0024031135253608227, 0.0024421876296401024, 0.0041210879571735859, 0.007046933751553297, 0.0021194976288825274, 0.0028031235560774803, 0.0047181425616145134, 0.0038593478966504335, 0.0039273998700082302, 0.0035396737512201071, 0.0033594933338463306, 0.0037443195469677448, 0.0027635516598820686, 0.0036498138215392828, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9277, -142, -6408, 6975, -1354, 1590, -58, -261, 3029, -4219, -209, -2381, 11555, -3677, -1281, -7240, -273, 1151, -10781, -535, -2712, -497, -6592, -616, 54, 8471, -10371, -5709, -855, -3427, -1070, -1229, 20384, 145, -2392, -976, -349, 15834, 4874, 10463, -450, 6059, 662, 6297, 42, -144, 10911, 651, -6408, -87, -3519, -449, -445, -3006, -801, 2629, 837, 1715, 1057, 2910, -349, 1197, -454, 8294, 8092, -355, 14086, 9979, -1709, -169, 10424, -1433, 104, 593, -5105, 9, 18229, 10733, 9620, 13043, 14388, -1400, 5392, 7579, -1055, -426, 10748, -7581, 12625, 185, -9347, -1788, -767, 1145, 19355, -1483, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011457665095804259, 0.00024241679057013243, 0.00015547580551356077, 0.00014047842705622315, 0.00020450336160138249, 0.00049212004523724318, 0.00010298457345925272, 0.00015226828691083938, 0.0002917789388448, 0.0002446761354804039, 0.00020197436970192939, 0.00018687597184907645, 8.3801998698618263e-05, 0.00013370777014642954, 0.00018625479424372315, 0.00015660698409192264, 0.00026864535175263882, 0.00032292967080138624, 0.00010000238398788497, 0.00032748613739386201, 0.00018155414727516472, 0.00019280955893918872, 0.00011622917372733355, 0.00011325203377055004, 0.0019549953285604715, 0.00014733934949617833, 0.00020330007828306407, 0.00014300325710792094, 0.00030843907734379172, 0.00016593067266512662, 0.00012426538160070777, 0.0002888390445150435, 6.0825841501355171e-05, 0.0004028611583635211, 8.8241366029251367e-05, 0.00021798185480292886, 0.00021957716671749949, 8.4448889538180083e-05, 0.00016566291742492467, 0.00010897089669015259, 0.00051283132052049041, 0.00016807031352072954, 0.00029903434915468097, 0.00012673938181251287, 0.0001594828354427591, 0.00026746484218165278, 0.00012939221051055938, 0.00029989346512593329, 0.00016639679961372167, 0.00037245862768031657, 0.00023276926367543638, 0.00013871974078938365, 0.00014836812624707818, 0.00030009029433131218, 0.00024779312661848962, 0.00022863218327984214, 0.00012152325507486239, 0.00035068183206021786, 0.00033268122933804989, 0.00024206281523220241, 0.0001805287174647674, 0.00022238258679863065, 0.00014282364281825721, 0.00011835704208351672, 0.00029559648828580976, 0.00040085162618197501, 0.00011461010581115261, 0.00014717516023665667, 0.0002260012406622991, 0.00025562758673913777, 0.00012648561096284539, 0.00017213186947628856, 0.00035780618782155216, 0.00017832228331826627, 0.00013403553748503327, 0.00021137121075298637, 8.1147081800736487e-05, 0.00015599335893057287, 0.00013107479026075453, 0.00015731122402939945, 9.0527151769492775e-05, 0.00025621350505389273, 0.00012324358976911753, 0.00031241573742590845, 9.3000300694257021e-05, 0.00021053447562735528, 0.00011984622688032687, 0.00020999954722356051, 9.2809037596452981e-05, 0.00022202102991286665, 9.4902075943537056e-05, 0.00024104824115056545, 0.00030578084988519549, 0.00014365099195856601, 0.00010144231782760471, 0.00023475590569432825, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -36,-13,-5,-29,99,-10,35,-14,-10,-6,-10,-31,-28,3,-8,-23,-14,0,-11,-14,-3,26,10,49,1,-13,-31,-4,17,1,27,7,-9,0,-1,-25,-3,-74,-51,11,4,-14,33,-28,-24,32,-53,-12,-17,11,-5,53,-67,5,41,-14,-5,-9,2,-22,-12,-17,-6,-29,-18,-25,-40,-27,-9,22,-11,0,28,2,4,-1,-13,7,127,-13,-127,10,-89,-16,-22,-20,25,13,-28,-17,12,-28,-2,30,-13,7, -16,34,47,-74,-37,-5,127,-59,-5,-11,-35,10,-68,5,-96,87,-8,67,63,-32,-1,127,81,127,32,3,43,60,127,35,127,-27,-108,-18,-94,-30,-26,-105,127,-62,-24,-127,-16,-47,57,-30,-29,-2,48,5,25,127,-90,38,-75,-8,-85,-5,-7,22,-15,-127,-121,-43,-41,-5,-5,-82,-6,13,-64,114,-127,-15,17,-30,-119,-77,-5,-73,-120,7,30,-52,108,71,-52,28,-127,-3,33,-10,12,127,-39,-88, -26,-1,-6,-15,64,-7,44,-28,-23,8,-9,-4,-9,1,-9,-27,-10,-6,-23,-21,-2,5,13,35,0,-7,0,-16,10,6,20,13,-13,3,-16,54,-5,-89,-47,19,0,-13,15,-18,-22,-29,-50,-20,-10,1,-4,35,5,-2,15,-14,52,-15,4,-27,-12,-9,-45,-4,-22,-33,127,-35,-1,16,-6,11,19,6,9,17,-14,27,-41,-14,-104,1,-98,-18,5,-29,13,-22,-36,-36,9,49,7,26,-11,12, 
  /* [0][1][][] */ -88,-8,43,-49,49,88,-40,-21,-7,-12,-23,-18,-127,28,17,65,-15,36,103,21,26,-15,127,-24,37,18,62,19,-9,4,-4,-16,-127,-17,77,-13,-5,-125,-68,-127,-18,-3,86,-30,-69,127,-89,-70,64,62,12,-41,-118,64,65,-30,22,-28,30,-17,12,-10,91,-73,-30,14,-26,-55,-10,-3,-127,18,74,127,15,-72,-127,-53,-63,-51,-58,-7,-14,-48,40,18,-99,62,-73,127,99,-79,127,2,-52,-4, 79,127,127,127,-127,-127,91,-67,127,127,-77,-57,-90,127,-29,127,127,-127,127,127,127,-75,92,-120,-127,-127,127,127,-123,127,-22,127,-65,127,127,-92,127,106,0,-25,127,3,-127,-103,127,-24,127,127,127,-127,127,-107,112,127,-127,127,-127,127,-127,127,-103,113,109,-127,127,127,-14,127,-108,-127,-14,-127,10,116,127,72,-3,-127,95,-127,51,127,127,127,127,56,-127,127,-94,48,-1,-27,-87,-28,-127,-33, -127,-31,39,-64,11,52,-55,0,-37,-11,0,127,-110,25,20,57,-22,44,75,9,12,-20,82,-23,37,5,43,2,-9,-3,16,-14,-96,-30,85,127,0,-99,-88,-79,-26,-17,21,-32,-61,-65,-86,-96,50,71,-7,-24,127,11,93,-47,96,-26,44,-49,3,-33,-127,-44,-59,-9,-57,-66,-20,4,-106,3,41,-92,11,127,-87,-36,-59,-4,-89,-17,-50,-67,-2,23,-82,36,-34,-79,127,127,-37,-24,-63,-7, 
  /* [0][2][][] */ -25,-43,-12,-23,36,-1,-2,17,-12,5,35,-24,52,0,-12,-39,-1,-11,-45,-20,-16,-11,15,-26,6,-6,-11,10,3,-5,-19,8,-3,-1,6,-17,1,-47,-27,-2,-27,5,20,14,24,14,-60,5,-27,4,-22,-21,-6,-35,30,-16,5,-14,3,-22,0,11,1,0,-34,-20,117,10,26,26,-11,1,-6,-15,-2,-27,-17,17,-28,-25,-32,1,-78,-11,-10,-4,35,-15,1,3,-1,-14,-15,-14,-29,-3, -19,-63,32,-104,-40,-3,49,127,-54,59,127,-20,-68,14,127,88,-8,-37,68,-43,-24,-33,122,8,21,-17,32,21,-9,8,-87,-40,-69,-28,-95,-3,-84,-127,49,-59,-24,-98,-41,127,29,-20,-57,3,18,-11,-13,-6,57,23,-50,-42,-53,-43,39,-59,127,19,105,6,-75,-45,-24,-57,127,31,-32,18,19,-26,22,-28,-30,-40,2,28,-109,-24,-66,-61,35,-127,-12,13,-29,4,47,-2,12,-119,-81,127, -22,3,-9,-9,27,-8,2,14,-21,-1,16,41,56,4,-11,-45,-3,4,-24,-24,-13,-3,7,-10,0,-6,-15,-1,1,2,-28,7,12,3,6,4,-1,-61,-34,8,-31,-2,-5,10,21,-7,-57,12,-26,-5,-14,-17,-2,-39,25,-15,59,-6,7,-26,5,13,-11,10,-21,-21,-27,12,20,14,-20,0,-49,-35,-4,-17,-28,8,93,-16,-26,-3,-63,-1,-18,1,41,0,7,1,-7,21,5,-20,-20,-8, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.005750702228397131, 0.012167111039161682, 0.0078034666366875172, 0.0070507349446415901, 0.010264202952384949, 0.02469993568956852, 0.0051688859239220619, 0.0076424782164394855, 0.014644640497863293, 0.012280509807169437, 0.010137270204722881, 0.0093794688582420349, 0.0042060958221554756, 0.0067109102383255959, 0.0093482909724116325, 0.0078602414578199387, 0.013483544811606407, 0.016208123415708542, 0.0050192070193588734, 0.01643681526184082, 0.0091123618185520172, 0.0096772806718945503, 0.0058336439542472363, 0.0056842188350856304, 0.098122932016849518, 0.007395091000944376, 0.010203808546066284, 0.0071774586103856564, 0.015480827540159225, 0.008328205905854702, 0.0062369881197810173, 0.01449708454310894, 0.0030529021751135588, 0.0202199537307024, 0.0044289114885032177, 0.010940699838101864, 0.01102077029645443, 0.0042385635897517204, 0.0083147669211030006, 0.0054693445563316345, 0.025739453732967377, 0.0084355957806110382, 0.015008796006441116, 0.0063611604273319244, 0.0080045834183692932, 0.013424295000731945, 0.0064943083561956882, 0.015051915310323238, 0.0083516007289290428, 0.018694024533033371, 0.011682893149554729, 0.0069624651223421097, 0.0074467258527874947, 0.015061793848872185, 0.012436953373253345, 0.011475249193608761, 0.0060993586666882038, 0.017601028084754944, 0.016697561368346214, 0.012149344198405743, 0.009060894139111042, 0.011161576956510544, 0.0071684438735246658, 0.0059404433704912663, 0.014836247079074383, 0.020119093358516693, 0.0057523814029991627, 0.0073868497274816036, 0.011343199759721756, 0.012830172665417194, 0.0063484236598014832, 0.0086394492536783218, 0.017958605661988258, 0.0089501515030860901, 0.0067273611202836037, 0.010608905926346779, 0.0040728431195020676, 0.0078294435515999794, 0.0065787583589553833, 0.0078955879434943199, 0.0045436369255185127, 0.012859580107033253, 0.0061857039108872414, 0.015680419281125069, 0.0046677663922309875, 0.010566909797489643, 0.0060151871293783188, 0.010540060698986053, 0.0046581667847931385, 0.011143430136144161, 0.0047632181085646152, 0.012098422273993492, 0.015347409062087536, 0.0072099692188203335, 0.0050914785824716091, 0.011782604269683361, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1868, 9703, 341, 1864, 7683, 15656, 128, 3147, 12532, -1261, 19008, 5972, 2042, 631, 5415, 643, 3519, 6101, -601, 11393, 1736, 11023, -1694, 1968, -13042, 1330, 2557, 2014, 10494, 1792, 3903, 5325, 2183, 14029, 5168, 4667, 3472, 2856, 5412, 3715, 20515, 1486, 3074, 1480, 3917, 9911, 6038, 10737, 1624, -969, 2018, 6881, 2654, -4835, 9041, 157, 2797, 21663, 1318, 2233, 3468, 14400, 4250, -323, 19585, 17865, 2009, 6105, 8884, 5062, 1923, 1489, -4190, 4596, 2179, 3395, 466, 12488, 3687, 7687, 3527, 1266, 7667, 17380, -200, 9041, 7361, 2071, -739, 2983, 1587, 15891, 4484, 3279, 6424, 5186, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015858763072174042, 8.0002733739092946e-05, 0.00026988849276676774, 0.00020457729988265783, 8.6671352619305253e-05, 5.8539728343021125e-05, 0.00027157959993928671, 0.00010577740613371134, 6.9704619818367064e-05, 0.00014882767572999001, 4.4461434299591929e-05, 8.1170801422558725e-05, 0.00014942645793780684, 0.00027190920081920922, 0.00010699884296627715, 0.00011426160199334845, 0.00016357807908207178, 0.00010529514838708565, 0.00010029849363490939, 7.6785130659118295e-05, 0.00013843133638147265, 6.8240806285757571e-05, 0.00015136848378460854, 0.00012239949137438089, 5.615032569039613e-05, 0.00015095151320565492, 0.00019269579206593335, 0.00016863347264006734, 8.3092440036125481e-05, 0.00014741200720891356, 0.00014655900304205716, 9.8804674053099006e-05, 0.00018426659516990185, 6.0543818108271807e-05, 9.8302676633466035e-05, 0.00012811768101528287, 0.00016763644816819578, 0.00014264590572565794, 9.2249014414846897e-05, 0.0001144124471466057, 4.6175344323273748e-05, 0.00018387906311545521, 0.00012312106264289469, 0.00012356923252809793, 9.384349687024951e-05, 8.6934953287709504e-05, 0.00011553902731975541, 6.9620626163668931e-05, 0.00017827852570917457, 0.00020930978644173592, 0.0002032872725976631, 0.00010067099356092513, 0.00018071243539452553, 8.7581182015128434e-05, 8.2538441347423941e-05, 0.00025060956249944866, 0.00012305181007832289, 4.0456518036080524e-05, 0.00016127157141454518, 0.00012490061635617167, 0.00012321917165536433, 6.0116286476841196e-05, 0.00014234762056730688, 0.0001577990478836, 5.0085916882380843e-05, 4.9591635615797713e-05, 0.00019997218623757362, 9.8544398497324437e-05, 8.9420114818494767e-05, 0.00010321461741114035, 0.00024617713643237948, 0.00014708393428009003, 0.00013580871745944023, 0.00013953700545243919, 0.00017658805882092565, 0.00018320772505830973, 0.00014819085481576622, 6.4258420024998486e-05, 0.00015443679876625538, 0.00010712549556046724, 0.00012404937297105789, 0.00012908276403322816, 6.4387240854557604e-05, 5.5645803513471037e-05, 0.00010758244025055319, 8.2828257291112095e-05, 9.3161666882224381e-05, 0.0002023971319431439, 0.00016811277600936592, 0.00018635412561707199, 0.00013819828745909035, 5.3800242312718183e-05, 0.00011221785098314285, 0.00012441366561688483, 8.8868910097517073e-05, 0.00012513568799477071, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 47,0,3,57,-127,-19,101,47,66,85,-30,42,23,-4,35,85, 
  /* [1][0][][] */ -21,33,-98,-3,127,108,2,0,-31,12,-57,31,-51,92,-50,-35, 
  /* [2][0][][] */ -38,61,76,-4,65,86,4,34,40,-5,38,-15,52,-127,-12,9, 
  /* [3][0][][] */ 127,-34,17,0,39,39,-11,18,45,33,-56,-28,-44,48,-38,56, 
  /* [4][0][][] */ -80,-14,15,47,-118,-15,-98,-27,-10,40,-9,-55,-26,33,-42,127, 
  /* [5][0][][] */ -92,21,40,20,127,27,1,9,-55,39,-27,16,-63,51,-93,-38, 
  /* [6][0][][] */ -127,20,-33,33,-6,-63,65,17,6,-27,-49,38,14,0,-44,10, 
  /* [7][0][][] */ -6,109,50,-97,62,54,127,13,41,-3,1,42,83,27,-34,6, 
  /* [8][0][][] */ -34,-31,-76,49,-50,88,-46,-74,33,-39,80,42,127,47,-100,6, 
  /* [9][0][][] */ -27,-127,-22,75,-44,-61,-8,61,46,41,8,61,-74,17,-4,-30, 
  /* [10][0][][] */ -44,-55,-109,61,-120,127,57,-80,15,-70,64,-48,43,114,-90,87, 
  /* [11][0][][] */ -50,-110,-36,32,-9,91,40,-8,21,17,44,-107,13,126,-123,127, 
  /* [12][0][][] */ -33,-94,-82,98,-104,-127,22,69,74,59,-31,99,1,-59,-28,-3, 
  /* [13][0][][] */ -68,-25,-38,-2,-18,3,34,19,-19,127,-8,-24,37,34,13,-10, 
  /* [14][0][][] */ -127,-24,-58,-55,-29,97,-17,-98,119,-73,80,-9,89,-51,-98,-83, 
  /* [15][0][][] */ 4,-127,97,-56,-54,-34,5,56,19,-48,-93,-35,86,-39,-30,-49, 
  /* [16][0][][] */ -21,-38,29,-36,36,22,-24,-29,69,-127,35,-15,-8,-2,-80,-98, 
  /* [17][0][][] */ -18,11,35,-64,26,-3,-37,-1,89,-58,21,73,112,-82,-24,-127, 
  /* [18][0][][] */ 78,5,-34,-125,5,-33,127,-52,26,62,-14,69,-3,74,-3,-122, 
  /* [19][0][][] */ -37,-35,-28,-66,-104,44,-17,-8,31,-40,21,-127,-15,-25,-14,-8, 
  /* [20][0][][] */ 19,78,70,-101,71,0,-56,94,-108,-127,41,-82,-38,107,-25,-16, 
  /* [21][0][][] */ 19,-122,-127,3,96,34,99,115,-92,-104,-22,23,127,-116,-26,36, 
  /* [22][0][][] */ 59,-12,83,-9,4,1,58,31,25,127,28,24,-8,-4,113,-10, 
  /* [23][0][][] */ -116,-73,-19,68,70,43,15,5,-6,14,-6,-88,2,66,65,127, 
  /* [24][0][][] */ 18,-12,35,28,21,-90,17,-64,20,127,-118,80,-17,-62,81,-70, 
  /* [25][0][][] */ 127,-58,110,112,46,4,-19,31,-107,81,49,-50,-13,21,68,-20, 
  /* [26][0][][] */ -19,23,14,39,-53,112,-19,35,-56,-33,-82,35,5,17,44,-127, 
  /* [27][0][][] */ 36,-3,-12,-50,-52,0,-79,10,-109,-26,-69,-48,-74,49,-17,127, 
  /* [28][0][][] */ -62,18,26,0,25,-16,-127,0,-2,-27,-6,-8,11,-51,-67,-34, 
  /* [29][0][][] */ -22,-114,-22,94,-26,6,127,4,83,61,-116,69,37,-30,-49,74, 
  /* [30][0][][] */ 42,-55,-59,9,-127,27,60,-34,12,-3,0,-26,-13,51,-8,74, 
  /* [31][0][][] */ -127,-15,2,85,-32,12,-44,2,-27,-55,12,-34,-23,-45,-16,95, 
  /* [32][0][][] */ -127,-77,-93,-2,-94,-43,5,-10,111,49,-50,-65,39,45,25,-11, 
  /* [33][0][][] */ -10,4,-92,34,-127,-89,54,-3,-107,14,-51,-60,-17,92,75,67, 
  /* [34][0][][] */ 30,56,-1,36,-63,-41,38,16,15,-127,-12,33,-33,5,39,95, 
  /* [35][0][][] */ 41,-7,-65,-17,-127,17,93,-32,28,47,-15,-13,21,74,32,65, 
  /* [36][0][][] */ -10,-5,-63,53,127,-16,47,71,-83,14,-83,-90,33,-25,8,30, 
  /* [37][0][][] */ -127,52,-8,-80,45,-87,-43,-32,-12,-29,-21,49,57,-82,11,-124, 
  /* [38][0][][] */ 43,106,33,-79,-115,-64,-127,-61,-53,-81,49,75,-69,-107,97,2, 
  /* [39][0][][] */ -1,-49,9,68,12,85,86,-55,-24,48,15,-21,-10,127,49,115, 
  /* [40][0][][] */ 102,44,78,94,-58,-50,-1,23,-77,60,-8,-22,-43,-32,127,3, 
  /* [41][0][][] */ -26,-11,7,53,-101,117,5,58,-62,26,-112,8,16,37,58,-127, 
  /* [42][0][][] */ 7,-104,31,-17,127,26,61,7,-30,-95,-98,-22,-16,-12,-5,31, 
  /* [43][0][][] */ -30,-85,-42,6,115,22,0,83,-65,-70,-127,-85,121,-19,-70,53, 
  /* [44][0][][] */ -40,-53,-75,-90,30,73,77,18,-41,-127,-62,66,-46,58,32,111, 
  /* [45][0][][] */ -8,-57,-71,-6,-127,67,-22,-56,55,-48,30,-51,-1,14,-38,46, 
  /* [46][0][][] */ 32,-86,-19,5,87,-78,-14,95,-2,-29,39,65,-51,-59,57,-127, 
  /* [47][0][][] */ -77,-37,-21,84,-13,15,44,50,5,127,93,90,-41,92,-4,113, 
  /* [48][0][][] */ 44,-13,-76,-85,35,-60,5,49,47,-72,-5,26,-58,3,-44,-127, 
  /* [49][0][][] */ 48,36,7,33,-9,-25,47,45,-36,127,-37,29,-36,-23,66,83, 
  /* [50][0][][] */ 5,0,17,10,-127,-21,-15,-50,57,23,23,54,-24,-63,14,-4, 
  /* [51][0][][] */ 15,-6,-7,-127,-31,99,51,-52,5,3,41,-57,76,79,-25,20, 
  /* [52][0][][] */ 17,-24,-5,-78,74,-103,-6,-29,32,-5,127,-58,33,11,-37,95, 
  /* [53][0][][] */ -48,-60,50,-26,-42,-127,21,-107,-2,94,-97,76,-37,-17,29,-82, 
  /* [54][0][][] */ 64,74,54,-12,-127,-50,-101,-113,-12,20,45,69,-68,-53,58,4, 
  /* [55][0][][] */ 17,13,-41,73,-41,26,39,-15,4,127,25,64,-1,-1,2,49, 
  /* [56][0][][] */ 40,-121,-82,86,-82,50,-5,73,127,5,65,54,-34,-29,51,100, 
  /* [57][0][][] */ 54,29,112,-93,90,-9,-12,-9,88,-33,11,127,59,-65,102,-73, 
  /* [58][0][][] */ 71,-61,15,-65,39,10,-11,127,50,97,-7,59,45,16,78,-11, 
  /* [59][0][][] */ -48,42,28,-44,-1,-90,-2,7,2,20,-116,-104,-127,-62,72,-13, 
  /* [60][0][][] */ 44,-22,23,14,5,-16,15,-57,23,127,-9,70,-9,-30,-16,-31, 
  /* [61][0][][] */ 61,67,12,-31,-91,-127,-17,-57,-70,-18,-20,19,-71,-43,85,92, 
  /* [62][0][][] */ -28,79,-42,38,-56,127,-41,29,-60,4,-35,26,-34,44,54,-81, 
  /* [63][0][][] */ 35,-2,-58,-127,-11,-41,79,-18,3,-86,-34,36,-33,63,36,-36, 
  /* [64][0][][] */ -44,18,6,-22,49,-57,33,87,-127,-19,-68,-39,-30,90,54,65, 
  /* [65][0][][] */ -83,-22,-53,-25,78,50,-44,-79,-127,-64,6,-30,-122,121,-61,56, 
  /* [66][0][][] */ -17,60,-10,33,-47,127,-23,20,-62,20,-28,44,-32,49,50,-84, 
  /* [67][0][][] */ 15,-23,-44,-28,16,-91,64,-103,-5,32,8,124,-59,-32,-28,-127, 
  /* [68][0][][] */ 12,-127,-30,82,-14,0,28,93,41,35,59,11,-73,32,-13,-7, 
  /* [69][0][][] */ 7,87,85,-106,45,-2,-39,106,32,93,62,79,88,-102,21,-127, 
  /* [70][0][][] */ 39,30,44,-34,90,9,-93,-48,-127,-90,-5,43,-31,66,-102,-5, 
  /* [71][0][][] */ -27,-70,24,-44,73,-14,43,35,-94,86,-127,-48,13,100,-24,57, 
  /* [72][0][][] */ 9,21,66,21,-70,-36,-121,-71,-15,79,-35,61,30,127,-124,-4, 
  /* [73][0][][] */ 3,-33,-14,-44,39,-119,31,-52,78,93,105,-9,25,-19,-69,127, 
  /* [74][0][][] */ 8,5,-24,80,-76,-6,86,20,79,64,25,114,127,19,-56,5, 
  /* [75][0][][] */ -27,45,-23,32,-50,127,-16,18,-32,32,-41,47,-17,51,32,-66, 
  /* [76][0][][] */ -76,82,-62,46,-110,-4,-4,30,47,42,-38,-42,51,-43,-127,46, 
  /* [77][0][][] */ 107,121,-127,127,72,68,83,56,40,5,108,-48,81,42,74,30, 
  /* [78][0][][] */ 12,-34,0,-59,68,-121,35,-53,45,47,127,-27,6,-14,-41,124, 
  /* [79][0][][] */ -40,61,2,18,-6,-44,-30,-6,-127,-9,51,9,103,44,-72,-39, 
  /* [80][0][][] */ -79,19,73,-7,72,55,-9,-127,-69,56,-63,-42,-4,-98,19,59, 
  /* [81][0][][] */ 90,79,-22,1,31,-27,83,117,-110,127,-64,-39,-43,27,120,123, 
  /* [82][0][][] */ 56,103,-31,-68,-5,-44,105,-106,34,25,-73,66,127,-27,61,-56, 
  /* [83][0][][] */ 5,-30,22,22,4,23,-33,-102,64,-30,92,17,32,-63,-49,-127, 
  /* [84][0][][] */ -127,-90,-43,-20,-6,100,98,3,93,73,106,107,67,94,-87,10, 
  /* [85][0][][] */ 108,1,90,-79,77,-13,-28,91,10,127,-58,2,-47,66,119,20, 
  /* [86][0][][] */ -80,74,-37,0,28,81,25,19,88,37,127,-26,-29,60,-6,-19, 
  /* [87][0][][] */ 12,-56,27,-44,45,-127,24,-33,47,-8,62,-34,35,-44,-37,68, 
  /* [88][0][][] */ -89,60,41,-8,113,-28,43,27,-66,-79,110,-77,76,120,108,-127, 
  /* [89][0][][] */ -27,34,-17,30,-35,127,-14,36,-48,8,-37,18,-11,61,26,-82, 
  /* [90][0][][] */ 49,-85,24,27,127,-9,47,35,-14,-100,-119,-29,-18,-9,-64,32, 
  /* [91][0][][] */ -7,78,-19,-40,7,-94,-114,35,-82,32,-119,-127,-120,-87,-13,14, 
  /* [92][0][][] */ 63,49,66,38,-127,-92,17,7,-26,36,-30,-33,-21,-76,21,-2, 
  /* [93][0][][] */ -2,-127,-106,60,-36,-58,-21,108,94,73,4,68,-58,62,-13,-33, 
  /* [94][0][][] */ 98,5,127,-26,29,-30,10,38,33,90,-5,57,9,2,115,-17, 
  /* [95][0][][] */ -66,-45,-28,-21,127,-8,46,84,-40,-13,-101,-62,14,17,-69,34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0035833984147757292, 0.0018077176064252853, 0.0060983188450336456, 0.0046225669793784618, 0.0019583997782319784, 0.0013227460440248251, 0.0061365305446088314, 0.0023901143576949835, 0.0015750245656818151, 0.003362865187227726, 0.0010046372190117836, 0.0018341109389439225, 0.003376395208761096, 0.0061439783312380314, 0.0024177136365324259, 0.0025818208232522011, 0.0036961610894650221, 0.0023792174179106951, 0.0022663145791739225, 0.0017350136768072844, 0.0031279528047889471, 0.0015419487608596683, 0.0034202765673398972, 0.0027657020837068558, 0.0012687558773905039, 0.0034108548425137997, 0.0043540960177779198, 0.0038103912957012653, 0.0018775317585095763, 0.0033308772835880518, 0.0033116030972450972, 0.0022325606551021338, 0.0041636326350271702, 0.0013680298579856753, 0.0022212176118046045, 0.0028949084226042032, 0.0037878628354519606, 0.0032231837976723909, 0.002084431005641818, 0.0025852292310446501, 0.0010433641728013754, 0.0041548758745193481, 0.0027820065151900053, 0.0027921332512050867, 0.0021204594522714615, 0.0019643560517579317, 0.002610685070976615, 0.0015731266466900706, 0.0040283277630805969, 0.0047295009717345238, 0.0045934179797768593, 0.0022747314069420099, 0.0040833237580955029, 0.0019789580255746841, 0.0018650137353688478, 0.0056626982986927032, 0.0027804416604340076, 0.00091414328198879957, 0.0036440438125282526, 0.0028222166001796722, 0.0027842232957482338, 0.0013583694817498326, 0.0032164438161998987, 0.0035655798856168985, 0.0011317263124510646, 0.0011205576593056321, 0.004518511239439249, 0.0022266795858740807, 0.0020205099135637283, 0.0023322063498198986, 0.005562544334679842, 0.0033234641887247562, 0.0030686927493661642, 0.0031529362313449383, 0.0039901304990053177, 0.0041397064924240112, 0.0033484757877886295, 0.0014519639080390334, 0.0034896074794232845, 0.0024205753579735756, 0.0028029822278767824, 0.0029167153406888247, 0.0014548746403306723, 0.0012573557905852795, 0.0024309004656970501, 0.0018715623300522566, 0.0021050530485808849, 0.0045733046717941761, 0.0037986256647855043, 0.0042108017951250076, 0.0031226868741214275, 0.001215654076077044, 0.0025356407277286053, 0.0028112137224525213, 0.0020080551039427519, 0.002827528165653348, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4924, 10358, -19656, 1729, 11885, -14931, -41991, -9250, -4854, 6936, -15665, -13383, 6329, -11978, -3686, -3046, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013695447705686092, 0.00017275421123486012, 0.00017406359256710857, 0.000160497787874192, 9.5937110017985106e-05, 0.00013121607480570674, 8.6173036834225059e-05, 0.00013761606533080339, 0.00010090292198583484, 9.1895337391179055e-05, 0.00015449758211616427, 0.00017860754451248795, 8.443639671895653e-05, 0.00010243013821309432, 0.00014299179019872099, 0.00013998959911987185, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,43,21,-37,71,69,-44,57,-15,116,1,48,-34,34,-14,43,33,82,44,-60,-73,76,-10,49,55,48,39,55,-46,-47,-7,82,-31,12,-72,55,51,-127,-35,12,16,-31,62,-5,-7,-59,-58,-14, 
  /* [1][0][][] */ -50,5,-78,-42,12,87,-58,21,-13,-33,-43,35,59,-20,-29,-25,-27,-32,-4,19,-64,43,-102,-46,-51,-41,49,69,-23,-27,41,-40,12,-56,-32,51,13,-61,127,-38,-24,30,-44,-17,31,53,31,18, 
  /* [2][0][][] */ -1,6,56,-31,-21,-83,21,27,100,78,-64,13,109,-50,127,84,-69,-22,-31,28,88,-84,-31,-97,8,-40,40,-72,40,43,-41,14,31,-24,64,41,-71,8,5,-32,29,33,65,-19,23,-83,100,-60, 
  /* [3][0][][] */ 38,1,-26,-26,31,110,19,-16,41,-47,26,-25,-55,11,8,39,-44,-66,34,-127,-7,-3,-26,-15,-44,91,124,67,-10,-42,30,41,58,-28,99,33,-48,-57,4,38,24,17,-18,-2,24,23,-11,-26, 
  /* [4][0][][] */ 97,-12,9,-51,90,85,49,8,70,-15,-108,31,43,-23,17,-12,-96,-120,-23,-94,-24,27,-42,-37,-80,127,-98,117,-60,-51,25,79,42,-53,13,-28,-5,15,-28,31,-47,-12,-7,55,-49,101,-29,-51, 
  /* [5][0][][] */ 1,-7,-55,6,-15,52,21,-27,63,52,39,88,52,-20,33,-3,-38,127,-19,34,10,0,-64,-14,36,-1,-66,-34,-13,29,19,-15,-38,2,40,14,-45,8,-85,3,88,-20,27,48,-18,10,-40,30, 
  /* [6][0][][] */ 64,15,19,71,9,-25,104,-60,-1,70,127,109,45,45,-55,64,43,-46,-76,94,48,-62,-48,58,-85,97,93,-8,114,52,-35,-5,103,-69,-126,-4,105,32,2,6,17,60,61,-36,67,121,38,-1, 
  /* [7][0][][] */ -97,-5,-25,28,-58,-56,23,47,76,115,-52,-70,-99,11,-19,-16,-75,100,3,119,-46,40,21,39,-18,-90,-30,-78,29,41,-4,5,-19,13,15,-20,2,-56,127,14,4,45,21,-16,56,70,-27,2, 
  /* [8][0][][] */ -8,-87,55,-65,60,-57,68,-38,-23,-117,24,7,-31,4,32,29,-6,4,-45,103,1,37,-18,26,64,-13,-59,-36,-127,-25,-58,-110,8,-66,0,87,-9,30,105,16,18,-4,69,118,-10,-70,-42,80, 
  /* [9][0][][] */ 24,-35,21,-63,45,86,-37,54,16,-40,-34,-15,22,-46,115,-19,10,-116,38,41,-69,38,60,-38,-28,-84,-29,84,59,78,-39,-26,-55,35,-6,127,-25,-43,-54,-28,-31,3,37,110,63,87,-70,14, 
  /* [10][0][][] */ -13,17,-25,-6,18,29,-61,-40,46,40,64,-5,-36,-7,46,-48,-57,127,-3,46,3,-12,17,30,-44,41,2,89,34,6,-31,-8,68,10,-6,24,-9,-47,-35,18,-81,0,24,-18,19,46,30,30, 
  /* [11][0][][] */ -31,48,-17,36,27,53,0,7,17,20,-127,-69,72,16,-10,-42,-1,27,-40,-46,-11,-8,103,3,50,13,-14,34,-5,28,-8,50,28,-6,-50,1,42,80,102,22,33,-29,63,-3,-57,-19,86,6, 
  /* [12][0][][] */ -70,-2,31,25,-66,-57,6,4,-43,-34,-127,19,73,-98,18,31,54,110,84,-126,-30,41,-44,-84,-4,-18,34,-31,8,18,-15,78,66,85,40,-38,-60,-26,35,-2,-36,19,63,-4,40,-13,-40,-40, 
  /* [13][0][][] */ -59,-123,-50,-101,8,22,63,14,-127,30,125,-62,52,46,124,3,123,28,-9,-101,81,-84,118,4,-81,9,-25,15,-40,-99,-111,17,45,-26,-73,60,29,-61,85,-75,-10,60,68,40,62,-26,108,-69, 
  /* [14][0][][] */ 64,17,-55,7,-39,16,-82,-26,-32,61,56,49,-12,-62,12,-47,53,-112,21,8,88,-60,20,-3,-13,127,-88,5,-56,-24,-89,1,122,45,89,-23,-81,14,-21,54,-16,-45,105,-26,-56,-43,-55,52, 
  /* [15][0][][] */ -64,11,37,23,91,7,4,31,18,78,-13,54,51,-13,-38,-17,15,40,-1,-39,31,-36,-50,-50,52,-62,-39,62,-34,3,16,6,-58,2,127,-8,-86,15,61,-14,-44,-17,20,-4,-30,-31,-12,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0058205653913319111, 0.0073420535773038864, 0.0073977024294435978, 0.0068211555480957031, 0.0040773269720375538, 0.0055766832083463669, 0.0036623540800064802, 0.0058486824855208397, 0.0042883739806711674, 0.003905551740899682, 0.0065661468543112278, 0.0075908205471932888, 0.0035885467659682035, 0.0043532806448638439, 0.0060771508142352104, 0.0059495577588677406, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15147, -1049, 19371, -434, 14303, -2160, 34967, 275, 11268, 26770, 3250, 24597, 2438, 11444, 34433, 22837, 332, -3863, 3991, 45301, -85, 19438, 736, 14762, 16233, 30547, -1050, -1471, -2337, 15048, 19758, -151, -504, -1684, 10, 15559, 10846, 28324, 3051, 16665, 26411, 158, 913, 17854, -817, -239, 35688, 23791, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.9990451922640204e-05, 0.0001148318697232753, 6.6011241870000958e-05, 0.00013267944450490177, 0.00010164971899939701, 9.4803093816153705e-05, 5.6055534514598548e-05, 0.00030169359524734318, 0.00010121487139258534, 9.4428876764141023e-05, 6.5374675614293665e-05, 8.2190781540703028e-05, 7.0433459768537432e-05, 9.0231369540560991e-05, 4.9358521209796891e-05, 8.1155238149221987e-05, 9.186767420032993e-05, 8.2635342550929636e-05, 0.00011334091686876491, 5.0280719733564183e-05, 7.4205119744874537e-05, 6.5434585849288851e-05, 9.9638447863981128e-05, 0.00010178651427850127, 6.7286935518495739e-05, 8.4374129073694348e-05, 7.3273775342386216e-05, 4.9770580517360941e-05, 0.0002563802117947489, 8.3558879850897938e-05, 7.9683311923872679e-05, 0.00026396563043817878, 0.00014869849837850779, 0.00013126520207151771, 0.00010457407188368961, 9.7349569841753691e-05, 0.00010411167750135064, 6.2169856391847134e-05, 8.5775347542949021e-05, 0.0001281601726077497, 5.5717660870868713e-05, 0.00019669935863930732, 0.0002907038142438978, 7.2286464273929596e-05, 0.0001794435374904424, 7.5627554906532168e-05, 5.7492925407132134e-05, 7.0522619353141636e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -96,65,-127,93,-101,64,-49,90,-85,-68,63,-49,54,-69,-46,-45,80,76,84,-109,95,-109,77,-88,-80,-54,60,121,-96,-47,-88,65,78,-89,68,-108,-79,-116,82,-48,-13,-87,118,-101,102,56,-72,-54, -123,100,-75,112,-78,115,-47,100,-113,-96,100,-70,90,-107,-63,-72,96,111,127,-127,122,-127,92,-127,-99,-87,80,127,36,-74,-108,101,102,-127,96,-114,-86,-127,106,-75,-106,104,127,-111,-29,103,-88,-85, -64,47,-6,30,-9,61,-26,38,-57,-38,43,-28,40,-37,-31,-17,44,48,62,-37,35,-60,36,-52,-76,-30,28,26,102,-37,-60,22,37,-79,32,-22,-32,-43,41,-42,-114,-29,40,-39,-63,48,-22,-59, 
  /* [0][1][][] */ -101,85,-65,114,-73,100,-113,96,-96,-94,76,-87,80,-99,-85,-90,96,89,-52,-107,101,-114,106,-75,-97,-83,91,106,-127,-88,-95,78,101,41,96,-116,-105,-103,99,-75,-115,-103,95,-127,127,62,-111,-90, -127,127,-108,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-58,-124,127,-117,127,-112,-127,-127,127,114,18,-127,-127,127,127,50,127,-127,-127,-100,127,-127,-127,127,106,-124,-50,127,-127,-127, -78,74,-86,42,-50,33,-59,46,-59,-38,52,-54,55,-51,-54,-19,70,51,-46,-36,35,-61,48,-56,-114,-49,45,42,101,-59,-70,80,43,16,47,-40,-40,-16,56,-60,-56,-60,21,-58,-81,64,-23,-79, 
  /* [0][2][][] */ -53,46,2,44,-29,42,-64,44,-52,-39,27,-51,29,-47,-31,-50,55,36,-79,-27,24,-37,40,-28,-39,-39,35,6,-79,-54,-30,58,36,61,46,-51,-37,-45,26,-39,-99,-46,29,-87,75,24,-56,-58, -79,65,-85,56,-67,38,-75,56,-66,-49,50,-72,47,-60,-52,-52,76,51,-95,-24,29,-34,46,-47,-63,-55,48,28,7,-79,-55,41,38,79,57,-57,-47,-44,31,-56,-53,72,33,-118,-27,57,-66,-79, -34,40,-69,10,-33,-4,-34,20,-18,-11,26,-34,27,-18,-25,5,43,19,-71,-4,13,1,14,-10,-43,-18,17,11,65,-27,-16,36,8,47,24,-6,-9,3,17,-25,11,-17,-9,-30,-44,34,-12,-54, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0033995942212641239, 0.0048803542740643024, 0.0028054777067154646, 0.0056388764642179012, 0.0043201129883527756, 0.0040291314944624901, 0.002382360165938735, 0.012821977026760578, 0.004301631823182106, 0.0040132272988557816, 0.0027784237172454596, 0.0034931080881506205, 0.002993422094732523, 0.0038348331581801176, 0.002097737044095993, 0.0034490975085645914, 0.0039043761789798737, 0.0035120020620524883, 0.0048169889487326145, 0.0021369305904954672, 0.003153717378154397, 0.0027809697203338146, 0.0042346338741481304, 0.0043259267695248127, 0.0028596946503967047, 0.0035859004128724337, 0.0031141354702413082, 0.0021152496337890625, 0.010896159335970879, 0.003551252419129014, 0.0033865408040583134, 0.011218538507819176, 0.0063196863047778606, 0.0055787707678973675, 0.0044443979859352112, 0.0041373567655682564, 0.00442474614828825, 0.0026422189548611641, 0.0036454522050917149, 0.0054468074813485146, 0.0023680005688220263, 0.0083597227931022644, 0.012354912236332893, 0.0030721747316420078, 0.0076263505034148693, 0.0032141709234565496, 0.0024434493388980627, 0.0029972114134579897, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2508, -1261, 744, -2198, 3311, -713, 4559, -4021, 1319, 884, 1736, 4544, 394, -578, 705, 4642, -2159, 3518, 5997, 855, -878, 2484, -992, 5242, 2001, 2282, 1142, -834, 7944, -393, 2199, -2409, -927, 3660, -1230, 2098, 2383, 930, 555, 4052, 1569, 8946, -4525, 2022, 7401, 121, 2918, 2256, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00017352077702526003, 0.00027228740509599447, 0.00030767492717131972, 0.00020267436048015952, 0.00022950867423787713, 0.00022283822181634605, 0.000160867755766958, 0.00013973894238006324, 0.00023853345192037523, 0.00022877076116856188, 0.00022442040790338069, 0.00016776204574853182, 0.00026150324265472591, 0.00024816804216243327, 0.00024799807579256594, 0.00017008808208629489, 0.00020136458624619991, 0.00021978473523631692, 0.00014963507419452071, 0.00026049744337797165, 0.00026321221957914531, 0.00021734708570875227, 0.00018668881966732442, 0.00014989035844337195, 0.00021866826864425093, 0.00017618482524994761, 0.00026923869154416025, 0.00029586686287075281, 0.00011642784374998882, 0.00029450585134327412, 0.00020297993614804, 0.000152904714923352, 0.00018252624431625009, 0.00020726307411678135, 0.00018887121404986829, 0.00024736233172006905, 0.00018717306375037879, 0.00024245106033049524, 0.00017857938655652106, 0.0001866180682554841, 0.00031675052014179528, 9.7824420663528144e-05, 0.00012653222074732184, 0.00021363842824939638, 0.0001137903454946354, 0.00021976223797537386, 0.00019585978589020669, 0.00025948186521418393, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 68,33,127,-39,67,99,-78,-52, 
  /* [1][0][][] */ 10,-79,-127,4,49,24,27,-1, 
  /* [2][0][][] */ -127,-4,-45,-24,57,25,-74,-37, 
  /* [3][0][][] */ 45,70,127,-82,-6,-107,-9,-17, 
  /* [4][0][][] */ -127,24,-49,-24,47,13,-43,-56, 
  /* [5][0][][] */ -102,26,-54,-8,10,38,-85,-127, 
  /* [6][0][][] */ -40,-127,-122,46,102,15,3,49, 
  /* [7][0][][] */ -65,-127,-97,-78,-68,-70,22,91, 
  /* [8][0][][] */ 82,33,-7,-2,96,-77,-127,13, 
  /* [9][0][][] */ -36,51,-56,91,-64,-38,127,-31, 
  /* [10][0][][] */ -27,127,39,64,127,-26,-9,56, 
  /* [11][0][][] */ -81,-32,-21,-8,-81,103,127,-2, 
  /* [12][0][][] */ 70,37,-127,35,-10,-36,-69,-12, 
  /* [13][0][][] */ 59,-27,-69,10,14,-127,-31,-20, 
  /* [14][0][][] */ 12,-78,70,6,127,-108,-58,15, 
  /* [15][0][][] */ -39,-40,-3,127,62,77,-76,26, 
  /* [16][0][][] */ 116,26,-35,18,78,-107,-127,-27, 
  /* [17][0][][] */ 57,127,54,72,45,60,23,-84, 
  /* [18][0][][] */ 37,-12,0,0,127,0,30,-16, 
  /* [19][0][][] */ 8,127,35,14,-113,17,22,-28, 
  /* [20][0][][] */ -47,22,69,-127,21,32,-17,103, 
  /* [21][0][][] */ -34,68,43,-127,33,43,-9,109, 
  /* [22][0][][] */ -76,-71,-96,20,-127,127,119,-23, 
  /* [23][0][][] */ 98,41,-127,23,16,-46,-76,-15, 
  /* [24][0][][] */ -52,41,10,2,-18,73,-127,103, 
  /* [25][0][][] */ -99,-54,-127,8,-58,-67,64,97, 
  /* [26][0][][] */ 45,-8,-38,-34,105,-14,127,-38, 
  /* [27][0][][] */ 127,-69,28,97,3,30,-23,101, 
  /* [28][0][][] */ 48,61,54,-8,127,-56,47,-26, 
  /* [29][0][][] */ -17,-12,-23,-46,-65,13,127,-31, 
  /* [30][0][][] */ 44,-127,-47,-73,-100,-6,7,-50, 
  /* [31][0][][] */ 10,28,-6,-11,-127,3,-27,-11, 
  /* [32][0][][] */ 48,-63,-61,78,-5,-95,118,-127, 
  /* [33][0][][] */ 50,127,48,35,55,-19,-25,-24, 
  /* [34][0][][] */ -124,-30,127,-1,-24,103,91,14, 
  /* [35][0][][] */ -31,77,127,-14,-61,-67,-39,24, 
  /* [36][0][][] */ -100,9,102,-16,-21,127,75,29, 
  /* [37][0][][] */ -24,-80,-6,-127,-42,-87,74,49, 
  /* [38][0][][] */ 50,-18,90,-61,57,58,-127,9, 
  /* [39][0][][] */ -12,90,-127,-43,-19,0,6,85, 
  /* [40][0][][] */ 61,-49,19,29,12,-1,5,127, 
  /* [41][0][][] */ -25,94,127,-3,14,80,-73,27, 
  /* [42][0][][] */ 71,-127,-122,-24,-118,3,12,-100, 
  /* [43][0][][] */ -8,-85,28,-69,127,-44,21,35, 
  /* [44][0][][] */ 2,127,121,17,9,52,-69,6, 
  /* [45][0][][] */ -34,46,13,83,-111,56,-127,21, 
  /* [46][0][][] */ -43,-42,60,50,-127,-117,-33,-5, 
  /* [47][0][][] */ -18,60,52,-111,-127,40,-17,62, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0020408739801496267, 0.0032025231048464775, 0.0036187353543937206, 0.0023837655317038298, 0.0026993786450475454, 0.0026209237985312939, 0.0018920548027381301, 0.0016435472061857581, 0.0028055240400135517, 0.0026906996499747038, 0.0026395327877253294, 0.0019731423817574978, 0.0030756846535950899, 0.0029188420157879591, 0.002916842931881547, 0.0020005002152174711, 0.0023683605249971151, 0.0025850101374089718, 0.0017599411075934768, 0.0030638547614216805, 0.0030957846902310848, 0.0025563396047800779, 0.0021957505960017443, 0.0017629435751587152, 0.0025718787219375372, 0.0020722073968499899, 0.003166665555909276, 0.0034798539709299803, 0.0013693723594769835, 0.0034638463985174894, 0.0023873595055192709, 0.0017983971629291773, 0.0021467923652380705, 0.0024377359077334404, 0.0022214190103113651, 0.002909365575760603, 0.0022014460992068052, 0.0028516012243926525, 0.0021003710571676493, 0.0021949184592813253, 0.0037254784256219864, 0.0011505672009661794, 0.0014882155228406191, 0.0025127199478447437, 0.0013383512850850821, 0.0025847454089671373, 0.0023036154452711344, 0.0030519100837409496, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2810, 969, 22499, -4974, 4898, -14862, 2126, -14262, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00010633281635819003, 0.00010786127677420154, 0.00014395744074136019, 0.00011220137093914673, 0.00012031909136567265, 0.00012753522605635226, 8.7921900558285415e-05, 8.4998813690617681e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-50,-21,-61,0,-10,90,86,-100,-82,-32,11,-57,-3,-58,34,-83,8,11,127,55,-28,15,90,68,70,29,1,-86,-54,-75,-54,-52,99,31,-51,31,-34,91,-8,24,9,2,-104,39,-30,-35,-85, 
  /* [1][0][][] */ -14,54,-18,-28,-74,59,-22,-51,-35,71,-16,15,56,45,-51,-8,-23,-122,77,-53,127,7,-66,21,58,-2,-85,60,37,-12,72,35,-34,-17,6,-12,-1,108,-19,-24,70,41,-7,12,109,16,-32,58, 
  /* [2][0][][] */ -25,-35,109,3,80,-41,-13,20,-32,-2,-13,42,7,-40,-45,-127,-52,-97,-22,13,-92,19,-37,-32,-48,15,0,-44,-42,5,-30,-10,0,-6,26,-3,27,-30,-46,7,33,-32,28,-45,-43,-44,-62,-49, 
  /* [3][0][][] */ 52,16,62,10,15,-32,33,67,-54,-23,42,-26,-67,60,-14,48,65,27,-33,34,-106,-69,127,-3,5,1,-59,-33,-46,66,111,-62,4,-107,-19,41,-16,-74,-16,71,-70,-57,63,-3,-90,-72,55,-9, 
  /* [4][0][][] */ 18,-20,70,-26,5,-10,-6,-5,-61,-6,-23,9,46,-71,43,-100,43,44,-11,-34,9,32,21,7,-1,5,60,-16,25,23,-127,-12,-29,-23,4,15,49,-4,36,2,-39,-9,-70,30,-17,-97,0,19, 
  /* [5][0][][] */ 27,-46,64,28,32,17,27,-1,-75,-9,-46,27,34,6,11,-47,92,76,-1,-17,89,-59,127,-88,-13,44,1,45,12,14,-34,-50,-16,-43,-35,13,40,29,66,7,-76,26,35,27,51,-19,81,0, 
  /* [6][0][][] */ -43,56,-127,83,54,24,41,22,-20,-5,65,-75,-95,-21,-31,32,-117,33,-6,91,24,50,-86,-88,-4,-19,22,74,-29,-35,-48,6,36,77,-44,-28,-19,-4,78,1,72,62,-118,-56,-33,116,-54,-34, 
  /* [7][0][][] */ 32,73,-83,16,19,65,127,79,41,78,-101,0,-45,4,-68,-48,32,36,117,108,84,8,127,28,105,97,-54,103,-68,31,-5,-79,19,-70,-27,24,3,103,-61,79,-65,45,-8,-85,79,-24,50,-36, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0045191445387899876, 0.0045841042883694172, 0.0061181909404695034, 0.0047685583122074604, 0.0051135611720383167, 0.0054202470928430557, 0.003736680606380105, 0.0036124496255069971, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 485, 10601, -371, 262, 825, -1226, 1526, 334, -3689, 342, -6593, -168, 221, -772, -1961, 4281, 5823, 1893, 23, -3917, -6760, 69, 15633, -4655, -746, -1288, 4547, -6387, -731, 333, -8380, 8672, 4922, 134, 4500, -403, 12, -340, 8802, 1190, 8015, -2113, 2714, 5057, -1184, 9253, -794, 19, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00023908988805487752, 0.00014917134831193835, 0.0007631352636963129, 0.00016851937107276171, 0.00024320402008015662, 0.00026703195180743933, 0.00020689741359092295, 0.00029196153627708554, 9.9216646049171686e-05, 0.00025321939028799534, 0.00021762335381936282, 0.0016183413099497557, 0.00045572512317448854, 0.0006091020186431706, 0.00042286573443561792, 0.00067632360151037574, 0.00019163877004757524, 6.6184278693981469e-05, 0.00025566673139110208, 0.00030573602998629212, 0.00027368322480469942, 0.00023458857322111726, 9.3649090558756143e-05, 0.00048461288679391146, 0.00020866966224275529, 0.00042186718201264739, 0.00036747645935975015, 0.00019581749802455306, 0.00022215905482880771, 0.00050709227798506618, 0.00012420832354109734, 0.00012757166405208409, 0.00012966898793820292, 0.00019698592950589955, 0.00012915350089315325, 0.00028578680939972401, 0.0020578866824507713, 0.00039484555600211024, 0.00015859653649386019, 0.00015812049969099462, 0.00013649875472765416, 0.00014164301683194935, 0.00031776455580256879, 0.00019279573461972177, 0.00046795251546427608, 9.5709248853381723e-05, 6.5249296312686056e-05, 0.00019986489496659487, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-45,8,4,-18,-102,-37,47,-37,-7,-4,12,44,-6,-15,4,98,22,21,2,0,-23,-70,19,-8,-12,-2,-28,-63,72,-17,-117,56,-7,-58,-51,-9,-33,12,-19,-19,42,11,8,-9,59,127,-18, -127,-96,-23,127,-66,71,-91,127,26,13,14,-1,49,18,-4,-43,-28,65,24,9,8,127,12,127,127,-27,-44,45,71,-126,-11,-78,74,-7,-46,-119,25,12,-54,-58,-127,-5,-93,-127,34,52,56,119, -16,-7,11,7,-25,34,41,43,10,-39,2,6,-23,-1,-6,5,-58,39,-69,-24,-9,-28,127,21,-60,5,11,-5,19,38,8,17,0,-17,-42,76,7,3,19,66,23,-26,27,-33,-7,29,-20,-21, 
  /* [0][1][][] */ -14,-25,-29,-3,31,-111,127,-90,-14,7,23,40,127,20,1,-34,-20,-27,28,40,64,-65,40,11,-68,127,-78,-23,127,-97,49,-127,-42,8,-83,20,11,-62,-39,2,115,127,14,-127,-63,-60,-1,88, 90,-127,127,-2,127,67,-66,-58,26,127,127,-127,-97,127,127,127,127,127,120,127,127,121,5,3,119,-96,-127,127,41,127,127,5,-127,127,127,127,-127,127,-127,-127,37,33,-127,-35,127,-127,-10,86, 19,31,-40,-7,-51,127,-112,90,112,-80,12,65,-39,14,9,-64,18,10,-127,17,19,-112,-33,-3,72,-11,-20,123,-75,-37,27,-32,-27,17,95,-24,39,-7,0,-93,107,-4,33,51,-56,84,96,-87, 
  /* [0][2][][] */ -6,21,5,-33,1,-71,-12,-14,5,-4,3,6,-13,-12,-2,-2,-48,20,11,-38,2,-25,83,-11,-118,6,41,-27,6,-1,1,38,-12,-8,-74,35,1,-10,22,42,-29,-6,15,8,-16,14,-11,10, 35,-18,-35,-38,28,30,116,-109,127,-35,-4,9,-71,-24,-23,-71,-17,112,4,23,10,26,-21,-34,-86,59,80,-11,-97,13,-34,-6,-24,-6,-44,7,56,-25,3,117,-118,-8,-7,64,36,48,10,-127, -12,26,4,-22,-14,-9,-9,-57,-24,-25,-10,7,19,-11,-13,14,47,42,-28,-18,-7,-29,-46,-15,17,-22,26,-18,-15,1,-12,23,27,-16,-31,-47,-5,3,32,11,-11,-18,12,19,-13,12,64,-51, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010161319747567177, 0.0063397819176316261, 0.032433249056339264, 0.0071620731614530087, 0.01033617090433836, 0.011348857544362545, 0.0087931398302316666, 0.012408365495502949, 0.0042167073115706444, 0.010761823505163193, 0.0092489924281835556, 0.068779505789279938, 0.019368316978216171, 0.025886835530400276, 0.017971793189644814, 0.028743751347064972, 0.0081446478143334389, 0.0028128318954259157, 0.010865835472941399, 0.012993780896067619, 0.011631537228822708, 0.0099700139835476875, 0.0039800861850380898, 0.02059604786336422, 0.0088684605434536934, 0.017929354682564735, 0.015617748722434044, 0.0083222435787320137, 0.0094417594373226166, 0.021551420912146568, 0.0052788536995649338, 0.005421795416623354, 0.0055109318345785141, 0.008371901698410511, 0.0054890234023332596, 0.012145939283072948, 0.08746018260717392, 0.016780935227870941, 0.0067403526045382023, 0.0067201210185885429, 0.005801196675747633, 0.0060198279097676277, 0.013504993170499802, 0.0081938188523054123, 0.019887981936335564, 0.004067643079906702, 0.0027730951551347971, 0.008494257926940918, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2623, 4304, 12263, 1662, 2655, -1518, 4626, 10924, 3361, -698, 3320, -2330, 14575, -2048, 1806, 18342, -323, 1989, 116, 2543, 3193, 3895, 383, 29817, 7096, 3559, 14714, 1543, 5032, 6193, 650, 1009, 818, 1724, -279, 226, -2776, -537, 1833, 2533, 4565, 1908, 3834, 3635, 4736, 3008, 1502, 6070, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00023652383242733777, 0.00018738482322078198, 7.7681135735474527e-05, 0.00018471668590791523, 0.00018740164523478597, 0.00027110663359053433, 0.00016757582488935441, 8.8554785179439932e-05, 0.00016664636495988816, 0.00025616452330723405, 0.00025113928131759167, 0.0002139565913239494, 6.5717933466657996e-05, 0.00021363301493693143, 0.00026213971432298422, 5.8343561249785125e-05, 0.00035308071528561413, 0.00021118058066349477, 0.00030792885809205472, 0.00023509704624302685, 0.00021638741600327194, 0.00019455162691883743, 0.00044053461169824004, 3.7394278479041532e-05, 0.00012128627713536844, 0.00016295142995659262, 6.8049099354539067e-05, 0.00025946044479496777, 0.00015375936345662922, 0.00012295407941564918, 0.00041943194810301065, 0.00042650190880522132, 0.00022610754240304232, 0.00022956676548346877, 0.00031777439289726317, 0.00031137143378145993, 0.00020508711168076843, 0.00029734510462731123, 0.00031439808662980795, 0.00020839337958022952, 0.00017267813382204622, 0.00025960206403397024, 0.00021347393339965492, 0.00022095920576248318, 0.00015286334382835776, 0.00023035446065478027, 0.00042115445830859244, 0.00013619505625683814, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-80,-84,10,86,12,62, 
  /* [1][0][][] */ 60,-75,48,-127,-54,68,-87,-45, 
  /* [2][0][][] */ -30,127,120,51,114,1,49,7, 
  /* [3][0][][] */ 100,45,-88,66,-3,-104,-127,-30, 
  /* [4][0][][] */ -49,38,18,-66,-43,121,127,49, 
  /* [5][0][][] */ 20,83,-127,-79,44,94,36,-26, 
  /* [6][0][][] */ -10,127,61,54,74,14,14,-95, 
  /* [7][0][][] */ 127,-23,-38,30,18,5,110,14, 
  /* [8][0][][] */ 56,127,65,97,110,87,105,-90, 
  /* [9][0][][] */ 47,118,-127,-86,12,104,9,76, 
  /* [10][0][][] */ -68,-48,19,-52,-6,-27,-46,127, 
  /* [11][0][][] */ 19,-111,-127,-20,24,-15,36,-10, 
  /* [12][0][][] */ -30,-104,-116,-26,-127,26,-58,43, 
  /* [13][0][][] */ -8,8,-102,100,-127,-26,0,-15, 
  /* [14][0][][] */ -62,-41,-127,-8,36,-5,-12,-56, 
  /* [15][0][][] */ 19,-96,-127,13,-94,-26,-31,-11, 
  /* [16][0][][] */ 127,-65,-17,71,-85,24,33,105, 
  /* [17][0][][] */ -28,112,127,-26,-48,-13,-26,-19, 
  /* [18][0][][] */ 9,-127,49,74,1,-65,50,-82, 
  /* [19][0][][] */ 127,-45,-60,37,-101,8,42,107, 
  /* [20][0][][] */ -31,-127,84,76,-13,-91,0,-73, 
  /* [21][0][][] */ -7,-54,-15,-37,127,-5,47,19, 
  /* [22][0][][] */ -127,28,-74,50,48,48,-88,-102, 
  /* [23][0][][] */ -87,-52,59,-7,-109,127,122,-53, 
  /* [24][0][][] */ -28,52,-9,-47,-47,115,127,1, 
  /* [25][0][][] */ -57,-116,-127,-65,-57,-16,-30,-46, 
  /* [26][0][][] */ -14,66,-14,127,-99,37,-54,0, 
  /* [27][0][][] */ 14,-127,35,80,13,-57,8,-122, 
  /* [28][0][][] */ 21,127,65,49,121,-24,30,-69, 
  /* [29][0][][] */ 110,34,-35,-5,90,-127,-116,35, 
  /* [30][0][][] */ 24,-10,29,-127,15,-20,17,-24, 
  /* [31][0][][] */ 44,-40,4,62,-12,28,10,127, 
  /* [32][0][][] */ -84,-76,9,-68,-62,127,68,89, 
  /* [33][0][][] */ -30,40,44,-40,37,127,-103,71, 
  /* [34][0][][] */ 25,127,-68,-51,22,50,-62,68, 
  /* [35][0][][] */ 10,-127,34,59,-26,-63,36,-81, 
  /* [36][0][][] */ -17,-31,-81,-8,-127,-60,-19,13, 
  /* [37][0][][] */ -56,-127,78,90,-42,-91,-16,-49, 
  /* [38][0][][] */ -72,23,61,-67,-127,-83,-59,81, 
  /* [39][0][][] */ 71,-127,98,53,-10,-71,-11,-86, 
  /* [40][0][][] */ -1,61,25,47,-127,-10,-60,21, 
  /* [41][0][][] */ 101,127,-76,-105,55,25,-1,19, 
  /* [42][0][][] */ -9,-38,-16,12,127,14,47,21, 
  /* [43][0][][] */ 127,23,81,20,-67,-22,60,102, 
  /* [44][0][][] */ 65,49,-18,20,76,-115,-127,25, 
  /* [45][0][][] */ 45,16,23,22,82,-127,0,-48, 
  /* [46][0][][] */ 55,-35,-7,127,39,55,18,74, 
  /* [47][0][][] */ -83,-77,44,67,-54,15,127,-77, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.003301538061350584, 0.0026156269013881683, 0.0010843187337741256, 0.002578383544459939, 0.0026158618275076151, 0.0037842649035155773, 0.0023391214199364185, 0.0012360995169728994, 0.002326147397980094, 0.0035756942816078663, 0.0035055491607636213, 0.002986531239002943, 0.00091732933651655912, 0.0029820145573467016, 0.0036590993404388428, 0.00081439357018098235, 0.0049285073764622211, 0.0029477821663022041, 0.0042982511222362518, 0.0032816221937537193, 0.0030204621143639088, 0.0027156653814017773, 0.0061492398381233215, 0.00052197120385244489, 0.0016929848352447152, 0.0022745714522898197, 0.00094986916519701481, 0.0036217006854712963, 0.0021462631411850452, 0.0017162649892270565, 0.0058546764776110649, 0.0059533631429076195, 0.0031561413779854774, 0.0032044271938502789, 0.0044356808066368103, 0.0043463045731186867, 0.0028627258725464344, 0.0041505168192088604, 0.0043885526247322559, 0.0029088766314089298, 0.002410342451184988, 0.0036236776504665613, 0.0029797940514981747, 0.0030842779669910669, 0.0021337559446692467, 0.0032154223881661892, 0.0058787204325199127, 0.0019010903779417276, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7209, 15300, -4661, 6941, -448, 3539, -11431, -18282, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00020900488016195595, 0.00013971263251733035, 0.00014815693430136889, 0.00015733647160232067, 0.00021134009875822812, 0.00016417885490227491, 0.0002035459183389321, 0.0001518045028205961, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -45,-4,33,13,-32,-13,12,10,-42,-7,-62,-57,-25,-62,-11,-29,47,-41,39,41,-15,32,-36,12,2,-39,55,-15,-4,-18,16,10,81,36,37,-127,18,0,-15,-36,5,-15,43,49,35,5,29,2, 
  /* [1][0][][] */ -1,39,63,-26,-12,46,-48,-32,0,22,-17,-90,10,90,-19,56,-19,21,-25,-52,8,-76,-29,21,-72,-13,-4,-114,-27,-16,31,-51,46,76,-43,3,127,-29,3,49,-32,41,-83,-29,113,-21,-33,-25, 
  /* [2][0][][] */ -6,-20,-63,15,-1,43,27,1,-8,42,-5,29,66,-94,15,-64,36,-88,24,36,-27,53,-4,26,-19,60,-25,-70,15,3,21,-70,-48,-90,33,-29,106,24,-12,-59,-3,28,78,26,127,15,19,24, 
  /* [3][0][][] */ -4,25,-64,39,15,-37,-67,-100,13,-23,-36,-1,6,27,33,76,-6,15,-36,23,4,-95,27,-58,-70,-9,127,-11,-42,3,-66,15,-1,-78,9,-12,-19,-39,-23,101,-46,-34,-1,18,40,2,-37,39, 
  /* [4][0][][] */ -27,-45,-5,7,30,-30,-11,-7,27,-30,57,-79,4,28,7,8,-17,-23,10,-14,-4,-52,4,-20,17,-11,39,50,32,20,-16,29,-10,-2,2,-1,-70,85,37,-25,29,-21,-22,-24,-79,11,127,10, 
  /* [5][0][][] */ 43,-22,1,15,26,-40,34,-127,26,-27,-10,119,-78,67,21,-64,-1,-91,15,1,-34,63,-34,-46,-61,77,-24,1,-21,50,-42,-35,26,53,33,-4,-39,-7,-45,-43,15,-37,-44,-7,-33,55,89,20, 
  /* [6][0][][] */ 53,-23,21,-11,-34,-18,-35,18,-38,8,-41,127,-43,-35,-4,55,9,46,14,32,38,-82,-20,19,21,39,-64,6,7,-40,13,36,7,17,-16,-3,12,-1,-5,-3,-10,-16,41,55,-3,-34,70,-14, 
  /* [7][0][][] */ -26,6,-6,65,32,34,7,32,22,4,71,-3,123,108,61,48,45,49,-17,5,24,-20,-87,-27,17,-4,-31,67,32,-27,-35,-16,37,6,40,-99,-78,37,38,59,-31,33,84,127,-63,-26,-112,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0088827069848775864, 0.0059377867728471756, 0.0062966695986688137, 0.006686799693852663, 0.0089819543063640594, 0.0069776014424860477, 0.008650701493024826, 0.006451691035181284, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12320, 5862, 3851, -136, 1474, -516, 627, 31497, -975, 2131, 9030, 54612, 2165, 3291, 178, 10927, -634, 13299, 405, 7720, 12967, 648, 3669, -9541, 12292, 1267, 1659, 13557, 1693, -825, -9035, 10133, 4891, 2184, -84, 3098, -8731, 8397, -356, 19469, -1015, -157, 4741, 444, 530, -177, 1526, -799, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.4279938417021185e-05, 8.0165278632193804e-05, 0.00020095160289201885, 0.00019771272491198033, 0.00081422232324257493, 0.00015671917935833335, 0.0001564343401696533, 0.0001113315302063711, 0.00014195428229868412, 0.00010029866825789213, 6.0299797041807324e-05, 5.8813686337089166e-05, 8.6113897850736976e-05, 7.3554620030336082e-05, 0.00024112647224683315, 0.0001601708063390106, 0.00011726064985850826, 0.0003437110863160342, 0.00013685664453078061, 0.0001227804459631443, 0.00011036819341825321, 0.00035589822800830007, 0.00014308071695268154, 0.00025852411636151373, 0.0001099908840842545, 0.0001020080380840227, 6.2706778408028185e-05, 0.00010772278619697317, 0.00012994206917937845, 0.00093181198462843895, 0.00026073091430589557, 9.1148423962295055e-05, 0.00011165591422468424, 0.00017896702047437429, 0.00015635399904567748, 6.8622925027739257e-05, 0.00010399978782515973, 4.9378697440261021e-05, 0.00011254411219852045, 7.0069807406980544e-05, 0.00012315444473642856, 0.00015827010793145746, 7.5451673183124512e-05, 9.4641101895831525e-05, 8.0783516750670969e-05, 0.00036063953302800655, 6.9814755988772959e-05, 0.00025770685169845819, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-105,-7,-22,127,-60,66,-57,-86,-81,-26,-40,110,33,61,-127,60,-24,1,-34,-87,112,2,16,-13,80,61,-32,69,-70,13,-40,-104,-85,47,71,18,80,111,-72,-127,-19,31,69,52,-127,85,87, -60,-125,-75,51,-88,107,65,-69,-68,44,74,-104,127,89,107,-75,-86,-84,33,-47,-90,102,-58,116,-88,102,87,-119,84,-52,7,-125,-50,-86,76,127,114,116,127,-72,-127,-72,64,86,82,105,92,80, 5,-57,-69,97,-49,-29,19,-9,94,19,56,-76,17,48,-39,-5,-87,-19,31,-34,-36,9,-76,2,-71,40,13,-88,28,54,116,-75,19,16,-15,50,73,72,45,-5,-19,94,55,28,35,27,18,-115, 
  /* [0][1][][] */ -119,-106,-9,-73,-87,-79,105,-113,-127,-127,84,-73,93,44,-125,-75,127,-127,-63,-72,-87,120,-46,11,-10,99,106,-45,-107,-78,1,-47,-93,-127,-127,65,37,87,4,-89,56,-19,76,117,85,105,117,-127, -127,-127,-127,-102,-30,127,127,-127,95,67,127,-127,113,127,63,-112,53,-95,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-13,-127,-127,-108,50,123,127,127,-14,-127,98,-105,127,127,127,-5,127,121, -52,-63,-116,127,73,-46,44,-28,70,23,19,-64,8,59,71,-49,-21,2,-17,-71,-61,5,-76,-14,-111,46,21,-89,-55,37,127,-87,-51,16,59,76,78,73,-28,-33,46,127,73,19,48,-49,22,28, 
  /* [0][2][][] */ -106,-34,26,18,-45,-31,17,-46,30,-44,13,-40,1,18,-47,-21,-83,-23,94,-28,-15,32,-60,-14,0,53,72,-15,29,56,-7,-2,6,-82,-43,39,10,9,-58,-45,17,-6,32,45,29,51,15,-64, -92,-49,-26,-73,88,40,50,-57,97,23,-45,-64,-3,40,-127,-80,34,7,50,-63,-47,25,-52,55,-65,60,71,-37,31,4,-24,-37,-57,-23,-69,57,33,15,-105,-72,27,-49,76,68,41,-109,26,6, -30,-35,-48,-24,-27,-14,14,-25,-69,10,-20,-19,-13,12,30,-31,31,37,0,-44,-42,-16,-10,-29,-56,9,14,-21,4,-64,52,-21,-77,24,17,47,17,21,-56,-35,4,48,20,20,15,-4,8,43, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0031568973790854216, 0.0034070243127644062, 0.0085404431447386742, 0.0084027908742427826, 0.034604448825120926, 0.0066605652682483196, 0.0066484594717621803, 0.0047315899282693863, 0.0060330568812787533, 0.0042626932263374329, 0.0025627412833273411, 0.0024995815474539995, 0.003659840440377593, 0.0031260713003575802, 0.01024787500500679, 0.0068072592839598656, 0.004983577411621809, 0.014607721008360386, 0.0058164075016975403, 0.0052181687206029892, 0.0046906480565667152, 0.015125674195587635, 0.006080930121243, 0.010987275280058384, 0.0046746125444769859, 0.0043353415094316006, 0.0026650379877537489, 0.0045782183296978474, 0.0055225379765033722, 0.03960200771689415, 0.011081063188612461, 0.0038738080766052008, 0.0047453762963414192, 0.0076060984283685684, 0.0066450447775423527, 0.0029164741281419992, 0.0044199908152222633, 0.0020985945593565702, 0.0047831246629357338, 0.0029779667966067791, 0.0052340640686452389, 0.0067264791578054428, 0.0032066958956420422, 0.0040222466923296452, 0.0034332992509007454, 0.015327179804444313, 0.0029671271331608295, 0.010952540673315525, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1178, -423, -352, 1267, 14480, 1527, -505, 4210, 1381, 975, 262, 2976, 961, 441, -874, 394, 2880, 9824, 3029, -683, 1163, -1420, -109, 1951, -221, -761, 1450, -15, 3298, 15568, 1821, -27, 429, -69, 2434, -11, 414, -191, 1206, 1237, 1559, 1907, 160, -287, 691, 2184, 1446, -181, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00044223875738680363, 0.00042622952605597675, 0.00032984695280902088, 0.00030637069721706212, 6.8304339947644621e-05, 0.00039867617306299508, 0.00053033261792734265, 0.00021418448886834085, 0.00030761005473323166, 0.00067823345307260752, 0.0002978642878588289, 0.00030478645930998027, 0.00026968892780132592, 0.00043106666998937726, 0.00030900663114152849, 0.00032569479662925005, 0.00025629103765822947, 9.40454046940431e-05, 0.00025369247305206954, 0.00039044625009410083, 0.00037395767867565155, 0.00018972600810229778, 0.00050923263188451529, 0.0003879520227201283, 0.000564187066629529, 0.00069978565443307161, 0.0003451101656537503, 0.00098900042939931154, 0.00024457581457681954, 6.3753490394446999e-05, 0.00039585301419720054, 0.00089988624677062035, 0.00042600673623383045, 0.00048464289284311235, 0.00030029879417270422, 0.00035110849421471357, 0.00047421190538443625, 0.00058966106735169888, 0.00035907348501496017, 0.00048967543989419937, 0.00035467749694362283, 0.00034582955413497984, 0.00038919405778869987, 0.00047812593402341008, 0.000429902458563447, 0.00023761563352309167, 0.00025649499730207026, 0.00031206643325276673, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -42,31,6,-16,-84,-39,-127,29, 
  /* [1][0][][] */ 81,-76,-57,-56,127,-90,94,22, 
  /* [2][0][][] */ -104,127,-47,-123,54,-20,-25,40, 
  /* [3][0][][] */ 51,27,98,5,103,120,127,-11, 
  /* [4][0][][] */ -70,-127,68,7,-57,-113,5,-32, 
  /* [5][0][][] */ 127,-26,63,65,-67,-6,-1,-22, 
  /* [6][0][][] */ 23,34,127,-27,42,-35,-45,31, 
  /* [7][0][][] */ 29,8,-127,-32,-41,97,95,-72, 
  /* [8][0][][] */ -5,127,-38,16,59,101,44,57, 
  /* [9][0][][] */ -5,127,-60,85,16,-111,45,122, 
  /* [10][0][][] */ 2,-126,-3,-32,-75,-127,-60,-83, 
  /* [11][0][][] */ -127,-76,106,47,-5,-60,96,65, 
  /* [12][0][][] */ -28,43,-127,82,34,-54,-79,104, 
  /* [13][0][][] */ 94,-127,95,82,11,35,39,-63, 
  /* [14][0][][] */ -30,100,-36,-127,-26,-110,-27,-66, 
  /* [15][0][][] */ 39,115,30,-17,34,-67,98,-127, 
  /* [16][0][][] */ -109,-127,-56,94,-53,19,-18,73, 
  /* [17][0][][] */ -28,-106,-127,83,-62,75,-53,75, 
  /* [18][0][][] */ -93,-70,-47,92,-5,74,-4,127, 
  /* [19][0][][] */ 57,-122,97,-127,10,-67,30,-30, 
  /* [20][0][][] */ -6,73,30,16,38,127,72,-8, 
  /* [21][0][][] */ 26,113,44,-32,38,-69,95,-127, 
  /* [22][0][][] */ 24,13,99,17,-7,127,28,-33, 
  /* [23][0][][] */ -98,-65,34,-72,89,95,-57,-127, 
  /* [24][0][][] */ -95,-91,36,-84,113,113,-46,-127, 
  /* [25][0][][] */ 127,11,-61,-14,14,34,-62,-8, 
  /* [26][0][][] */ -127,-37,-120,-21,-53,-31,21,0, 
  /* [27][0][][] */ 80,37,-1,-59,-127,-22,88,95, 
  /* [28][0][][] */ -127,-79,9,49,-73,-101,2,-2, 
  /* [29][0][][] */ 127,98,47,-127,24,7,-61,-97, 
  /* [30][0][][] */ -93,-70,40,-70,76,95,-55,-127, 
  /* [31][0][][] */ 50,46,-6,127,4,-72,6,8, 
  /* [32][0][][] */ -29,127,-7,36,22,69,-15,47, 
  /* [33][0][][] */ -33,127,-71,27,21,-35,-21,-2, 
  /* [34][0][][] */ -127,-113,-46,105,-14,17,21,102, 
  /* [35][0][][] */ -52,127,-33,-3,72,107,55,68, 
  /* [36][0][][] */ 67,30,1,-48,-127,-31,102,109, 
  /* [37][0][][] */ -67,114,30,20,-127,109,-26,-100, 
  /* [38][0][][] */ 36,32,33,18,127,74,99,58, 
  /* [39][0][][] */ -26,-72,37,-21,9,37,-99,127, 
  /* [40][0][][] */ -71,-56,-75,127,-30,0,12,68, 
  /* [41][0][][] */ 127,14,62,110,-46,-9,-9,-19, 
  /* [42][0][][] */ -40,7,-68,-127,52,-107,2,81, 
  /* [43][0][][] */ 28,-5,90,-3,38,127,93,5, 
  /* [44][0][][] */ -29,-27,-72,127,47,11,-40,-40, 
  /* [45][0][][] */ 61,127,104,-117,52,-59,18,-114, 
  /* [46][0][][] */ -36,-127,-41,34,-9,42,-67,126, 
  /* [47][0][][] */ 40,46,127,3,95,123,122,-23, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.004265414085239172, 0.0041110040619969368, 0.0031813897658139467, 0.0029549601022154093, 0.00065879861358553171, 0.0038452506996691227, 0.0051150834187865257, 0.002065819688141346, 0.0029669136274605989, 0.0065415939316153526, 0.0028729152400046587, 0.0029396798927336931, 0.002601162763312459, 0.0041576586663722992, 0.0029803838115185499, 0.0031413419637829065, 0.0024719394277781248, 0.00090707244817167521, 0.0024468761403113604, 0.0037658726796507835, 0.0036068398039788008, 0.0018299163784831762, 0.0049115731380879879, 0.0037418159190565348, 0.0054416111670434475, 0.0067494660615921021, 0.0033286041580140591, 0.009538956917822361, 0.00235894531942904, 0.00061490543885156512, 0.0038180213887244463, 0.0086794458329677582, 0.0041088555008172989, 0.0046744039282202721, 0.0028963962104171515, 0.0033864581491798162, 0.0045737964101135731, 0.0056873094290494919, 0.0034632808528840542, 0.0047229430638253689, 0.0034208814613521099, 0.003335542744025588, 0.00375379528850317, 0.0046115475706756115, 0.0041464297100901604, 0.0022918141912668943, 0.0024739066138863564, 0.0030098957940936089, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7578, -3082, 11796, -9826, 22075, 7160, -8975, 11298, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00019488440011627972, 0.00023039506049826741, 0.00019627588335424662, 0.00025670998729765415, 0.00017577962717041373, 0.00015513900143560022, 0.00015326154243666679, 0.00028531340649351478, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -11,-13,-21,-65,-27,-33,20,-19,37,9,-31,-5,109,127,-19,-106, 
  /* [1][0][][] */ 127,-59,-43,17,-46,74,-68,-42,-40,86,-35,-51,-9,3,-63,-17, 
  /* [2][0][][] */ -37,-97,43,42,44,-55,-76,-21,28,-88,27,-127,42,-21,-76,23, 
  /* [3][0][][] */ 39,11,15,15,-13,67,-53,-21,127,45,11,23,2,-12,11,21, 
  /* [4][0][][] */ -94,-34,-26,-127,-11,38,55,-112,33,-17,-47,-36,-117,32,-36,-27, 
  /* [5][0][][] */ 88,51,68,-30,45,-47,-127,-125,-15,-75,65,48,-56,51,64,-47, 
  /* [6][0][][] */ 108,37,-122,-76,31,-71,4,-92,-42,21,-127,93,89,-90,5,75, 
  /* [7][0][][] */ -127,-5,98,-27,-64,2,-3,-60,-52,60,86,-32,60,-25,29,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.008282586932182312, 0.0097917895764112473, 0.0083417249843478203, 0.010910173878073692, 0.0074706343002617359, 0.0065934075973927975, 0.0065136151388287544, 0.012125818990170956, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 23817, -330, -320, 3222, -907, 79, 9941, 1555, -1251, 337, -2023, 2701, -553, -590, -172, -1325, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.6040552307385951e-05, 0.00022705941228196025, 0.00018290926527697593, 0.00017993040091823786, 0.0012413491494953632, 0.001003829762339592, 0.00016835938731674105, 0.0008018030202947557, 0.00038051436422392726, 0.0013624036218971014, 0.00020475269411690533, 0.00022445076319854707, 0.00011545793677214533, 0.00022908125538378954, 0.00022193726908881217, 0.00047745008487254381, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-6,3,5,-18,11,6,15,-4,-12,-1,-11,-4,-7,-1,0, 5,-6,0,5,14,-2,10,-27,-6,8,-5,87,-10,21,4,1, 1,-6,-6,4,3,-13,-3,10,3,1,-4,-11,1,-4,-5,0, 
  /* [0][1][][] */ 13,-11,3,5,127,-23,-127,-22,127,127,-1,-7,110,-24,-2,-18, -127,127,127,1,-88,-91,-15,-103,16,-107,127,127,127,127,127,127, 19,-4,-4,1,-9,127,1,-11,-2,-13,-3,-7,9,-3,-13,-8, 
  /* [0][2][][] */ 2,-5,-1,-16,-19,16,51,6,-8,-8,-2,-2,-7,1,-7,-11, 23,-15,-5,-127,6,-15,-9,127,-4,1,2,-16,-12,-56,-9,-35, 4,-5,-4,-4,1,-4,-2,-3,1,2,-3,-1,-2,-4,-9,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0040817232802510262, 0.0096500245854258537, 0.0077736438252031803, 0.0076470421627163887, 0.052757337689399719, 0.042662762105464935, 0.0071552740409970284, 0.034076627343893051, 0.016171859577298164, 0.057902153581380844, 0.0087019894272089005, 0.0095391571521759033, 0.0049069621600210667, 0.0097359530627727509, 0.0094323335215449333, 0.020291628316044807, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 155, 174, -52, 935, 47730, 38685, 3530, 8927, 3428, 8052, 732, 52, 4039, 70, 0, 24819, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0002302092470927164, 0.00087811361299827695, 0.00029510716558434069, 0.00017958341049961746, 2.9820135750924237e-05, 3.9005775761324912e-05, 0.00016153673641383648, 3.2992837077472359e-05, 0.00021892097720410675, 4.274048114893958e-05, 0.00048473340575583279, 0.00070533063262701035, 0.00045419821981340647, 2.0579340343829244e-05, 0.00065727735636755824, 4.4731757952831686e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -83, -107, -28, 
  /* [0][1][][] */ 67, -35, 18, 
  /* [0][2][][] */ 33, 127, 20, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 24, -58, 0, 
  /* [4][1][][] */ 25, -127, 3, 
  /* [4][2][][] */ 17, -82, -11, 
  /* [5][0][][] */ -64, 26, -4, 
  /* [5][1][][] */ -127, 33, 2, 
  /* [5][2][][] */ -81, 29, -1, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -35, -50, -87, 
  /* [7][0][][] */ 34, 25, -16, 
  /* [7][1][][] */ 127, 70, -4, 
  /* [7][2][][] */ 34, 6, -21, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -21, 53, -10, 
  /* [9][1][][] */ -16, 127, -14, 
  /* [9][2][][] */ -6, 87, -9, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 5, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 86, 27, -12, 
  /* [13][1][][] */ 127, 103, -13, 
  /* [13][2][][] */ 78, 107, 36, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -85, -24, 17, 
  /* [15][1][][] */ -127, -122, 14, 
  /* [15][2][][] */ -20, -69, -4, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.058703355491161346, 0.22391895949840546, 0.075252324342727661, 0.045793768018484116, 0.0076041342690587044, 0.0099464720115065575, 0.041191864758729935, 0.0084131732583045959, 0.055824846029281616, 0.010898821987211704, 0.12360700964927673, 0.17985929548740387, 0.11582054197788239, 0.0052477316930890083, 0.16760571300983429, 0.011406597681343555, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10368014872074127, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.0716404989361763, } };
const TfArray<1, int> quant50_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.058440130203962326, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.085022777318954468, } };
const TfArray<1, int> quant54_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.044256210327148438, } };
const TfArray<1, int> quant58_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.019923940300941467, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.042401481419801712, } };
const TfArray<1, int> quant61_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.072628036141395569, } };
const TfArray<1, int> quant62_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.041231490671634674, } };
const TfArray<1, int> quant65_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.091269083321094513, } };
const TfArray<1, int> quant66_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.022387038916349411, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.028517128899693489, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.051128648221492767, } };
const TfArray<1, int> quant69_zero = { 1, { -66 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
